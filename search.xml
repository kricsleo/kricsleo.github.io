<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>CommonJS-AMD-CMD</title>
      <link href="/2018/09/25/CommonJS-AMD-CMD/"/>
      <url>/2018/09/25/CommonJS-AMD-CMD/</url>
      <content type="html"><![CDATA[<h1 id="JavaScript-模块化"><a href="#JavaScript-模块化" class="headerlink" title="JavaScript 模块化"></a>JavaScript 模块化</h1><p>远古时期, 我们写的 js 都是都是通过 script 标签进行管理, 这使得项目一旦复杂, 页面内便会写上成堆的 script 标签来引入各种外部 js 文件, 而且我们还需要保证 js 的顺序, 因为一个 js 文件内的方法往往依赖另外的 js 来实现, 我们通过确保书写顺序来确保 js 的加载顺序, 这当然是极不方便的, 后来前端工程师们就开始了尝试 js 模块化的探索之旅.<br><a id="more"></a></p><h2 id="什么是模块化"><a href="#什么是模块化" class="headerlink" title="什么是模块化"></a>什么是模块化</h2><blockquote><p>在了解这些规范之前，还是先了解一下什么是模块化。<br>模块化是指在解决某一个复杂问题或者一系列的杂糅问题时，依照一种分类的思维把问题进行系统性的分解以之处理。模块化是一种处理复杂系统分解为代码结构更合理，可维护性更高的可管理的模块的方式。可以想象一个巨大的系统代码，被整合优化分割成逻辑性很强的模块时，对于软件是一种何等意义的存在。对于软件行业来说：解耦软件系统的复杂性，使得不管多么大的系统，也可以将管理，开发，维护变得“有理可循”。<br>还有一些对于模块化一些专业的定义为：模块化是软件系统的属性，这个系统被分解为一组高内聚，低耦合的模块。那么在理想状态下我们只需要完成自己部分的核心业务逻辑代码，其他方面的依赖可以通过直接加载被人已经写好模块进行使用即可。<br>首先，既然是模块化设计，那么作为一个模块化系统所必须的能力：<br>定义封装的模块。<br>定义新模块对其他模块的依赖。<br>可对其他模块的引入支持。<br>好了，思想有了，那么总要有点什么来建立一个模块化的规范制度吧，不然各式各样的模块加载方式只会将局搅得更为混乱。那么在JavaScript中出现了一些非传统模块开发方式的规范 CommonJS的模块规范，AMD（Asynchronous Module Definition），CMD（Common Module Definition）等。  –<a href="https://segmentfault.com/a/1190000004873947" target="_blank" rel="noopener">文章</a></p></blockquote><h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>CommmonsJS是同步加载模块的, 例如如下代码: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// foobar.js</span></span><br><span class="line"><span class="comment">// 私有变量</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="number">123</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 公有方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foobar</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// do someing ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.bar = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//do someing ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// exports对象上的方法和变量是公有的</span></span><br><span class="line"><span class="keyword">var</span> foobar = <span class="keyword">new</span> foobar();</span><br><span class="line">exports.foobar = foobar;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="comment">// require方法默认读取js文件，所以可以省略js后缀</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="built_in">require</span>(<span class="string">'./boobar'</span>).foobar;</span><br><span class="line"> </span><br><span class="line">test.bar();</span><br></pre></td></tr></table></figure><p>CommonJS规定一个单独的 js 文件就是一个模块, 在 js 文件中引入其他的模块需使用关键字<code>require</code>, 例如<code>require(&#39;./a&#39;)</code>, 该方法会根据读取这个文件然后返回这个文件内部的<code>exports</code>对象, 文件内需要导出的东西使用关键字<code>exports</code>, 例如<code>exports.foobar = foobar</code>, 需要注意的是CommonJS 是同步加载模块的, 也就是说会在模块加载完毕之后再去执行接下里的代码, 会阻塞 js 的线程, 对于像 Node.js 这样的服务端, 因为各个模块文件都存在本地硬盘上, 加载起来很快, 所以阻塞的时间很短, 属于可以接受的程度, 但是对于浏览器端, 需要通过网络下载下来各个依赖文件, 这个阻塞的时间就比较长了, 所以 CommonJS一般用在 Node.js 中, 同时也因为 Node.js 发扬光大.</p><p>那么在浏览器端为了实现异步加载模块, 就产生了 AMD 和 CMD 解决方案.</p><h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><p>AMD 全称是”Asynchronous Module Definition”, 中文名是”异步模块定义”</p><h3 id="AMD-定义模块"><a href="#AMD-定义模块" class="headerlink" title="AMD 定义模块"></a>AMD 定义模块</h3><p>AMD 定义了一个简洁实用的 api, <code>define(id, dependencies?, factory)</code>;<br>第一个参数<code>id</code>为字符串类型, 表示模块标志, 为可选参数, 如果不存在则模块标识应该默认定义为在加载器中被请求脚本的标识。如果存在，那么模块标识必须为顶层的或者一个绝对的标识。<br>第二个参数<code>dependencies</code>为数组类型, 表示当前模块所依赖的模块的模块标识.<br>第三个参数<code>factory</code>是一个需要实例化的函数或者一个对象.</p><p>可以使用这个 api 进行灵活的模块定义:</p><ul><li>定义无依赖的模块</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">define( &#123;</span><br><span class="line">    add : <span class="function"><span class="keyword">function</span>(<span class="params"> x, y </span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x + y ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><ul><li>定义有依赖的模块</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">'alpha'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">alpha</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        verb: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> alpha.verb() + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>定义数据对象模块</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">define(&#123;</span><br><span class="line">    users: [],</span><br><span class="line">    members: []</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>具名模块</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">'alpha'</span>, [<span class="string">'require'</span>, <span class="string">'exports'</span>, <span class="string">'beta'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">reqire, exports, beta</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">export</span>.verb = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beta.verb();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// or</span></span><br><span class="line">        <span class="comment">// return require('beta').verb();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>包装模块</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'a'</span>);</span><br><span class="line">    exports.action = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>除了define外，AMD 还保留一个关键字<code>require</code>. <code>require</code> 作为规范保留的全局标识符，可以实现为 <code>module loader</code>，也可以不实现。<br>AMD模式可以用于浏览器环境并且允许非同步加载模块，也可以按需动态加载模块。</p><h3 id="AMD-使用模块"><a href="#AMD-使用模块" class="headerlink" title="AMD 使用模块"></a>AMD 使用模块</h3><p>api: <code>require(dependencies, callback);</code><br>第一个参数<code>dependencies</code>为数组类型, 里面是当前回调函数需要依赖的模块<br>第二个参数<code>callback</code>为回调函数, 当依赖加载完毕之后会执行这个回调函数, 函数的参数就是所加载的模块, 可在函数中使用<br>例如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="string">'math'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">math</span>)) </span>&#123;</span><br><span class="line">    math.add(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="AMD-规范的实现者-RequireJS"><a href="#AMD-规范的实现者-RequireJS" class="headerlink" title="AMD 规范的实现者 RequireJS"></a>AMD 规范的实现者 RequireJS</h3><p>RequireJS 是一个前端的模块化管理的工具库，遵循AMD规范，它的作者就是AMD规范的创始人 James Burke。所以说RequireJS是对AMD规范的阐述一点也不为过。</p><p>RequireJS的思想是通过一个函数将所有需要的或者依赖的模块加载进来, 然后返回一个新的函数(或者模块), 我们所有关于新模块的业务代码都在这个函数里面进行, 其内部也可以无限制的使用已经加载进来的模块.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script data-main=<span class="string">'scripts/main'</span> src=<span class="string">'scripts/require.js'</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>那么scripts下的main.js则是指定的主代码脚本文件，所有的依赖模块代码文件都将从该文件开始异步加载进入执行。RequireJS 的定义<code>define</code>和使用<code>require</code>都与之前说的 AMD 规范一致.</p><h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><p>CMD是SeaJS 在推广过程中对模块定义的规范化产出, 特点有如下两点:</p><ul><li>对于依赖的模块, AMD 是提前执行, 而 CMD 是延迟执行. (不过RequireJS从2.0开始，也改成可以延迟执行, 根据写法不同，处理方式不同.)</li><li>AMD 推崇依赖前置, CMD 推崇依赖就近</li></ul><p>对比: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AMD</span></span><br><span class="line">define([<span class="string">'./a'</span>, <span class="string">'./b'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依赖一开始就写好</span></span><br><span class="line">    a.test();</span><br><span class="line">    b.test();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// CMD</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依赖就近</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>);</span><br><span class="line">    a.test();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 软依赖</span></span><br><span class="line">    <span class="keyword">if</span>(status) &#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">'./b'</span>);</span><br><span class="line">        b.test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>AMD也支持 CMD 的写法, 但依赖前置是官方的推荐做法<br>AMD 的 api 是一个当多个用, CMD 严格的区分推崇职责单一, 例如 AMD 里面的require 分为全局的和局部的, 但是 CMD 里面没有全局的 require, 提供 seajs.use()来实现模块系统的加载启动.</p><h2 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h2><p>UMD 是 CommonJS 和 AMD 的融合.</p><p>AMD模块以浏览器第一的原则发展，异步加载模块。<br>CommonJS模块以服务器第一原则发展，选择同步加载，它的模块无需包装(unwrapped modules)。<br>这迫使人们又想出另一个更通用的模式UMD （Universal Module Definition）。希望解决跨平台的解决方案。</p><p>UMD先判断是否支持Node.js的模块（exports）是否存在，存在则使用Node.js模块模式。<br>在判断是否支持AMD（define是否存在），存在则使用AMD方式加载模块。</p><p>判断过程如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window, factory</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> exports = <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="built_in">module</span>.exports = factory();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">        define(factory);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">window</span>.eventUtil = factory();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// module...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="ES6-模块化"><a href="#ES6-模块化" class="headerlink" title="ES6 模块化"></a>ES6 模块化</h2><p>经历了那么多探索以后, ES6终于在语言层面引入了模块化, 旨在成为服务端和浏览器端通用的解决方案, 模块功能主要由两个命令构成, <code>export</code>和<code>import</code>, <code>export</code>命令用于规定模块的对外接口，<code>import</code>命令用于输入其他模块提供的功能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义模块 module.js</span></span><br><span class="line"><span class="keyword">let</span> basicNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> add = funtion(a, b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; basicNum, add&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; basicNum, add &#125; <span class="keyword">from</span> <span class="string">'./module'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> add(<span class="number">2</span>, basicNum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种引入方式你需要知道模块内部导出的内容的具体名字, 在你引入的时候需要一字不差的对应上名字, 有很多时候我们并不想去模块内部查看它到底是用的什么名字, 这个时候 ES6 贴心的为我们额外提供了一个<code>export default</code>, 为模块指定一个默认输出, 对应的<code>import</code>不需要使用大括号, 这更加接近AMD 的引用写法.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义模块 module.js</span></span><br><span class="line"><span class="keyword">let</span> basicNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> add = funtion(a, b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; basicNum, add &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">import</span> <span class="built_in">module</span> <span class="keyword">from</span> <span class="string">'./module'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">module</span>.add(<span class="number">2</span>, <span class="built_in">module</span>.basicNum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是ES6的模块不是对象, 它的<code>import</code>会被 JavaScript 引擎静态分析, 在编译的时候就引入模块代码, 而不是在运行的时候加载, 所以也就无法实现条件加载. 但是好处是这使得对代码进行静态分析成为可能.</p><h2 id="ES6模块与-CommonJS-的差异"><a href="#ES6模块与-CommonJS-的差异" class="headerlink" title="ES6模块与 CommonJS 的差异"></a>ES6模块与 CommonJS 的差异</h2><ul><li><strong>CommonJS 输出的是一个值得拷贝, ES6输出的是一个值的引用</strong></li></ul><p>CommonJS 输出的是一个值的拷贝, 也就是说一旦已经输出, 那么模块内部之后再发生变动也不会影响这个已经输出的值.<br>ES6的运行机制和 CommonJS 不一样, 当 js 引擎在进行静态分析的时候如果发现<code>import</code>那么就会生成一个对应模块的只读引用, 只有在运行的时候才根据这个引用到对应的模块去取值。 换句话说，ES6 的import有点像 Unix 系统的“符号连接”，原始值变了，import加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</p><ul><li><strong>CommonJS 是运行时加载, ES6是编译时输出接口</strong></li></ul><p>运行时加载: CommonJS模块是对象, 即在输入时先加载整个模块, 生成一个对象, 然后再从这个对象上面读取方法, 这种加载称为’运行时加载’</p><p>编译时加载: ES6模块不是对象, 而是通过<code>export</code>命令显示指定输出的代码, <code>import</code>时采取静态命令的形式, 即在<code>import</code>时指定加载某个值, 而不是加载整个模块, 这种加载称为’编译时加载’.</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端模块化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AST</title>
      <link href="/2018/09/24/AST/"/>
      <url>/2018/09/24/AST/</url>
      <content type="html"><![CDATA[<h1 id="AST"><a href="#AST" class="headerlink" title="AST"></a>AST</h1><h2 id="AST-简介"><a href="#AST-简介" class="headerlink" title="AST 简介"></a>AST 简介</h2><blockquote><p>在计算机科学中, 抽象语法树(Abstract Syntax Tree, AST)或者简称语法树(Syntax Tree)是源代码语法解构的一种抽象表现, 它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构. – <a href="https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%AA%9E%E6%B3%95%E6%A8%B9" target="_blank" rel="noopener">维基百科</a></p></blockquote><p>而在 JavaScript 中我们通过 JavaScript Parser 把代码转化为一颗抽象语法树（AST），这颗树定义了代码的结构，通过操纵这颗树，我们可以精准的定位到声明语句、赋值语句、运算语句等等，实现对代码的分析、优化、变更等操作. 然后浏览器会把 js 源码通过解析器转为抽象语法树，再进一步转化为字节码或直接生成机器码. – <a href="https://www.jianshu.com/p/b9f14f384954" target="_blank" rel="noopener">简书文章</a></p><p>关于 Vue 的语法树解析可以查看<a href="https://github.com/answershuto/learnVue/blob/master/docs/%E8%81%8A%E8%81%8AVue%E7%9A%84template%E7%BC%96%E8%AF%91.MarkDown" target="_blank" rel="noopener">这里</a><br><a id="more"></a></p><h2 id="AST-生成过程"><a href="#AST-生成过程" class="headerlink" title="AST 生成过程"></a>AST 生成过程</h2><p>总的来说一段源代码在执行之前会经历如下过程:</p><ol><li>分词 / 词法分析: 将一个语句中的关键词进行提取, 例如<code>let a = 3;</code>, 分词提取之后得到<code>let</code>, <code>a</code>, <code>=</code>, <code>3</code>, <code>;</code></li><li>解析 / 语法分析: 在对上面已经被拆分提取过的关键词进行分析之后建立一课语法树(<code>AST</code>), 效果可参见下面</li><li>底层代码生成: 得到语法树之后执行引擎(例如 chrome 的 v8引擎)会对这颗树进行一定的优化分析, 然后生成更底层的代码或者机器指令交由机器执行</li></ol><p>无图不真相, 我们借助一个在线的<a href="http://resources.jointjs.com/demos/javascript-ast" target="_blank" rel="noopener">可视化工具</a>或者<a href="http://esprima.org/demo/parse.html#" target="_blank" rel="noopener">esprima</a>来具体看一下过程, 对于如下代码进行生成 AST 树</p><ol><li><p>源码:</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addA</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = addA(<span class="number">2</span>) + b;</span><br></pre></td></tr></table></figure></li><li><p>词法分析结果</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Keyword(var) Identifier(a) Punctuator(=) Numeric(42) Punctuator(;) Keyword(var) Identifier(b) Punctuator(=) </span><br><span class="line">Numeric(5) Punctuator(;) Keyword(function) Identifier(addA) Punctuator(() Identifier(d) Punctuator()) </span><br><span class="line">Punctuator(&#123;)Keyword(return) Identifier(a) Punctuator(+) Identifier(d)Punctuator(;)</span><br><span class="line">Punctuator(&#125;) Keyword(var) Identifier(c) Punctuator(=) Identifier(addA) </span><br><span class="line">Punctuator(()Numeric(2) Punctuator()) Punctuator(+) Identifier(b) Punctuator(;)</span><br></pre></td></tr></table></figure></li><li><p>生成 AST 树</p><p> <img style="width: 300px; heitht: 300px" src="data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20version%3D%221.1%22%20id%3D%22v-151%22%20width%3D%22100%25%22%20height%3D%22100%25%22%20viewBox%3D%220%200%20600%201190%22%3E%3Cdefs%20id%3D%22v-4%22%3E%3Cmarker%20id%3D%22v-2-857093843%22%20orient%3D%22auto%22%20overflow%3D%22visible%22%20markerUnits%3D%22userSpaceOnUse%22%3E%3Cpath%20id%3D%22v-127%22%20stroke%3D%22%23666%22%20fill%3D%22%23666%22%20transform%3D%22rotate(180)%22%20d%3D%22M%204%20-4%200%200%204%204%20z%22%2F%3E%3C%2Fmarker%3E%3C%2Fdefs%3E%3Cg%20id%3D%22v-3%22%20class%3D%22joint-viewport%22%3E%3Cg%20model-id%3D%220575a616-604c-455a-a0ef-e26b748b98ab%22%20id%3D%22j_1%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(0%2C0)%22%3E%3Crect%20id%3D%22v-6%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22black%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-7%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C37.8%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3EProgram%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-8%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22170a8aff-943a-4d5b-ac39-114c9f602e9b%22%20id%3D%22j_21%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(320%2C1150)%22%3E%3Crect%20id%3D%22v-106%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23ff5246%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-107%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C57%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3Eb%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-108%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22c6859033-e970-457f-be98-1f1155b15b62%22%20id%3D%22j_22%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(80%2C50)%22%3E%3Crect%20id%3D%22v-111%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23232323%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-112%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C7.9%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3EVariableDeclaration%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-113%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%2282155076-1860-4d62-9299-94a7d5696b7b%22%20id%3D%22j_23%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(240%2C900)%22%3E%3Crect%20id%3D%22v-116%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23fcbc2a%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-117%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C57%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3E%2B%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-118%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%226ae2936e-d297-4ea2-b358-ea760462f013%22%20id%3D%22j_20%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(400%2C650)%22%3E%3Crect%20id%3D%22v-101%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23ff5246%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-102%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C57.3%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3Ea%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-103%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%2200527959-5960-43af-a963-fff4b2e4bdf0%22%20id%3D%22j_25%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-126%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20140%20280%20L%20140%20315%20L%20160%20315%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22be60f611-cd88-40b4-8df0-79d83e399d2a%22%20id%3D%22j_26%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-129%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20300%20930%20L%20300%201165%20L%20320%201165%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22f2233185-5f97-4f4a-99c0-0c748d07c2c5%22%20id%3D%22j_27%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-130%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20220%20830%20L%20220%20915%20L%20240%20915%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%229cd1bf03-f527-4b8f-b041-7811e6e6f207%22%20id%3D%22j_28%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-131%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20300%20580%20L%20300%20615%20L%20320%20615%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22df4cb4db-223c-4a5b-957d-711034a4bf64%22%20id%3D%22j_29%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-132%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%2060%2030%20L%2060%20265%20L%2080%20265%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%224b5abfb2-484e-46a6-af0f-22540068b7ce%22%20id%3D%22j_19%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(160%2C100)%22%3E%3Crect%20id%3D%22v-96%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23414141%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-97%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C10.7%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3EVariableDeclarator%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-98%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22e203c45b-b788-41f9-8dcf-ede427cfbf4d%22%20id%3D%22j_30%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-133%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20380%20630%20L%20380%20665%20L%20400%20665%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22d6530e93-dc7d-4c20-980a-64b3ba88afb8%22%20id%3D%22j_18%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(240%2C550)%22%3E%3Crect%20id%3D%22v-91%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23232323%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-92%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C14.9%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3EReturnStatement%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-93%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%224f24a926-2447-4fa1-ac1a-da6767ecf356%22%20id%3D%22j_31%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-134%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20300%20930%20L%20300%20965%20L%20320%20965%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22e9b555f0-ea57-4192-acc2-66f395661459%22%20id%3D%22j_17%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(480%2C1100)%22%3E%3Crect%20id%3D%22v-86%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%2377c63d%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-87%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C57.2%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3E2%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-88%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%2236c11933-8bc0-4098-b092-a59f9e2c99f5%22%20id%3D%22j_32%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-135%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20380%20630%20L%20380%20715%20L%20400%20715%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22cad8dd4f-91c0-4789-b5aa-02eae8640c50%22%20id%3D%22j_16%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(400%2C700)%22%3E%3Crect%20id%3D%22v-81%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23ff5246%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-82%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C57%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3Ed%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-83%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%222b50fe52-2731-41bc-b3bf-74df89127470%22%20id%3D%22j_33%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-136%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20220%20130%20L%20220%20215%20L%20240%20215%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22babe2e26-e654-4393-994d-78fbb50bcc87%22%20id%3D%22j_15%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(240%2C150)%22%3E%3Crect%20id%3D%22v-76%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23ff5246%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-77%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C57.3%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3Ea%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-78%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%2282e8806c-d30d-43fa-b3e7-ab92cb8b3b57%22%20id%3D%22j_34%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-137%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%2060%2030%20L%2060%20765%20L%2080%20765%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22a3469a79-1a18-499d-82fa-a7f1d857082f%22%20id%3D%22j_14%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(160%2C500)%22%3E%3Crect%20id%3D%22v-71%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23232323%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-72%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C17.8%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3EBlockStatement%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-73%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%225b8fb7b2-e2cf-4e2b-a668-a61d3aaab065%22%20id%3D%22j_35%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-138%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20380%20980%20L%20380%201015%20L%20400%201015%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22967abd22-7594-482a-ac7c-d0392004d0c0%22%20id%3D%22j_13%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(400%2C1050)%22%3E%3Crect%20id%3D%22v-66%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%2363c1f1%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-67%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C32.3%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3Earguments%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-68%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%228db55fd0-0827-4e3c-876d-80b049ff3d77%22%20id%3D%22j_36%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-139%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20140%20780%20L%20140%20815%20L%20160%20815%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%2212806624-ac4c-4b74-97fa-0045761cee49%22%20id%3D%22j_12%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(80%2C750)%22%3E%3Crect%20id%3D%22v-61%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23232323%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-62%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C7.9%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3EVariableDeclaration%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-63%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22f0b73dfc-2324-4734-b162-32955bc345a5%22%20id%3D%22j_37%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-140%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20220%20130%20L%20220%20165%20L%20240%20165%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22cfd70751-157f-4b97-ac3a-21cc81f62bf4%22%20id%3D%22j_11%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(240%2C200)%22%3E%3Crect%20id%3D%22v-56%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%2377c63d%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-57%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C53.9%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3E42%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-58%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%2254b43d7a-93ee-4080-b6d3-fdfef5f3a973%22%20id%3D%22j_38%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-141%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20220%20830%20L%20220%20865%20L%20240%20865%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22be156511-ce0c-4e34-825d-5ae6739fa349%22%20id%3D%22j_10%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(80%2C450)%22%3E%3Crect%20id%3D%22v-51%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23232323%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-52%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C15.6%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3Efunction%C2%A0addA(d)%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-53%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22dbc524b4-32c6-4951-8c5a-2565f3402bd7%22%20id%3D%22j_39%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-142%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20140%20480%20L%20140%20515%20L%20160%20515%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22c0beb125-fd3b-4fc6-94f4-8462e74c6adc%22%20id%3D%22j_9%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(160%2C800)%22%3E%3Crect%20id%3D%22v-46%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23414141%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-47%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C10.7%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3EVariableDeclarator%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-48%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22aa5b04fd-f487-4c1d-96aa-320c6917b5cf%22%20id%3D%22j_40%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-143%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%2060%2030%20L%2060%2065%20L%2080%2065%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%228e58b277-e590-4f20-a319-b5b31f9caa82%22%20id%3D%22j_8%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(240%2C400)%22%3E%3Crect%20id%3D%22v-41%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%2377c63d%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-42%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C57.2%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3E5%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-43%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22bbd0e695-ff24-4ed0-b32b-00b1f9b3fcc7%22%20id%3D%22j_41%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-144%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20460%201080%20L%20460%201115%20L%20480%201115%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22be43f345-2f25-47d4-9108-bbacb4b00d76%22%20id%3D%22j_7%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(240%2C850)%22%3E%3Crect%20id%3D%22v-36%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23ff5246%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-37%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C57.3%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3Ec%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-38%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22aa48ee7f-f636-4e39-bead-ebf4e5618f76%22%20id%3D%22j_42%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-145%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20140%2080%20L%20140%20115%20L%20160%20115%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%2279ee0a45-bb59-415a-adfc-5be54602ee19%22%20id%3D%22j_6%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(240%2C350)%22%3E%3Crect%20id%3D%22v-31%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23ff5246%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-32%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C57%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3Eb%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-33%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%2211b62819-4f6c-4085-95f9-1faf5ae075ad%22%20id%3D%22j_43%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-146%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20380%20980%20L%20380%201065%20L%20400%201065%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%225b23512d-12ce-45a3-a39c-4a02c5770220%22%20id%3D%22j_5%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(400%2C1000)%22%3E%3Crect%20id%3D%22v-26%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23ff5246%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-27%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C46.6%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3EaddA%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-28%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22c83ae87c-0bc6-4a3c-9750-588d97be6312%22%20id%3D%22j_44%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-147%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%2060%2030%20L%2060%20465%20L%2080%20465%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%221dc65a22-7066-4896-83f4-6e6f5562386f%22%20id%3D%22j_4%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(160%2C300)%22%3E%3Crect%20id%3D%22v-21%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23414141%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-22%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C10.7%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3EVariableDeclarator%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-23%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%220134f072-a6ea-499c-9432-f06fbb515403%22%20id%3D%22j_45%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-148%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20220%20530%20L%20220%20565%20L%20240%20565%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22e927ad0c-8128-45fd-bbd6-f176bc7ec23f%22%20id%3D%22j_3%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(320%2C950)%22%3E%3Crect%20id%3D%22v-16%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23232323%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-17%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C20.4%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3ECallExpression%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-18%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%2276c82168-c906-4249-9646-829a6278d656%22%20id%3D%22j_46%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-149%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20220%20330%20L%20220%20365%20L%20240%20365%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%225160889d-e32b-4246-8d12-2c84c05abda7%22%20id%3D%22j_2%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(80%2C250)%22%3E%3Crect%20id%3D%22v-11%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23232323%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-12%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C7.9%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3EVariableDeclaration%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-13%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%22374a7edb-7f45-4bf4-9cf6-00862bdb4bb6%22%20id%3D%22j_47%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-link%20joint-link%20joint-theme-default%22%20data-type%3D%22ast.Link%22%3E%3Cpath%20class%3D%22connection%22%20id%3D%22v-150%22%20fill%3D%22none%22%20stroke%3D%22%23666%22%20pointer-events%3D%22none%22%20marker-end%3D%22url(%23v-2-857093843)%22%20d%3D%22M%20220%20330%20L%20220%20415%20L%20240%20415%22%2F%3E%3C%2Fg%3E%3Cg%20model-id%3D%222dfbf5af-950d-4359-8f75-f6fc3d5ef508%22%20id%3D%22j_24%22%20class%3D%22joint-cell%20joint-type-ast%20joint-type-ast-node%20joint-element%20joint-theme-default%22%20data-type%3D%22ast.Node%22%20transform%3D%22translate(320%2C600)%22%3E%3Crect%20id%3D%22v-121%22%20rx%3D%225%22%20ry%3D%225%22%20stroke%3D%22none%22%20fill%3D%22%23fcbc2a%22%20width%3D%22120%22%20height%3D%2230%22%2F%3E%3Ctext%20id%3D%22v-122%22%20font-size%3D%2210%22%20xml%3Aspace%3D%22preserve%22%20y%3D%220.8em%22%20fill%3D%22white%22%20font-family%3D%22'Helvetica%20Neue%20Light'%2C'Helvetica%20Neue'%2C'Source%20Sans%20Pro'%2Csans-serif%22%20letter-spacing%3D%221px%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C57%2C10.7)%22%3E%3Ctspan%20dy%3D%220%22%20class%3D%22v-line%22%3E%2B%3C%2Ftspan%3E%3C%2Ftext%3E%3Cpath%20id%3D%22v-123%22%20stroke%3D%22%23666%22%20d%3D%22M%200%200%200%2010%20M%20-5%2010%205%2010%22%20visibility%3D%22hidden%22%20pointer-events%3D%22none%22%20transform%3D%22matrix(1%2C0%2C0%2C1%2C60%2C30)%22%2F%3E%3C%2Fg%3E%3C%2Fg%3E%3Cg%20id%3D%22v-5%22%20class%3D%22joint-tools-container%22%20transform%3D%22matrix(1.0227966101694916%2C0%2C0%2C1.0227966101694916%2C0%2C0)%22%2F%3E%3C%2Fsvg%3E"></p><p> 或者我们可以使用 json 格式来查看</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"Program"</span>,</span><br><span class="line">    <span class="attr">"body"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"VariableDeclaration"</span>,</span><br><span class="line">            <span class="attr">"declarations"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"VariableDeclarator"</span>,</span><br><span class="line">                    <span class="attr">"id"</span>: &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                        <span class="attr">"name"</span>: <span class="string">"a"</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">"init"</span>: &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"Literal"</span>,</span><br><span class="line">                        <span class="attr">"value"</span>: <span class="number">42</span>,</span><br><span class="line">                        <span class="attr">"raw"</span>: <span class="string">"42"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"kind"</span>: <span class="string">"var"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"VariableDeclaration"</span>,</span><br><span class="line">            <span class="attr">"declarations"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"VariableDeclarator"</span>,</span><br><span class="line">                    <span class="attr">"id"</span>: &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                        <span class="attr">"name"</span>: <span class="string">"b"</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">"init"</span>: &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"Literal"</span>,</span><br><span class="line">                        <span class="attr">"value"</span>: <span class="number">5</span>,</span><br><span class="line">                        <span class="attr">"raw"</span>: <span class="string">"5"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"kind"</span>: <span class="string">"var"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"FunctionDeclaration"</span>,</span><br><span class="line">            <span class="attr">"id"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"addA"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"params"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"d"</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"body"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"BlockStatement"</span>,</span><br><span class="line">                <span class="attr">"body"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"ReturnStatement"</span>,</span><br><span class="line">                        <span class="attr">"argument"</span>: &#123;</span><br><span class="line">                            <span class="attr">"type"</span>: <span class="string">"BinaryExpression"</span>,</span><br><span class="line">                            <span class="attr">"operator"</span>: <span class="string">"+"</span>,</span><br><span class="line">                            <span class="attr">"left"</span>: &#123;</span><br><span class="line">                                <span class="attr">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                                <span class="attr">"name"</span>: <span class="string">"a"</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                            <span class="attr">"right"</span>: &#123;</span><br><span class="line">                                <span class="attr">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                                <span class="attr">"name"</span>: <span class="string">"d"</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"generator"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"expression"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"async"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"VariableDeclaration"</span>,</span><br><span class="line">            <span class="attr">"declarations"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"VariableDeclarator"</span>,</span><br><span class="line">                    <span class="attr">"id"</span>: &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                        <span class="attr">"name"</span>: <span class="string">"c"</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">"init"</span>: &#123;</span><br><span class="line">                        <span class="attr">"type"</span>: <span class="string">"BinaryExpression"</span>,</span><br><span class="line">                        <span class="attr">"operator"</span>: <span class="string">"+"</span>,</span><br><span class="line">                        <span class="attr">"left"</span>: &#123;</span><br><span class="line">                            <span class="attr">"type"</span>: <span class="string">"CallExpression"</span>,</span><br><span class="line">                            <span class="attr">"callee"</span>: &#123;</span><br><span class="line">                                <span class="attr">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                                <span class="attr">"name"</span>: <span class="string">"addA"</span></span><br><span class="line">                            &#125;,</span><br><span class="line">                            <span class="attr">"arguments"</span>: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="attr">"type"</span>: <span class="string">"Literal"</span>,</span><br><span class="line">                                    <span class="attr">"value"</span>: <span class="number">2</span>,</span><br><span class="line">                                    <span class="attr">"raw"</span>: <span class="string">"2"</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">"right"</span>: &#123;</span><br><span class="line">                            <span class="attr">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">                            <span class="attr">"name"</span>: <span class="string">"b"</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"kind"</span>: <span class="string">"var"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"sourceType"</span>: <span class="string">"script"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="AST的作用"><a href="#AST的作用" class="headerlink" title="AST的作用"></a>AST的作用</h2><p>除了帮助执行引擎去生成底层的代码, AST 在我们常见的代码检查工具或者 webpack 中都可以用来作为代码分析的依据, 通过遍历 AST 树, 找出其中的隐藏问题, 或者提出优化的建议, 又或者是代码高亮或者代码压缩都是在分析这颗树的基础上进行的</p><h2 id="浏览器渲染过程"><a href="#浏览器渲染过程" class="headerlink" title="浏览器渲染过程"></a>浏览器渲染过程</h2><p>首先我们看一下浏览器的深层结构:</p><ol><li>用户界面-包括地址栏, 返回按钮等 UI 组件, 除了主窗口</li><li>浏览器引擎-用来查询和操作渲染引擎的接口</li><li>渲染引擎-负责渲染请求的内容. 比如, 如果请求的资源是html, 那么渲染引擎负责解析 html 和 css, 然后把解析结果渲染到页面中</li><li>js 引擎-用来解析执行 JavaScript 代码</li><li>网络连接-用于处理网络请求, 如 http 请求. 这一部分是跨平台的</li><li>UI 后台-用于渲染基础组件, 比如多选框和窗口等, 它暴露了一个不是特定平台的通用接口, 在底层调用了操作系统的用户接口</li><li>数据存储-这是一个持久层. 浏览器在硬盘中存储各式数据, 比如 cookie , localStorage 等</li></ol><p>各个组件的关系如下:<br><img src="https://segmentfault.com/img/bVMk2D?w=500&amp;h=339" alt="浏览器组件关系"></p><p>我们需要注意的是, js 引擎是单线程的, 但是浏览器是多线程的, 比如浏览器会同时开启js 引擎线程, 界面渲染线程, 事件触发线程, http 请求线程</p><blockquote><p>HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。</p></blockquote><p>接下来我们着重看一下渲染引擎所做的工作:<br>总的过程是: 解析HTML并构建DOM树 =&gt; 构建render树 =&gt; render树布局 =&gt; render树绘制<br>浏览器引擎开始解析 html, 并把标签转为内容树中的 dom 节点, 同时它也开始解析 css, 外链的 css 以及文件内的 css, 所有这些样式数据以及 html 中的可见性指令都用来构建另外一棵树,  – render 树<br>我们以Safari 和 chrome 使用的Webkit 引擎渲染过程如下:<br><img src="https://segmentfault.com/img/bVHJfZ?w=624&amp;h=289" alt="Webkit 主流程"><br>firefox使用的Gecko 引擎渲染过程如下:<br><img src="https://segmentfault.com/img/bVHJfZ?w=624&amp;h=289" alt="Gecko 主流程"></p><p>此小节内容参考与 segmentfault 上cucumber翻译的文章:<br><a href="https://segmentfault.com/a/1190000009108377" target="_blank" rel="noopener">浏览器工作过程详解（译）（一）</a><br><a href="https://segmentfault.com/a/1190000009236417" target="_blank" rel="noopener">浏览器工作过程详解（译）（二）</a></p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AST </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js-object</title>
      <link href="/2018/09/22/js-object/"/>
      <url>/2018/09/22/js-object/</url>
      <content type="html"><![CDATA[<h1 id="JavaScript的内存机制及按值传递"><a href="#JavaScript的内存机制及按值传递" class="headerlink" title="JavaScript的内存机制及按值传递"></a>JavaScript的内存机制及按值传递</h1><p>JavaScript是一门轻级的编程语言, 我之前也用过C++和Java, 相比起来JavaScript是一门年轻简约的编程语言, 但是我很看好这门语言, 我记得之前看过一个大牛说现在的前端开发是黎明前的黑暗, 在数年之内必定会清晰明朗起来. 自己深表赞同, JavaScript现在的确是有很多的缺陷, 相比较起来它的依赖库也不如java那般丰富, 但是它一个最大的优点(个人认为)就是它的轻量级, 你仅仅需要一个浏览器(或者Node环境, 但是Node其实也是基于Chrome的V8引擎), 他就能完成自己所有的工作, 我坚信随着各种标准的制定以及已经走在探索路上的前端开发师们能够很快为JavaScript带来它起飞的春天.</p><p>上面是我的个人希冀, 说到这篇文章, 主要是记录一下JavaScript的内存机制以及按值传递规则, 因为我在JavaScript的开发过程中会不由自主的把它和我也使用过的C++和Java进行比较, 我认为编程语言是互通的, 但是它们在某些细节上的处理有所不同, 则正是我们需要去注意的.</p><a id="more"></a><h2 id="内存机制"><a href="#内存机制" class="headerlink" title="内存机制"></a>内存机制</h2><p>在JavaScript中有<code>堆</code>和<code>栈</code>两个存储概念, <code>堆</code>是用来存储<code>Object</code>型数据的 ,<code>栈</code>是用来存储6种基本数据类型(分别是<code>null</code>, <code>undefined</code>, <code>boolean</code>, <code>number</code>, <code>string</code>和ES6中新引入的<code>symbol</code>), 对于我们平时使用的数组<code>Array</code>其实是<code>Object</code>的继承而已, 可以使用<code>typeof</code>运算符查看一个数据的类型, 例如<code>typeof []</code>就会输出<code>object</code>, 另外一个比较特别的就是函数类型, 函数类型的<code>typeof</code>输出的是<code>function</code>, 但是函数其实也是存储在<code>堆</code>中的, 而且可以认为是以字符串的形式存储的.</p><h3 id="为什么有堆和栈之分"><a href="#为什么有堆和栈之分" class="headerlink" title="为什么有堆和栈之分"></a>为什么有<code>堆</code>和<code>栈</code>之分</h3><p>与垃圾回收机制有关，为了使程序运行时占用的内存最小。<br>当一个方法执行时，每个方法都会建立自己的内存栈，在这个方法内定义的变量会逐个放入这块栈内存里，随着方法的执行结束，这个方法的内存栈也将自然销毁了。因此，所有在方法中定义的变量都是放在栈内存中的;<br>当我们在程序中创建一个对象时，这个对象将被保存到运行时数据区中，以便反复理由(因为对象的创建成本通常比较大),这个运行时数据区就是堆内存。堆内存中的对象不会随方法的结束而销毁，即使方法结束后，这个对象还可能被另一个引用变量所引用(方法的参数传递时很常见),则这个对象依然不会被销毁,只有当一个对象没有任何引用变量引用它时,系统的垃圾回收机制才会在核实的时候回收它。  –<a href="https://segmentfault.com/a/1190000016322927#articleHeader3" target="_blank" rel="noopener">参考</a></p><p>在我们知道了JavaScript中的对象是如何存储的之后, 我们就要看一下当我们生成一个变量的时候到底发生了什么.</p><h2 id="生成变量"><a href="#生成变量" class="headerlink" title="生成变量"></a>生成变量</h2><p>假如我们生成的是一个存储基本数据类型的变量, 例如<code>let a = 3</code>或者<code>let b = &#39;hello&#39;</code>, 那么有如下两步: </p><ol><li>在<code>栈</code>中直接开辟出一小块空间</li><li>把你赋予的数据(<code>3</code>或者<code>hello</code>)存储到这个<code>栈</code>空间中</li></ol><p>也就是说数据是直接存储在<code>栈</code>中, 但是当我们生成的是一个存储了对象类型的变量, 例如<code>let c = {name: &#39;krics&#39;}</code>, 那么这个时候过程就要复杂一些:</p><ol><li>在<code>堆</code>中开辟一块空间</li><li>把你赋予的数据<code>{name: &#39;krics&#39;}</code>存储到这个<code>堆</code>空间中</li><li>在<code>栈</code>中开辟一小块空间</li><li>将之前存储了对象数据的<code>堆</code>空间的地址(指针形式)存储到现在刚刚开辟的这个<code>栈</code>空间中</li></ol><p>所以我们真正的数据其实是存储在<code>堆</code>中的, 我们拿到的<code>c</code>变量里面只是存储了数据的真实地址, 当我们需要访问或者操作数据的时候, JavaScript就会根据这个地址去找到对应的数据, 然后访问或者操作它.</p><h2 id="值的拷贝"><a href="#值的拷贝" class="headerlink" title="值的拷贝"></a>值的拷贝</h2><p>我们需要永远记住最关键的一点: <strong>JavaScript中只存在按值传递!!!</strong><br>不同于C++中或者Java中经常出现的指针操作, 在JavaScript中不会出现按引用传递, JavaScript永远只操作一个变量最直接的值, 并不会考虑这个值是基本数据类型还是一个指针, 因为如果是指针, 也并不会去按照指针找到具体的数据, 然后拷贝数据什么的, 是指针, 那我就传递这个指针的字面值, 简单粗暴明了.</p><p>例如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">'hello'</span>;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line"></span><br><span class="line">b = <span class="string">'yell'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// =&gt; 'hello'</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// =&gt; 'yell'</span></span><br></pre></td></tr></table></figure><p>这里发生的故事是:</p><ol><li>在<code>栈</code>中开辟了一个空间叫<code>a</code>, 然后在<code>a</code>里面存入了一个字符串<code>hello</code></li><li>在<code>栈</code>中开辟了一个空间叫<code>b</code>, 然后在<code>b</code>里面存入了一个字符串<code>hello</code>(<code>按值传递</code>, 值是<code>hello</code>, 那么就再存一个<code>hello</code>)</li><li>修改<code>栈</code>中<code>b</code>的值为<code>yell</code></li><li>输出<code>a</code>的值, 没被改变过, 所以输出<code>hello</code></li><li>输出<code>b</code>的值, 先是<code>hello</code>, 后来被改成了<code>yell</code>, 那么最后输出的就是<code>yell</code></li></ol><p>那么我们举一个对象的例子又如何呢?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c = &#123;<span class="attr">name</span>: <span class="string">'krics'</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> d = c;</span><br><span class="line"></span><br><span class="line">c.name = <span class="string">'leo'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(d.name); <span class="comment">// =&gt; 'leo'</span></span><br><span class="line"></span><br><span class="line">d.name = <span class="string">'troy'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(c.name); <span class="comment">// =&gt; 'troy'</span></span><br></pre></td></tr></table></figure><p>这里发生的故事是:</p><ol><li>先在<code>栈</code>中开辟一块空间名字叫做<code>c</code>, 然后在<code>堆</code>中开辟一块空间, 存入数据<code>{name: &#39;krics&#39;}</code>, 然后把<code>堆</code>中刚存储的数据的地址存到<code>c</code>中</li><li>在<code>栈</code>中开辟一块空间名字叫做<code>d</code>, 然后把<code>c</code>中存储的值也就是<code>{name: &#39;krics&#39;}</code>的地址在<code>d</code>中再存储一份</li><li>将<code>c</code>指向的对象中的<code>name</code>的值改为字符串<code>leo</code>,</li><li><code>d</code>和<code>c</code>指向的是同一个对象, 所以第三步中通过<code>c</code>改了<code>name</code>的值以后, 通过<code>d</code>访问这个<code>name</code>时得到的也是改变后的值<code>leo</code></li><li>第五和第六步与第三和第四步做法类似</li></ol><p>这里给出一个很有趣的思考题:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">n</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> b = a;  </span><br><span class="line">a.x = a = &#123;<span class="attr">n</span>:<span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.x); <span class="comment">// =&gt; 想想这里 a.x 的值是什么</span></span><br><span class="line"><span class="built_in">console</span>.log(b.x); <span class="comment">// =&gt; 想想这里 b.x 的值是什么</span></span><br></pre></td></tr></table></figure><p>这里给个提示, 上面主要涉及到三个细节点, 一是JavaScript中正常运算顺序为从右到左, 二是<code>.</code>点运算符的优先级高于<code>=</code>等号, 三就是我们之前讨论过的对象如何赋值问题, 答案可以参考<a href="https://segmentfault.com/a/1190000016322927#articleHeader5" target="_blank" rel="noopener">luoqua的文章</a></p><p>最后我仍然要强调一点: <strong>JavaScript中只存在按值传递!!!</strong>(可以参考&lt;JavaScript高级程序设计&gt;一书中第四章’变量. 作用域和内存问题’)</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>bash</title>
      <link href="/2018/09/13/bash/"/>
      <url>/2018/09/13/bash/</url>
      <content type="html"><![CDATA[<h1 id="常用的bash命令"><a href="#常用的bash命令" class="headerlink" title="常用的bash命令"></a>常用的bash命令</h1><a id="more"></a><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rm -f &lt;file&gt;</span><br><span class="line"></span><br><span class="line">rm -rf &lt;folder&gt;</span><br><span class="line"><span class="comment"># 参数说明:</span></span><br><span class="line"><span class="comment"># -r: 删除目录下所有文件, 包括目录本身</span></span><br><span class="line"><span class="comment"># -f: 强制删除, 不确认</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>flex</title>
      <link href="/2018/09/13/flex/"/>
      <url>/2018/09/13/flex/</url>
      <content type="html"><![CDATA[<h1 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h1><p>关于flex布局的笔记<br><img src="https://lc-gold-cdn.xitu.io/0dd26d8e99257ff36443.png?imageslim" alt="flex"><br><a id="more"></a></p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> flex </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue</title>
      <link href="/2018/09/13/vue/"/>
      <url>/2018/09/13/vue/</url>
      <content type="html"><![CDATA[<h1 id="Vue-学习笔记"><a href="#Vue-学习笔记" class="headerlink" title="Vue 学习笔记"></a>Vue 学习笔记</h1><p>最近开始学习 Vue 了, 在这里记录一下学习笔记.</p><p>最近像没头的苍蝇一样盯着 Vue, 感觉好些地方不甚了解, 博客也搁置了快五天没动过笔了…</p><a id="more"></a><h2 id="Vue-extend-和Vue-component"><a href="#Vue-extend-和Vue-component" class="headerlink" title="Vue.extend()和Vue.component()"></a><code>Vue.extend()</code>和<code>Vue.component()</code></h2><p>两者都是使用参数来返回一个构建模板的构造方法, 不同的是<code>vue.extend()</code>返回的是一个匿名的构造器, 需要自己接收返回值注册名字, <code>vue.component()</code>可以在生成构造的函数的时候将组件名绑定上去, 所以后者可以看做是前者的语法糖. –<a href="https://segmentfault.com/q/1010000007312426" target="_blank" rel="noopener">参考</a></p><h2 id="Vue-set-target-prop-value"><a href="#Vue-set-target-prop-value" class="headerlink" title="Vue.set(target, prop, value)"></a><code>Vue.set(target, prop, value)</code></h2><p>给实例添加动态响应的属性, 注意 target 不能是实例本身或者实例的根属性, 也就是说你不能给 data 加上根级的属性, 可以给 data 中的对象加上新属性,<br>例如<code>Vue.set(this.$data, &#39;name&#39;, &#39;krics&#39;)</code>是会报错的, 但是<code>Vue.set(this.$data.info, &#39;name&#39;, &#39;krics&#39;)</code>是正确的.</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>在生成单页面的 vue 应用时,</p><ul><li style="list-style: none"><input type="checkbox"> 有模板与有 render 函数的区别</li></ul>]]></content>
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> ast </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker</title>
      <link href="/2018/09/10/docker/"/>
      <url>/2018/09/10/docker/</url>
      <content type="html"><![CDATA[<h1 id="docker学习笔记"><a href="#docker学习笔记" class="headerlink" title="docker学习笔记"></a>docker学习笔记</h1><p><a href="http://www.docker.org.cn/book/docker/what-is-docker-16.html" target="_blank" rel="noopener">参考文档</a><br>Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台.<br><a id="more"></a></p><p>如无特殊说明, 以下操作环境均为<code>CentOS 7</code>, 内核版本位<code>3.10.0-693.2.2.el7.x86_64</code><br>(查看内核版本: <code>uname -r</code>)</p><h2 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装docker</span></span><br><span class="line">yum install -y docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动docker服务</span></span><br><span class="line">service docker start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给个hello-world的测试例子, 由于本地没有hello-world这个镜像，所以会下载一个hello-world的镜像，并在容器内运行。</span></span><br><span class="line">docker run hello-world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止容器</span></span><br><span class="line">docker stop CONTAINER [CONTAINER...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动已经停止的容器</span></span><br><span class="line">docker start CONTAINER [CONTAINER...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启容器</span></span><br><span class="line">docker restart CONTAINER [CONTAINER...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">docker rm CONTAINER [CONTAINER...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取容器的输出信息</span></span><br><span class="line">docker logs CONTAINER [CONTAINER...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器文件拷贝到主机</span></span><br><span class="line">docker cp ed0f8bb24f3e:/opt/webapp/app.py   d:/www</span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="comment"># ed0f8bb24f3e： 容器id</span></span><br><span class="line"><span class="comment"># /opt/webapp/app.py: 容器中的文件</span></span><br><span class="line"><span class="comment"># d:/www： 主机文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主机文件拷贝到容器</span></span><br><span class="line">docker cp d:/www/文件 ed0f8bb24f3e:/opt/webapp/</span><br></pre></td></tr></table></figure><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><h2 id="docker中使用mysql"><a href="#docker中使用mysql" class="headerlink" title="docker中使用mysql"></a>docker中使用mysql</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载mysql镜像</span></span><br><span class="line">docker pull mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已下载的镜像</span></span><br><span class="line"><span class="comment"># 或 docker image ls</span></span><br><span class="line">docker images </span><br><span class="line"></span><br><span class="line"><span class="comment"># 从镜像创建并运行一个容器</span></span><br><span class="line">docker run --name first-mysql -p 3306:3306 -e MYSQL\_ROOT\_PASSWORD=root -d mysql</span><br><span class="line"><span class="comment"># 参数说明:</span></span><br><span class="line"><span class="comment"># --name 指定容器独一无二的名字</span></span><br><span class="line"><span class="comment"># -p mysql容器的端口映射</span></span><br><span class="line"><span class="comment"># -e &lt;key=value&gt;设置进入后可以使用的环境变量，这样动态指定比较灵活</span></span><br><span class="line"><span class="comment"># -d 表示使用守护进程, 即服务挂在后台</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前已经运行的容器(可以看到容器id: CONTAINER_ID)</span></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器内部(推荐使用exec)</span></span><br><span class="line">docker <span class="built_in">exec</span> -it CONTAINER_ID /bin/bash</span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="comment"># -i 以交互方式运行，是阻塞式的</span></span><br><span class="line"><span class="comment"># -t 分配一个伪终端，这个参数通常与-i参数一起使用，然后， 在后面跟上容器里的/bin/bash，这样就把我们带到容器里去了。</span></span><br><span class="line"><span class="comment"># -d 以后台方式执行，这样，我们执行完这条命令，还可以干其他事情，写脚本最常用</span></span><br></pre></td></tr></table></figure><p>在我本机连接阿里云上的ECS中的mysql容器时无法连接, 后来排查使用如下解决方案:</p><ol><li>编辑ECS的安全组规则<br>把mysql的通信端口3306加入到允许列表中, 如果你是把docker里面的mysql的端口映射到ECS的其它端口, 比如3307, 那么这里你就把这个映射之后的端口3307加入到运行列表即可;</li><li><p>编辑ECS的防火墙<br>ECS的防火墙可能会拦截3306端口的通信, 那么你需要打开这个端口, 让防火墙允许端口通信, 我的ECS系统是CentOS7, 在CentOS7中是使用<code>firewall</code>来管理端口通信的, 那么使用如下方法加入306端口: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 永久加入3306端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line"><span class="comment"># 参数说明:</span></span><br><span class="line"><span class="comment"># –zone 作用域</span></span><br><span class="line"><span class="comment"># –add-port=80/tcp 添加端口，格式为：端口/通讯协议</span></span><br><span class="line"><span class="comment"># –permanent 永久生效，没有此参数重启后失效</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启防火墙生效</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>另外附上常用防火墙命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment">#打开防火墙</span></span><br><span class="line">systemctl start firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看防火墙状态</span></span><br><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Practical-Function-In-Javascript</title>
      <link href="/2018/09/07/practical-function-in-javascript/"/>
      <url>/2018/09/07/practical-function-in-javascript/</url>
      <content type="html"><![CDATA[<h1 id="JavaScript中的常用函数"><a href="#JavaScript中的常用函数" class="headerlink" title="JavaScript中的常用函数"></a>JavaScript中的常用函数</h1><p>本文主要整理了平时JavaScript中常用的函数, 持续更新.<br><a id="more"></a></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="Array-concat"><a href="#Array-concat" class="headerlink" title="Array.concat()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat" target="_blank" rel="noopener">Array.concat()</a></h3><p>作用: 合并数组, 返回新数组, 不影响原数组<br>备注: 字符串中也有此同名函数, 作用可类比</p><h3 id="Array-filter"><a href="#Array-filter" class="headerlink" title="Array.filter()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noopener">Array.filter()</a></h3><p>作用: 对数组每个元素进行测试, 返回符合条件的元素组成的新数组, 不影响原数组</p><h3 id="Array-find"><a href="#Array-find" class="headerlink" title="Array.find()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find" target="_blank" rel="noopener">Array.find()</a></h3><p>作用: 返回数组中满足提供的测试函数的第一个元素的值, 否则返回 undefined</p><h3 id="Array-forEach"><a href="#Array-forEach" class="headerlink" title="Array.forEach()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noopener">Array.forEach()</a></h3><p>作用: 对数组的每个元素执行一次提供的函数, 不影响原数组</p><h3 id="Array-includes"><a href="#Array-includes" class="headerlink" title="Array.includes()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" target="_blank" rel="noopener">Array.includes()</a></h3><p>作用: 判断数组是否包含某个值, 是则返回<code>true</code>, 否则返回<code>false</code><br>备注: 字符串中也有此同名函数<code>String.includes(subSring, fromIndex)</code>, 用于判断字符串是否包含另一个字符串</p><h3 id="Array-indexOf"><a href="#Array-indexOf" class="headerlink" title="Array.indexOf()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf" target="_blank" rel="noopener">Array.indexOf()</a></h3><p>作用: 返回数组中给定元素的索引值，若给定元素不存在，则返回值是-1<br>备注: 字符串中也有此同名函数, 作用可类比</p><h3 id="Array-join"><a href="#Array-join" class="headerlink" title="Array.join()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join" target="_blank" rel="noopener">Array.join()</a></h3><p>作用: 将数组中的所有元素用给定方式连接成一个字符串，默认用<code>，</code>连接, 可用空字符串<code>&#39;&#39;</code>连接, 返回连接后的字符串, 不影响原数组</p><h3 id="Array-map"><a href="#Array-map" class="headerlink" title="Array.map()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener">Array.map()</a></h3><p> 作用: 对数组中的每个元素都调用一个提供的函数后返回的结果组成一个新数组, 返回新数组, 不影响原数组</p><h3 id="Array-reduce-callback-accumulator-currentValue-currentIndex-array-initialValue"><a href="#Array-reduce-callback-accumulator-currentValue-currentIndex-array-initialValue" class="headerlink" title="Array.reduce(callback[accumulator, currentValue, currentIndex, array], initialValue)"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" target="_blank" rel="noopener">Array.reduce(callback[accumulator, currentValue, currentIndex, array], initialValue)</a></h3><p>作用: 对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值, 返回最后的计算结果, 此函数功能强大, 建议参考官方文档</p><h3 id="Array-slice"><a href="#Array-slice" class="headerlink" title="Array.slice()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener">Array.slice()</a></h3><p>作用: 将数组的制定部分(包括开始位置, 不包括结束位置)浅拷贝到一个新数组, 返回拷贝的新数组, 不影响原数组<br>备注: 字符串中也有此同名函数, 作用可类比</p><h3 id="Array-splice"><a href="#Array-splice" class="headerlink" title="Array.splice()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener">Array.splice()</a></h3><p>作用: 通过删除现有元素和/或添加新元素来更改一个数组的内容, 返回被删除的元素组成的数组, 如果没有删除, 则返回空数组, <strong>会改变原数组</strong>, 此函数功能强大, 建议参考官方文档</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="String-charAt"><a href="#String-charAt" class="headerlink" title="String.charAt()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charAt" target="_blank" rel="noopener">String.charAt()</a></h3><p>作用: 返回字符串中指定位置的字符, 不存在则返回空字符串<code>&quot;&quot;</code></p><h3 id="String-charCodeAt"><a href="#String-charCodeAt" class="headerlink" title="String.charCodeAt()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt" target="_blank" rel="noopener">String.charCodeAt()</a></h3><p>作用: 返回字符串中指定位置的字符的<code>UTF-16</code>代码单元值的数, 在0到65535之间, 超出范围返回<code>NaN</code></p><h3 id="String-match"><a href="#String-match" class="headerlink" title="String.match()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match" target="_blank" rel="noopener">String.match()</a></h3><p>作用: 将字符串与正则表达式匹配, 返回匹配后的结果数组,数组的第一项是进行匹配完整的字符串，之后的项是用圆括号捕获的结果。如果没有匹配到，返回null, 不影响原数组<br>如果给的参数不是正则表达式, 那么会隐式的转换成正则表达式, 此函数功能很强大, 请参考官方文档</p><p>备注: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test" target="_blank" rel="noopener"><code>RegExp.text()</code></a>用来测试字符串是否与正则匹配 速度会更快, 如果匹配则返回<code>true</code>, 否则返回<code>false</code><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search" target="_blank" rel="noopener"><code>String.search()</code></a>也类似<code>test()</code>方法, 只不过返回的值是第一个匹配的地方的索引值, 如果没有匹配则返回<code>-1</code><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec" target="_blank" rel="noopener"><code>RegExp.exec()</code></a>的行为和<code>String.match()</code>很相似, 在非全局匹配下表示一样, 但是对于全局匹配<code>/g</code>他们的表现就不同, 简单来说就是<code>match()</code>的全局匹配会一次找到全部的匹配项放在数组中返回, 但是<code>exec()</code>的全局匹配是每调用一次<code>exec()</code>就返回在上一次执行的基础上继续搜索的下一个匹配结果, 直到最后找不到的时候就会返回<code>null</code>, 参考<a href="http://zyy1217.com/2016/12/29/%20js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BEexec%E5%92%8Cmatch%E7%9A%84%E5%8C%BA%E5%88%AB/" target="_blank" rel="noopener">这里</a></p><h3 id="Sring-replace"><a href="#Sring-replace" class="headerlink" title="Sring.replace()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace" target="_blank" rel="noopener">Sring.replace()</a></h3><p>作用: 将字符串中的匹配值(字符串或者正则表达式匹配到的值)用另外的值(替换的字符串或者一个方法返回的值)替换, 然后返回新的字符串, 不影响原字符串<br><strong>使用字符串匹配时只会替换第一个匹配的结果</strong><br>关于第二个参数如果使用字符串, 那么<code>$&amp;, $n, ...</code>等能够作为代替匹配的结果字符串使用, 如果使用函数, 那么<code>match, p1, p2, ...</code>能够代替匹配的结果在函数参数中使用, 具体请参见官方文档<br>没有<code>replaceAll</code>方法, 可自己实现替代方法</p><h3 id="String-split"><a href="#String-split" class="headerlink" title="String.split()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split" target="_blank" rel="noopener">String.split()</a></h3><p>作用: 将字符串按照匹配的字符串或者正则表达式进行分割, 返回分割的结果组成的数组, 不影响原字符串<br>关于分割的结果中有时会产生空字符串<code>&#39;&#39;</code>的原因可以参考<a href="https://segmentfault.com/a/1190000000692744" target="_blank" rel="noopener">KevinYue的这篇文章</a>, 评论中的’切黄瓜’的比喻也有助于理解, 另外使用正则表达式时会忽略全局匹配符<code>/g</code></p><h3 id="String-substr"><a href="#String-substr" class="headerlink" title="String.substr()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substr" target="_blank" rel="noopener">String.substr()</a></h3><p>作用: 将字符串中从指定位置开始的指定长度(不指定长度则到字符串末尾)的部分拷贝为新字符串返回, 不影响原字符串</p><h3 id="String-substring"><a href="#String-substring" class="headerlink" title="String.substring()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substring" target="_blank" rel="noopener">String.substring()</a></h3><p>作用: 将字符串中从指定位置开始(包含)到指定位置结束(不包含)(或者默认到结尾)的部分拷贝伟新字符串返回, 不影响原字符串</p><h3 id="String-trim"><a href="#String-trim" class="headerlink" title="String.trim()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim" target="_blank" rel="noopener">String.trim()</a></h3><p>作用: 返回字符串开头和结尾的空白字符(包括space, tab, no-break space等以及所有行终止符字符如 LF，CR)都移出的新字符串, 不影响原字符串</p><p><a href="https://www.jianshu.com/p/da71c06b92d0" target="_blank" rel="noopener">参考文档1</a></p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> funtion </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mini-Program</title>
      <link href="/2018/09/06/Mini-Program/"/>
      <url>/2018/09/06/Mini-Program/</url>
      <content type="html"><![CDATA[<h1 id="微信小程序跳坑记录"><a href="#微信小程序跳坑记录" class="headerlink" title="微信小程序跳坑记录"></a>微信小程序跳坑记录</h1><p>开发微信小程序还是踩了不少坑的, 官方的文档并不详细, 更新也不及时, 碰到问题还是多 google 吧.</p><a id="more"></a><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>小程序的逻辑层和渲染层是分开的, 逻辑层运行在 JSCore 中 并没有一个完整的浏览器对象, 因而缺少相关的 DOM API 和 BOM API.<br>小程序的运行环境 –<a href="https://juejin.im/post/5b8fd1416fb9a05cf3710690" target="_blank" rel="noopener">参考</a></p><table><thead><tr><th style="text-align:center">运行环境</th><th style="text-align:center">逻辑层</th><th style="text-align:center">渲染层</th></tr></thead><tbody><tr><td style="text-align:center">IOS</td><td style="text-align:center">JavaScriptCore</td><td style="text-align:center">WKWebView</td></tr><tr><td style="text-align:center">安卓 2</td><td style="text-align:center">X5 JSCore</td><td style="text-align:center">X5 浏览器</td></tr><tr><td style="text-align:center">开发工具</td><td style="text-align:center">NWJS</td><td style="text-align:center">Chrome WebView</td></tr></tbody></table><p><a href="https://juejin.im/post/5abca877f265da238155b6bc" target="_blank" rel="noopener">小程序的 Native 和 js 之间的交互是通过 JSBridge 实现</a><br><a href="https://www.jianshu.com/p/0078507e14d3" target="_blank" rel="noopener">小程序的视图线程和服务线程的交互生命周期</a><br><img src="https://mp.weixin.qq.com/debug/wxadoc/dev/image/mina-lifecycle.png?t=1474644090505" alt="小程序的视图线程和服务线程的交互生命周期"></p><p>小程序的文件编译过程:</p><ul><li>WXml -&gt; js -&gt; Virtual DOM -&gt; DOM Tree</li><li>WXSS -&gt; js -&gt; CSS</li></ul><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><p>微信小程序通过<code>状态模式-单向数据流</code>来实现数据绑定.<br>状态模式定义一个对象, 当对象发生改变时, 状态就发生改变, 然后通知与之绑定的视图刷新, 注意: <strong>数据流向是单向的,  即视图变化不会引起对象状态变化</strong>.<br>如果想要视图改变的时候让对象状态也一并改变, 那么就需要依赖事件来实现, 即视图变化 -&gt; 触发事件 -&gt; 捕获事件 -&gt; 回调处理(在这里可以操作对象)</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h3><p>整个小程序有三个生命阶段:</p><ol><li>小程序初始化完成时: <code>onLaunch</code></li><li>小程序启动，或从后台进入前台显示时: <code>onShow</code></li><li>小程序从前台进入后台时: <code>onHide</code></li></ol><p>关于小程序的销毁有如下机制: 点击左上角关闭或者’Home’键离开微信, 小程序将在后台运行, 只有在后台超过一定时间或者系统内存占用过高时才会真正销毁小程序 –<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/app.html" target="_blank" rel="noopener">参考</a></p><h3 id="页面栈"><a href="#页面栈" class="headerlink" title="页面栈"></a>页面栈</h3><p>目前页面栈最大深度是 10 层 –<a href="https://developers.weixin.qq.com/community/develop/doc/000ecec19b04f0e79ab65ec0b5bc04" target="_blank" rel="noopener">来源</a><br>一旦达到 10 层, 将无法再使用<code>wx.navigatoTo()</code>或同等方式打开新页面, 必须使用其他方式清除一定的栈空间以后才能再打开新页面</p><p>路由方式: 五种</p><ol><li><p><code>wx.navigateTo()</code>或者点击<code>&lt;navigator open-type=&quot;navigateTo&quot;/&gt;</code>组件<br>页面栈变化: 仅目标页面(不能是<code>tab</code>页)入栈</p></li><li><p><code>wx.navigateBack()</code>或者点击<code>&lt;navigator open-type=&quot;navigateBack&quot;&gt;</code>组件或者点击<code>左上角返回按钮</code><br>页面栈变化: 仅源页面出栈<br>备注: 该方法可在参数(Ojbject)中额外附加一个 Number 型参数<code>delta</code>, 表示返回的页面数, 也就是要退几次页面栈, 如果<code>delta</code>大于当前栈数, 则返回首页</p></li><li><p><code>wx.redirectTo()</code>或者点击<code>&lt;navigator open-type=&quot;redirectTo&quot;/&gt;</code>组件<br>页面栈变化: 源页面出栈 -&gt; 目标页面(不能是<code>tab</code>页)入栈</p></li><li><p><code>wx.switchTab()</code>或者点击<code>&lt;navigator open-type=&quot;switchTab&quot;/&gt;</code>组件<br>页面栈变化: 清空页面栈 -&gt; 目标页面(必须是<code>tab</code>页)入栈</p></li><li><p><code>wx.reLaunch()</code>或者点击组件<code>&lt;navigator open-type=&quot;reLaunch&quot;/&gt;</code>组件<br>页面栈变化: 清空页面栈 -&gt; 目标页面(任意页面)入栈</p></li></ol><p>同一页面如果被压栈多次, 那么就会在栈中相应的存在多次, 相当于页面顺序浏览的历史记录</p><h3 id="页面生命周期"><a href="#页面生命周期" class="headerlink" title="页面生命周期"></a>页面生命周期</h3><p>从页面栈的变化解释页面的生命周期:</p><ol><li>页面刚入栈在栈顶: <code>onLoad</code> -&gt; <code>onShow</code> -&gt; <code>onReady</code></li><li>页面从栈顶被压栈到第二层: <code>onHide</code></li><li>页面从栈的第二层到最底层之间活动: 无事件</li><li>页面退栈刚到栈顶: <code>onShow</code></li><li>页面从栈顶出栈: <code>onUnload</code> (注意: 页面出栈即被销毁, 不会触发<code>onHide</code>, 直接触发<code>onUnload</code>)</li></ol><p>一个页面要正常显示，必须经历 3 个生命周期：<code>加载</code> -&gt; <code>显示</code> -&gt; <code>渲染</code>, 对应回调函数顺序:<code>onLoad</code> -&gt; <code>onShow</code> -&gt; <code>onReady</code>.<br><strong>官方给出的示例中<code>onReady</code>放在<code>onShow</code>之前, 但是这并不是真正的顺序, 容易误导开发者</strong></p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ol><li><p>hidden 属性<br>首先强调一点: <strong>不要使用<code>hidden</code>属性!</strong></p><ul><li><p>语法<br>正确的写法是<code>hidden=&quot;true&quot;</code>和<code>hidden=&quot;false&quot;</code>, 遵循<code>Mustache</code>语法, 双大括号不能省略, 因为<code>hidden</code>的值是<code>Boolean</code>型的, 必须使用<code>Mustache</code>计算值才行, 如果省略了双大括号, 比如<code>hidden=&quot;false&quot;</code>(填写其它内容也一样)), 那么就会把<code>&quot;false&quot;</code>作为字符串处理, 此时字符串不为空, 那么结果就是<code>true</code>, 此组件仍然会被隐藏.</p></li><li><p>为什么不要使用该属性<br><code>hidden</code>属性的表现相当怪异.<br>根据不完全测试, 在<code>view</code>, <code>navigator</code>等组件上表现为会给你的组件添加一个 css 属性<code>display: none;</code>, 如果你是通过<code>id</code>或者<code>class</code>来给组件加上自定义的<code>display</code>属性的话, 那么<code>hidden</code>添加的那个<code>display</code>属性优先级比你的高, 此时组件会被隐藏; 如果你是使用的内联样式<code>style=&quot;display: flex;&quot;</code>来给组件添加<code>display</code>属性, 那么你这里添加的<code>display</code>属性优先级会比较高, 此时<code>hidden</code>属性不生效;<br>在<code>button</code>组件上添加<code>hidden=&quot;true&quot;</code>表现为会给你的组件上添加一个 css 属性<code>display: none !important;</code>, 这里相比之前多了<code>!important</code>关键字, 所以此时的<code>hidden</code>属性的优先级是最高的, 不会被你自定义的给覆盖掉;<br>在<code>text</code>组件上又是一种表示了, 如果你为<code>text</code>组件添加<code>hidden=&quot;true&quot;</code>, 那么只要你给这个组件自定义了<code>display</code>属性, 你的优先级就会比<code>hidden</code>的高, <code>hidden</code>处于不生效的状态, 如果你没有自定义, 那么<code>hidden</code>才会生效;<br>基于上面的种种怪异的表现, 已经不需要去测试更多的组件了, 因为这已经有足够充分的理由不去使用<code>hidden</code>属性了.</p></li><li><p>替代办法<br>我们使用<code>hidden</code>属性无非是想控制组件的显示与否, 那么可以采取如下的替代方案:</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">"display: &#123;&#123;isHidden ? 'none' : 'flex'&#125;&#125;;"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>备注<br>对于不怎么切换显示隐藏的组件可以使用<code>wx:if</code>, 这样的渲染支出是可以接受的, 但是如果一个组件会经常的切换显示隐藏, 那么最好考虑采取<code>display: &quot;none;&quot;</code>的方法, 因为这样不需要重复渲染组件, 只要切换显示隐藏即可, 可以减少 cpu 支出, 提高页面效率. <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/conditional.html" target="_blank" rel="noopener">官方说法</a></li></ul></li><li><p>scroll-view<br>注意：使用竖向滚动时，需要给<code>scroll-view</code>一个固定高度, 否则无法<code>点击回到顶部</code>以及<code>滚动到指定位置</code></p></li><li><p>text<br><code>text</code>组件内只支持嵌套<code>text</code></p></li></ol><h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><p><code>GET</code>一般都正常, 但是<code>POST</code>请求真可谓是’一千个读者有一千个哈姆雷特’, 各种失败的情况都有, 可尝试如下方法:</p><ol><li><p>首先<code>method</code>是必须设置为<code>POST</code>的;</p></li><li><p><code>header</code>中设置<code>&quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;</code>, 也有说小写<code>&quot;content-type&quot;: &quot;application/x-www-form-urlencoded&quot;</code>能成功;</p></li><li><p>data 有说不能直接传<code>json</code>格式, 需要先转格式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">json2Form</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> p <span class="keyword">in</span> json)&#123;</span><br><span class="line">        str.push(<span class="built_in">encodeURIComponent</span>(p) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(json[p]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.join(<span class="string">"&amp;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">  name: <span class="string">'张三'</span>,</span><br><span class="line">  age: <span class="string">'23'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ajaxData = json2Form(data); <span class="comment">// 然后将`ajaxData`附在请求的`data`中字段中</span></span><br></pre></td></tr></table></figure></li><li><p>也有说服务端必须是<code>https</code>的;</p></li><li><p>实在不行服务端就改成<code>GET</code>吧…</p></li></ol><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>小程序对于服务器的域名有要求, 在开发时如果没有 https 的服务器, 那么 pc 端可以把微信开发工具里的域名校验展示关闭, ios 端打开调试模式运行小程序, 安卓端打不打开调试模式都可以, 之后如果申请到了 https 的服务器, 那么把服务器域名加入到微信管理平台的域名列表中, 然后就可以关闭各种之前调试的东西正常使用了.</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>对小程序的源码分析应该会是比较大的工作量, 所以我打算另外用一篇文章来记录, 这里先挖下一个坑</p><ul><li style="list-style: none"><input type="checkbox"> 微信小程序源码分析</li></ul>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mini-Program </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ASCII-Unicode-UTF8</title>
      <link href="/2018/09/05/unicode-utf8/"/>
      <url>/2018/09/05/unicode-utf8/</url>
      <content type="html"><![CDATA[<h1 id="ASCII-Unicode和UTF8之间的关系"><a href="#ASCII-Unicode和UTF8之间的关系" class="headerlink" title="ASCII, Unicode和UTF8之间的关系"></a>ASCII, Unicode和UTF8之间的关系</h1><p>本文主要了解一下ASCII码、Unicode码和UTF-8码的来源和相互之间的关系, 顺便也理了一下中文编码GB2312, GBK, GB18030的关系。<br><a id="more"></a></p><h2 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h2><p>在上世纪60年代，美国制定了ASCII码，主要目的是为了用二进制编码的方式来表达英文字符，用一个8位的字节大小对应了128个字符，其中包括了可打印出来的96个字符和32个不可打印的控制字符, 规则是二进制中第1位固定为<code>0</code>, 后面7位用来编码, 刚好可以表示2<sup>7</sup> = 128个字符, 例如规定空格<kbd>SPACE</kbd>的编码为<code>00100000</code>, 十进制是<code>32</code>, 大写字母<code>A</code>的编码为<code>01000001</code>, 十进制是<code>65</code>, 附上<a href="https://www.sojson.com/asciitable.html" target="_blank" rel="noopener">ASCII码表</a></p><h2 id="GB2312-GBK-GB18030"><a href="#GB2312-GBK-GB18030" class="headerlink" title="GB2312, GBK, GB18030"></a>GB2312, GBK, GB18030</h2><ul><li>GB2312 是对 ASCII 的中文扩展, 一个小于127的字符的意义与ASCII码相同, 但是当两个大于127的字符连在一起时就表示汉字, 同时GB2312在127之外的地方把ASCII已经有的数字, 标点和字母又重新加入了一遍, 这些重新加入的字符占用两个字节的空间, 也就是说在GB2312中有两套数字, 字母和标点, 码值小于127的那一套因为是ASCII码, 只占用一个字节, 就叫’半角’符号, 而新加入的一套数字, 字母和标点就叫’全角’符号.</li><li>因为GB2312只收录了6763个汉字, 很多的汉字也需要加入编码中, 所以微软对GB2312进行了扩展, 规定只要第一个字节大于127, 那么就不管后面一个字节是不是大于127的, 通通都认为这两个字节一起表示了一个汉字, 这样就又增加了近20000个新的汉字（包括繁体字）和符号, 扩充之后就成为GBK标准, 它向下兼容GB2312编码，出现于Windows 95简体中文版中, 但是这个是微软标准, 并不是国家标准.</li><li>后来又加入了少数民族文字，于是我们再扩展，又加了几千个新的少数民族的字，GBK扩成了GB18030, GB18030成为了国家标准.</li></ul><h2 id="Unicode码"><a href="#Unicode码" class="headerlink" title="Unicode码"></a>Unicode码</h2><p>ASCII码虽然满足了美国的需求,但是对于其它语言而言128个字符是远远不够的, 比如法语中字母上方有注音, 这是ASCII码无法表示的, 又比如汉字有10万左右, 这也是超出了ASCII码的范围, 所以后来Unicode码出现了.<br>Unicode码有着很大的容量, 现在的规模可以容纳100多万个符号, 每个符号的编码都不一样, 比如，U+0639表示阿拉伯字母Ain，U+0041表示英语的大写字母A，U+4E25表示汉字<code>严</code>。你可以使用在线的<a href="http://tool.chinaz.com/Tools/unicode.aspx" target="_blank" rel="noopener">工具</a>来转换成Unicode码. </p><h3 id="Unicode码编码方式"><a href="#Unicode码编码方式" class="headerlink" title="Unicode码编码方式"></a>Unicode码编码方式</h3><p>Unicode码只是定义了每个字符对应的二进制代码是什么, 但是并没有规定字符对应的二进制应该以什么样的形式存储, Unicode统一规定，每个符号用三个或四个字节表示. 比如汉字<code>严</code>的Unicode码是十六进制数4E25, 转换成二进制就是<code>100111000100101</code>一共是15位, 至少占用2个字节的空间, 而其他的字符可能有更多的二进制位数, 而之前的ASCII码是固定为8位的, 如果采取将前面多余的位数全都置0的话, 那么在存储原来的ASCII码编码的文件时就会浪费大量的空间来存储无用的0信息, 这是不可接受的. 所以如何合理的用Unicode码来兼容原先的ASCII码信息就产生出了多种具体的实现方式. </p><h3 id="UTF-8实现Unicode"><a href="#UTF-8实现Unicode" class="headerlink" title="UTF-8实现Unicode"></a>UTF-8实现Unicode</h3><p>UTF-8是目前使用最多的Unicode编码实现方式, 除此之外也有 UTF-16（字符用两个字节或四个字节表示）和 UTF-32（字符用四个字节表示）实现方式, 不过基本不使用.<br>UTF-8 最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。<br>按照如下两条规则来编码字符:</p><ol><li><p>对于单(n = 1)字节的符号，字节的第一位设为0，后面7位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的。</p></li><li><p>对于多(n &gt; 1)字节的符号，第一个字节的前n位都设为1，第n + 1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码。<br>下表总结了编码规则，字母x表示可用编码的位。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Unicode符号范围     |        UTF-8编码方式</span><br><span class="line">(十六进制)        |              （二进制）</span><br><span class="line">----------------------+---------------------------------------------</span><br><span class="line">0000 0000-0000 007F | 0xxxxxxx</span><br><span class="line">0000 0080-0000 07FF | 110xxxxx 10xxxxxx</span><br><span class="line">0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx</span><br><span class="line">0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</span><br></pre></td></tr></table></figure></li></ol><p>在解码的时候现查看二进制的第一位, 如果是0, 那么说明是单字节的字符, 直接将该字节按照Unicode码表转换成对应的字符即可, 如果第一位是1, 那么继续查看有几个连续的1, 有n个, 则说明连续的n个字节代表一个字符.<br>以汉字<code>严</code>为例, <code>严</code>的Unicode码是<code>4E25</code>(二进制为<code>100111000100101</code>), 根据上表, <code>4E25</code>处于<code>0000 0800 - 0000 FFFF</code>范围, 那么<code>严</code>的编码格式就是<code>1110xxxx 10xxxxxx 10xxxxxx</code>, 也就是说<code>严</code>的UTF-8编码方式就需要占用三个字节, 我们把<code>严</code>的二进制按照顺序填到<code>x</code>的位置, 最后得到的结果就是<code>11100100 10111000 10100101</code>, 转成16进制就是<code>E4B8A5</code>, 这就是<code>严</code>的UTF-8编码结果.<br>总得来说, <code>严</code>的Unicode码为<code>4E25</code>, UTF-8编码为<code>E4B8A5</code>, 这就好比你的身份证是<code>123456</code>, 在学校站队时老师按照一定的排队方式把你编排到了<code>五组三排第二个</code>, 这两者最后的结果是可以相互转换的, 你可借助在线<a href="http://tool.chinaz.com/Tools/unicode.aspx" target="_blank" rel="noopener">工具</a>验证.</p><h2 id="JavaScript中的Unicode与UTF-8"><a href="#JavaScript中的Unicode与UTF-8" class="headerlink" title="JavaScript中的Unicode与UTF-8"></a>JavaScript中的Unicode与UTF-8</h2><p>javascript程序是使用Unicode字符集编写的, 所以我们在JavaScript中经常使用的字符或者字符串实际上内部是采用Unicode编码的, 在有些情况下, 比如我们的服务器要求接受的二进制内容的编码必须是UTF-8, 那么我们在把JavaScript中的字符串发送到服务器之前就需要进行转码, 将Unicode字符串转为UTF-8字符串. 我们在前端有时候会看到的服务器返回的json数据中乱码实际上就是因为服务器发送数据的编码跟我们客户端接受数据的编码方式不一致导致的, 你可以试着将乱码字段拷贝到在线<a href="http://tool.chinaz.com/Tools/unicode.aspx" target="_blank" rel="noopener">工具</a>中进行转码, 比如选择将<code>Unicode转为UTF-8</code>, 然后你就能看到正确的信息.</p><p>除了数据交互之外, 浏览器的URI也是我们能够了解这种编码转换的地方, 因为URI中的querystring必须按照UTF8的编码进行传输, 但是JavaScript中是Unicode的, 如果没有中文信息还好, 因为英文字符在这两者之间的码值是保持一致的, JavaScript的字符串<code>hello</code>到了URI中也还是<code>hello</code>, 如果你不手动去转换也是ok的, 但是一旦涉及到中文(包括其它非英文字符), 比如汉字<code>严</code>, 它的Unicode码值和UTF-8码值就差的很远, 如果你不进行手动转换, 直接将JavaScript中的字符<code>严</code>丢到地址栏的URI中, 那么就会导致URI乱码, 你再想从URI中把之前放进去的<code>严</code>取出来就会发现得到的根本不是汉字<code>严</code>, 而是一串乱码.</p><h2 id="在JavaScript中如何转换Unicode与UTF-8"><a href="#在JavaScript中如何转换Unicode与UTF-8" class="headerlink" title="在JavaScript中如何转换Unicode与UTF-8"></a>在JavaScript中如何转换Unicode与UTF-8</h2><ul><li><p>浏览器提供了三对方法来进行编码转换,<code>escape/unescape</code>, <code>encodeURI/decodeURI</code>和<code>encodeURIComponent/decodeURIComponent</code>.</p><ol><li>第一对<code>escape/unescape</code>是非标准的, <strong><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape" target="_blank" rel="noopener">已经被废弃</a></strong>, 这里只说一下它的转码方式, <code>escape</code>在处理大于127的字符时是在字符的Unicode码前面直接加上一个<code>%u</code>, 例如<code>严</code>的Unicode码为<code>4E25</code>, 那么<code>escape(&#39;严&#39;)</code>的结果就是<code>%u4E25</code>, 再次强调, <strong>请不要使用<code>escape/unescape</code>, 它已被废弃</strong>;</li><li>第二对<code>encodeURI/decodeURI</code>是用来给整个URL进行转码的, 它不会转义<code>&amp;, ?, /, =</code>这样的功能字符;</li><li>第三对<code>encodeURIComponent/decodeURIComponent</code>是用来给URL的部分字段进行转码的, 它会对<code>&amp;, ?, /, =</code>这些特殊字符进行转义, 一般用来处理key-value形式的query字段.<br><code>encodeURI</code>和<code>encodeURIComponent</code>都是先将非英文字符的Unicode码转为UTF-8码, 然后在每个字节前面都加上一个<code>%</code>, 比如汉字<code>严</code>的Unicode码是<code>4E25</code>, 使用<code>encodeURI</code>编码时会先转成UTF-8码<code>E4 B8 A5</code>, 在用<code>%</code>连接起来就得到最后结果<code>%E4%B8%A5</code>.<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编码</span></span><br><span class="line"><span class="built_in">encodeURIComponent</span>(<span class="string">'严'</span>); <span class="comment">// =&gt; '%E4%B8%A5'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解码</span></span><br><span class="line"><span class="built_in">decodeURIComponent</span>(<span class="string">'%E4%B8%A5'</span>); <span class="comment">// =&gt; '严'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//encodeURI和encodeURIComponent对比</span></span><br><span class="line"><span class="built_in">encodeURI</span>(<span class="string">'www.kricsleo.com?name="张三"'</span>); <span class="comment">// =&gt; "www.kricsleo.com?name=%22%E5%BC%A0%E4%B8%89%22"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">encodeURIComponent</span>(<span class="string">'www.kricsleo.com?name="张三"'</span>) <span class="comment">// =&gt; "www.kricsleo.com%3Fname%3D%22%E5%BC%A0%E4%B8%89%22"</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>我们也可以自己用js来使用Unicode和UTF-8之间的相互转换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将字符串格式化为UTF8编码的字节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> toUTF8 = <span class="function"><span class="keyword">function</span> (<span class="params">str, isGetBytes</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> back = [];</span><br><span class="line">      <span class="keyword">var</span> byteSize = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">          <span class="keyword">var</span> code = str.charCodeAt(i);</span><br><span class="line">          <span class="keyword">if</span> (<span class="number">0x00</span> &lt;= code &amp;&amp; code &lt;= <span class="number">0x7f</span>) &#123;</span><br><span class="line">                byteSize += <span class="number">1</span>;</span><br><span class="line">                back.push(code);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0x80</span> &lt;= code &amp;&amp; code &lt;= <span class="number">0x7ff</span>) &#123;</span><br><span class="line">                byteSize += <span class="number">2</span>;</span><br><span class="line">                back.push((<span class="number">192</span> | (<span class="number">31</span> &amp; (code &gt;&gt; <span class="number">6</span>))));</span><br><span class="line">                back.push((<span class="number">128</span> | (<span class="number">63</span> &amp; code)))</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="number">0x800</span> &lt;= code &amp;&amp; code &lt;= <span class="number">0xd7ff</span>) </span><br><span class="line">                  || (<span class="number">0xe000</span> &lt;= code &amp;&amp; code &lt;= <span class="number">0xffff</span>)) &#123;</span><br><span class="line">                byteSize += <span class="number">3</span>;</span><br><span class="line">                back.push((<span class="number">224</span> | (<span class="number">15</span> &amp; (code &gt;&gt; <span class="number">12</span>))));</span><br><span class="line">                back.push((<span class="number">128</span> | (<span class="number">63</span> &amp; (code &gt;&gt; <span class="number">6</span>))));</span><br><span class="line">                back.push((<span class="number">128</span> | (<span class="number">63</span> &amp; code)))</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; back.length; i++) &#123;</span><br><span class="line">            back[i] &amp;= <span class="number">0xff</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (isGetBytes) &#123;</span><br><span class="line">            <span class="keyword">return</span> back</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (byteSize &lt;= <span class="number">0xff</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="number">0</span>, byteSize].concat(back);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> [byteSize &gt;&gt; <span class="number">8</span>, byteSize &amp; <span class="number">0xff</span>].concat(back);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">toUTF8(<span class="string">'严'</span>); <span class="comment">// =&gt;  [0, 3, 228, 184, 165]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取UTF8编码的字节，并转为Unicode的字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> fromUTF8 = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> arr === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> UTF = <span class="string">''</span>, _arr = arr;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; _arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> one = _arr[i].toString(<span class="number">2</span>),</span><br><span class="line">                v = one.match(<span class="regexp">/^1+?(?=0)/</span>);</span><br><span class="line">        <span class="keyword">if</span> (v &amp;&amp; one.length == <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> bytesLength = v[<span class="number">0</span>].length;</span><br><span class="line">            <span class="keyword">var</span> store = _arr[i].toString(<span class="number">2</span>).slice(<span class="number">7</span> - bytesLength);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> st = <span class="number">1</span>; st &lt; bytesLength; st++) &#123;</span><br><span class="line">                store += _arr[st + i].toString(<span class="number">2</span>).slice(<span class="number">2</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            UTF += <span class="built_in">String</span>.fromCharCode(<span class="built_in">parseInt</span>(store, <span class="number">2</span>));</span><br><span class="line">            i += bytesLength - <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            UTF += <span class="built_in">String</span>.fromCharCode(_arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> UTF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fromUTF8([<span class="number">0</span>, <span class="number">3</span>, <span class="number">228</span>, <span class="number">184</span>, <span class="number">165</span>]); <span class="comment">// =&gt; '严'</span></span><br></pre></td></tr></table></figure></li></ul><p>参考资料:</p><ol><li>阮一峰的博客: <a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html</a></li><li>segmentfault上张亚涛的专栏: <a href="https://segmentfault.com/a/1190000005794963" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005794963</a></li></ol>]]></content>
      
      
        <tags>
            
            <tag> encrypt </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Airbnb-JavaScript-Style-Guide</title>
      <link href="/2018/09/05/Airbnb-JavaScript-Style-Guide/"/>
      <url>/2018/09/05/Airbnb-JavaScript-Style-Guide/</url>
      <content type="html"><![CDATA[<h1 id="Airbnb-JavaScript-Style-Guide-阅读笔记"><a href="#Airbnb-JavaScript-Style-Guide-阅读笔记" class="headerlink" title="Airbnb JavaScript Style Guide 阅读笔记"></a>Airbnb JavaScript Style Guide 阅读笔记</h1><p>Airbnb的JavaScript代码风格是世界上最流行的JavaScript代码风格之一, 在阅读的时候结合我自己的使用经验记录如下重点, 日后多次阅读应该会持续更新.<br>在线阅读地址: <a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">https://github.com/airbnb/javascript</a><br>(中文翻译版: <a href="https://github.com/yuche/javascript" target="_blank" rel="noopener">https://github.com/yuche/javascript</a>)<br><a id="more"></a></p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><ol><li><p>使用字面值创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> item = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> item = &#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>使用对象方法的简写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  addValue: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> atom.value + value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  addValue(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> atom.value + value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ol><li><p>使用字面值创建数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> items = [];</span><br></pre></td></tr></table></figure></li><li><p>使用扩展运算符<code>...</code>复制数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> len = items.length;</span><br><span class="line"><span class="keyword">const</span> itemsCopy = [];</span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">  itemsCopy[i] = items[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> itemsCopy = [...items];</span><br></pre></td></tr></table></figure></li><li><p>使用Array#from把类数组对象转为数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.foo'</span>);</span><br><span class="line"><span class="keyword">const</span> nodes = <span class="built_in">Array</span>.from(foo);</span><br></pre></td></tr></table></figure></li></ol><h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><ol><li><p>使用解构存取和使用多属性对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> firstName = user.firstName;</span><br><span class="line">  <span class="keyword">const</span> lastName = user.lastName;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; firstName, lastName &#125; = obj;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">&#123; firstName, lastName &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对数组使用解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> first = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> second = arr[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> [first, second] = arr;</span><br></pre></td></tr></table></figure></li><li><p>回传对个对象时, 使用对象解构, 而不是数组解构</p><blockquote><p>为什么？增加属性或者改变排序不会改变调用时的位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// then a miracle occurs</span></span><br><span class="line">  <span class="keyword">return</span> [left, right, top, bottom];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用时需要考虑回调数据的顺序。</span></span><br><span class="line"><span class="keyword">const</span> [left, __, top] = processInput(input);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// then a miracle occurs</span></span><br><span class="line">  <span class="keyword">return</span> &#123; left, right, top, bottom &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用时只选择需要的数据</span></span><br><span class="line"><span class="keyword">const</span> &#123; left, right &#125; = processInput(input);</span><br></pre></td></tr></table></figure></blockquote></li></ol><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ol><li>程序化生成字符串时使用模板字符串代替字符串连接<blockquote><p>模板字符串更简洁, 根据可读性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'How are you, '</span> + name + <span class="string">'?'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="string">'How are you, '</span>, name, <span class="string">'?'</span>].join();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`How are you, <span class="subst">$&#123;name&#125;</span>?`</span>;</span><br></pre></td></tr></table></figure></blockquote></li></ol><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ol><li><p>使用函数声明代替函数表达式</p><blockquote><p>因为函数声明是可命名的, 所以他们在调用栈中更容易被识别.<br>此外函数声明会把整个函数提升(hoisted), 而函数表达式只会把函数的引用变量名提升. 这条规则是的箭头函数可以取代函数表达式.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>函数表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 立即调用的函数表达式(IIFE)</span></span><br><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'welcome!'</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li><li><p>不要使用<code>arguments</code>。可以选择<code>rest</code>语法<code>...</code>替代</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>直接给函数的参数指定默认值，不要使用一个变化的函数参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// really bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 不！我们不应该改变函数参数。</span></span><br><span class="line">  <span class="comment">// 更加糟糕: 如果参数 opts 是 false 的话，它就会被设定为一个对象。</span></span><br><span class="line">  <span class="comment">// 但这样的写法会造成一些 Bugs。</span></span><br><span class="line">  <span class="comment">//（译注：例如当 opts 被赋值为空字符串，opts 仍然会被下一行代码设定为一个空对象。）</span></span><br><span class="line">  opts = opts || &#123;&#125;;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// still bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (opts === <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">    opts = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><ol><li>总是使用<code>class</code>, 避免使用<code>prototype</code><blockquote><p>因为<code>class</code>语法更易读</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queen</span>(<span class="params">contents = []</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._quene = [...contents];</span><br><span class="line">&#125;</span><br><span class="line">Quene.prototype.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>._quene[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">this</span>._quene.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queen</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(contents = []) &#123;</span><br><span class="line">        <span class="keyword">this</span>._quene = [...contents];</span><br><span class="line">    &#125;</span><br><span class="line">    pop() &#123;</span><br><span class="line">        <span class="keyword">const</span> value = <span class="keyword">this</span>._quene[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">this</span>._quene.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ol><h2 id="Iterators-and-Generators"><a href="#Iterators-and-Generators" class="headerlink" title="Iterators and Generators"></a>Iterators and Generators</h2><ol><li>不要使用<code>iterators</code>, 使用高阶函数如<code>map</code>或者<code>reduce</code>来代替<code>for-of</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> numbers) &#123;</span><br><span class="line">  sum += num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum === <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">numbers.forEach(<span class="function">(<span class="params">num</span>) =&gt;</span> sum += num);</span><br><span class="line">sum === <span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// best (use the functional force)</span></span><br><span class="line"><span class="keyword">const</span> sum = numbers.reduce(<span class="function">(<span class="params">total, num</span>) =&gt;</span> total += num, <span class="number">0</span>)</span><br><span class="line">sum === <span class="number">15</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="比较运算符和等号"><a href="#比较运算符和等号" class="headerlink" title="比较运算符和等号"></a>比较运算符和等号</h2><p>条件表达式例如 if 语句通过抽象方法<code>ToBoolean</code>强制计算它们的表达式并且总是遵守下面的规则：</p><ul><li>对象 被计算为 true</li><li>Undefined 被计算为 false</li><li>Null 被计算为 false</li><li>布尔值 被计算为 布尔的值</li><li>数字 如果是 +0、-0、或 NaN 被计算为 false, 否则为 true</li><li>字符串 如果是空字符串 ‘’ 被计算为 false，否则为 true<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2></li></ul><ol><li>给注释增加 FIXME 或 TODO 的前缀可以帮助其他开发者快速了解这是一个需要复查的问题，或是给需要实现的功能提供一个解决方式。这将有别于常见的注释，因为它们是可操作的。使用 FIXME – need to figure this out 或者 TODO – need to implement。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">FIXME:</span> shouldn't use a global here</span></span><br><span class="line">    total = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> total should be configurable by an options param</span></span><br><span class="line">    <span class="keyword">this</span>.total = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="空白"><a href="#空白" class="headerlink" title="空白"></a>空白</h2><ol><li>使用2个空格作为缩进。</li><li>在文件末尾插入一个空行。<h2 id="逗号"><a href="#逗号" class="headerlink" title="逗号"></a>逗号</h2></li><li>增加结尾的逗号: 需要。<blockquote><p><code>JavaScript</code>支持这种做法,并且会自动处理结尾多余的逗号, 好处是会让git diff更干净, 新增字段更方便.<br>另外，像 babel 这样的转译器会移除结尾多余的逗号，也就是说你不必担心老旧浏览器的尾逗号问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad - git diff without trailing comma</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">     firstName: <span class="string">'Florence'</span>,</span><br><span class="line">-    lastName: <span class="string">'Nightingale'</span></span><br><span class="line">+    lastName: <span class="string">'Nightingale'</span>,</span><br><span class="line">+    inventorOf: [<span class="string">'coxcomb graph'</span>, <span class="string">'modern nursing'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good - git diff with trailing comma</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">     firstName: <span class="string">'Florence'</span>,</span><br><span class="line">     lastName: <span class="string">'Nightingale'</span>,</span><br><span class="line">+    inventorOf: [<span class="string">'coxcomb chart'</span>, <span class="string">'modern nursing'</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Dana'</span>,</span><br><span class="line">  lastName: <span class="string">'Scully'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> heroes = [</span><br><span class="line">  <span class="string">'Batman'</span>,</span><br><span class="line">  <span class="string">'Superman'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Dana'</span>,</span><br><span class="line">  lastName: <span class="string">'Scully'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> heroes = [</span><br><span class="line">  <span class="string">'Batman'</span>,</span><br><span class="line">  <span class="string">'Superman'</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure></blockquote></li></ol><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ol><li><p>字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  =&gt; this.reviewScore = 9;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="keyword">this</span>.reviewScore + <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="built_in">String</span>(<span class="keyword">this</span>.reviewScore);</span><br></pre></td></tr></table></figure></li><li><p>如果因为某些原因 parseInt 成为你所做的事的瓶颈而需要使用位操作解决性能问题时，留个注释说清楚原因和你的目的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用 parseInt 导致我的程序变慢，</span></span><br><span class="line"><span class="comment"> * 改成使用位操作转换数字快多了。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> val = inputValue &gt;&gt; <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><ol><li><p>别保存<code>this</code>的引用。使用箭头函数或<code>Function#bind</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(self);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(that);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果你的文件只输出一个类，那你的文件名必须和类名完全保持一致。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file contents</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckBox</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> CheckBox;</span><br><span class="line"></span><br><span class="line"><span class="comment">// in some other file</span></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> CheckBox <span class="keyword">from</span> <span class="string">'./checkBox'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> CheckBox <span class="keyword">from</span> <span class="string">'./check_box'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> CheckBox <span class="keyword">from</span> <span class="string">'./CheckBox'</span>;</span><br></pre></td></tr></table></figure></li><li><p>当你导出默认的函数时使用驼峰式命名。你的文件名必须和函数名完全保持一致。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeStyleGuide</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> makeStyleGuide;</span><br></pre></td></tr></table></figure></li><li><p>当你导出单例、函数库、空对象时使用帕斯卡式命名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AirbnbStyleGuide = &#123;</span><br><span class="line">  es6: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> AirbnbStyleGuide;</span><br></pre></td></tr></table></figure></li></ol><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ol><li>当给事件附加数据时（无论是 DOM 事件还是私有事件），传入一个哈希而不是原始值。这样可以让后面的贡献者增加更多数据到事件数据而无需找出并更新事件的每一个处理器。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, listing.id);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e, listingId</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something with listingId</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, &#123; <span class="attr">listingId</span> : listing.id &#125;);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e, data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something with data.listingId</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
        <tags>
            
            <tag> codeStyle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Base64-md5</title>
      <link href="/2018/09/04/base64-md5/"/>
      <url>/2018/09/04/base64-md5/</url>
      <content type="html"><![CDATA[<h1 id="Base64编码与md5摘要算法探究及日常应用"><a href="#Base64编码与md5摘要算法探究及日常应用" class="headerlink" title="Base64编码与md5摘要算法探究及日常应用"></a>Base64编码与md5摘要算法探究及日常应用</h1><p>Base64编码和md5摘要算法我们经常听到,本文主要对着两者算法做一个简单的了解探究<br><a id="more"></a></p><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><p>Base64是一种基于64个可打印字符来表示二进制数据的表示方法,常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据，包括MIME的电子邮件及XML的一些复杂数据。</p><h3 id="Base64来源"><a href="#Base64来源" class="headerlink" title="Base64来源"></a>Base64来源</h3><p>Base64来源于电子邮件的发展,早期的电子邮件是不支持二进制文件(例如图片)的,并且邮件中也不支持非英语字符,邮件也不能有附件,再后来的发展中工程师对电子邮件的技术规范就行了扩充,也就产生了常说的<code>MIME</code>,全称是全”Multipurpose Internet Mail Extensions”，中译为”多用途互联网邮件扩展”,它包括了多项技术规范.<br>一封传统的电子邮件格式如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">From: &quot;Tommy Lee&quot; &lt;lee@example.com&gt;</span><br><span class="line">To: &quot;Jack Zhang&quot; &lt;zhang@example.com&gt;</span><br><span class="line">Subject: Test</span><br><span class="line">Date: Wed, 17 May 2000 19:08:29 -0400</span><br><span class="line">Message-ID: &lt;NDBBIAKOPKHFGPLCODIGIEKBCHAA.lee@example.com&gt;</span><br><span class="line"></span><br><span class="line">Hello World.</span><br></pre></td></tr></table></figure></p><p>它包含两个部分,第一部分是信封,里面包含发件人,收件人,邮件主题,邮件发送时间,邮件的唯一标识Message-ID,第二部分是正文,也就是邮件的内容,第一部分和第二部分之间用一个空行隔开,</p><p><code>MIME</code>对传统邮件的扩展体现在在信封里面新增了三行语句</p><ol><li>MIME-Version: 1.0<br>这行语句标志着该邮件使用了<code>MIME</code>规范,收信端将按照该规范进行解析邮件内容</li><li><p>Content-Type: text/plain; charset=”UTF-8”<br>这行语句说明了改邮件的信息类型和编码方式<br> Content-Type表明信息类型，缺省值为” text/plain”<br> 它包含了主要类型（primary type）和次要类型（subtype）两个部分，两者之间用”/“分割。主要类型有9种，分别是application、audio、example、image、message、model、multipart、text、video,每种主要类型下面又分为多种次要类型,常用的一些Content-Type类型如下:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">text/plain：纯文本，文件扩展名.txt</span><br><span class="line">text/html：HTML文本，文件扩展名.htm和.html</span><br><span class="line">image/jpeg：jpeg格式的图片，文件扩展名.jpg</span><br><span class="line">image/gif：GIF格式的图片，文件扩展名.gif</span><br><span class="line">audio/x-wave：WAVE格式的音频，文件扩展名.wav</span><br><span class="line">audio/mpeg：MP3格式的音频，文件扩展名.mp3</span><br><span class="line">video/mpeg：MPEG格式的视频，文件扩展名.mpg</span><br><span class="line">application/zip：PK-ZIP格式的压缩文件，文件扩展名.zip</span><br></pre></td></tr></table></figure><p> 如果信息的主要类型是”text”，那么还必须指明编码类型”charset”，缺省值是ASCII，其他可能值有”ISO-8859-1”、”UTF-8”、”GB2312”等等。</p></li><li>Content-transfer-encoding: Base64<br>这里我们的主角就登场了,这行语句表明邮件编码转换的方式,因为现代邮件里面会有图片或者其它原始邮件不支持的内容,那么在发送的时候就需要对内容进行编码转换,将内容转换成邮件支持的<a href="http://tool.oschina.net/commons?type=4" target="_blank" rel="noopener">ASCII字符</a>,Content-transfer-encoding的值有5种—-“7bit”、”8bit”、”binary”、”quoted-printable”和”Base64”—-其中”7bit”是缺省值，即不用转化的ASCII字符。真正常用是”quoted-printable”和”Base64”两种.</li></ol><h3 id="quoted-printable编码"><a href="#quoted-printable编码" class="headerlink" title="quoted-printable编码"></a>quoted-printable编码</h3><p>关于’quoted-printable’简单介绍一下,它主要用于ACSII文本中夹杂少量非ASCII码字符的情况，不适合于转换纯二进制文件.<br>它规定将每一个8位的字节，转换为3个字符,规则如下:</p><ol><li>所有可打印的ASCII码字符（十进制值从33到126）都保持原样不变，”=”（十进制值61）除外,其余的字符都要进行编码。</li><li>编码后第一个字符是”=”号，这是固定不变的;</li><li>编码后二个字符是二个十六进制数，分别代表了这个字节前四位和后四位的数值。<br>例如ASCII码中的换页键的码值是12,那么先转成8位的二进制是00001100,再转成16进制是0C,然后再在前面加上一个’=’号,最后的编码结果是’=0C’.</li></ol><h3 id="Base64编码"><a href="#Base64编码" class="headerlink" title="Base64编码"></a>Base64编码</h3><p>首先选出一个字符集,分别是小写字母a-z、大写字母A-Z、数字0-9、符号”+”、”/“加起来是64个,另外有一个垫字符’=’,然后将其它所有不在这个字符集里面的字符都转换到到这个字符集里面去,转换规则如下:</p><ol><li>将每三个字节作为一组，一共是24个二进制位;</li><li>再将这24个二进制位分为四组，每个组有6个二进制位;</li><li>在每组前面加两个00，扩展成32个二进制位，即四个字节;</li><li>查询<a href="https://blog.csdn.net/goodlixueyong/article/details/52132250" target="_blank" rel="noopener">字符表</a>,找到每个字节在表中对应的符号，这就是Base64的编码值;<br>所以分析最终的结果的话,原始的三个字节经过转换以后会变成4个字节,因此Base64编码后的文本，会比原文本大出三分之一左右。</li></ol><h4 id="Base64编码示例"><a href="#Base64编码示例" class="headerlink" title="Base64编码示例"></a>Base64编码示例</h4><p>编码译文单词’six’:<br><code>s i x</code> -&lt;转为对应的ASCII值&gt;&gt;&gt; <code>115 105 120</code> -&lt;转为对应的二进制&gt;&gt; <code>01110011 01101001 01111000</code> -&lt;二进制分为四组&gt;&gt; <code>011100 110110 100101 111000</code> -&lt;每组前面添加两个0&gt;&gt; <code>00011100 00110110 00100101 00111000</code> -&lt;每组转为对应的10进制&gt;&gt; <code>28 54 37 56</code> -&lt;查询Base64字符表转为对应字符&gt;&gt; <code>c 2 l 4</code><br>则’six’编码后的结果是’c2l4’,你可以用这个<a href="http://tool.oschina.net/encrypt?type=3" target="_blank" rel="noopener">工具</a>来验证你的转码结果是否正确.</p><p>如果字节数不足三，则处理如下:</p><ul><li><p>二个字节的情况：将这二个字节的一共16个二进制位，按照上面的规则，转成三组，最后一组除了前面加两个0以外，后面也要加两个0。这样得到一个三位的Base64编码，再在末尾补上一个”=”号。<br>比如，”Ma”这个字符串是两个字节，可以转化成三组00010011、00010110、00010000以后，对应Base64值分别为T、W、E，再补上一个”=”号，因此”Ma”的Base64编码就是TWE=。</p></li><li><p>一个字节的情况：将这一个字节的8个二进制位，按照上面的规则转成二组，最后一组除了前面加二个0以外，后面再加4个0。这样得到一个二位的Base64编码，再在末尾补上两个”=”号。<br>比如，”M”这个字母是一个字节，可以转化为二组00010011、00010000，对应的Base64值分别为T、Q，再补上二个”=”号，因此”M”的Base64编码就是’TQ==’。</p></li></ul><p>再举一个中文的例子，汉字”严”如何转化成Base64编码？</p><p>这里需要注意，汉字本身可以有多种编码，比如gb2312、utf-8、gbk等等，每一种编码的Base64对应值都不一样。下面的例子以utf-8为例。</p><p>首先，”严”的utf-8编码为E4B8A5，写成二进制就是三字节的”11100100 10111000 10100101”。将这个24位的二进制字符串，按照第3节中的规则，转换成四组一共32位的二进制值”00111001 00001011 00100010 00100101”，相应的十进制数为57、11、34、37，它们对应的Base64值就为5、L、i、l。</p><p>所以，汉字”严”（utf-8编码）的Base64值就是5Lil。</p><h4 id="Base64在js中的使用"><a href="#Base64在js中的使用" class="headerlink" title="Base64在js中的使用"></a>Base64在js中的使用</h4><p>Base64的js实现如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  Base64 encode / decode</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*  @author haitao.tu</span></span><br><span class="line"><span class="comment">*  @date   2010-04-26</span></span><br><span class="line"><span class="comment">*  @email  tuhaitao@foxmail.com</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base64</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// private property</span></span><br><span class="line">_keyStr = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// public method for encoding</span></span><br><span class="line"><span class="keyword">this</span>.encode = <span class="function"><span class="keyword">function</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> output = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">var</span> chr1, chr2, chr3, enc1, enc2, enc3, enc4;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">input = _utf8_encode(input);</span><br><span class="line"><span class="keyword">while</span> (i &lt; input.length) &#123;</span><br><span class="line">chr1 = input.charCodeAt(i++);</span><br><span class="line">chr2 = input.charCodeAt(i++);</span><br><span class="line">chr3 = input.charCodeAt(i++);</span><br><span class="line">enc1 = chr1 &gt;&gt; <span class="number">2</span>;</span><br><span class="line">enc2 = ((chr1 &amp; <span class="number">3</span>) &lt;&lt; <span class="number">4</span>) | (chr2 &gt;&gt; <span class="number">4</span>);</span><br><span class="line">enc3 = ((chr2 &amp; <span class="number">15</span>) &lt;&lt; <span class="number">2</span>) | (chr3 &gt;&gt; <span class="number">6</span>);</span><br><span class="line">enc4 = chr3 &amp; <span class="number">63</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isNaN</span>(chr2)) &#123;</span><br><span class="line">enc3 = enc4 = <span class="number">64</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isNaN</span>(chr3)) &#123;</span><br><span class="line">enc4 = <span class="number">64</span>;</span><br><span class="line">&#125;</span><br><span class="line">output = output +</span><br><span class="line">_keyStr.charAt(enc1) + _keyStr.charAt(enc2) +</span><br><span class="line">_keyStr.charAt(enc3) + _keyStr.charAt(enc4);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// public method for decoding</span></span><br><span class="line"><span class="keyword">this</span>.decode = <span class="function"><span class="keyword">function</span> (<span class="params">input</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> output = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">var</span> chr1, chr2, chr3;</span><br><span class="line"><span class="keyword">var</span> enc1, enc2, enc3, enc4;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">input = input.replace(<span class="regexp">/[^A-Za-z0-9\+\/\=]/g</span>, <span class="string">""</span>);</span><br><span class="line"><span class="keyword">while</span> (i &lt; input.length) &#123;</span><br><span class="line">enc1 = _keyStr.indexOf(input.charAt(i++));</span><br><span class="line">enc2 = _keyStr.indexOf(input.charAt(i++));</span><br><span class="line">enc3 = _keyStr.indexOf(input.charAt(i++));</span><br><span class="line">enc4 = _keyStr.indexOf(input.charAt(i++));</span><br><span class="line">chr1 = (enc1 &lt;&lt; <span class="number">2</span>) | (enc2 &gt;&gt; <span class="number">4</span>);</span><br><span class="line">chr2 = ((enc2 &amp; <span class="number">15</span>) &lt;&lt; <span class="number">4</span>) | (enc3 &gt;&gt; <span class="number">2</span>);</span><br><span class="line">chr3 = ((enc3 &amp; <span class="number">3</span>) &lt;&lt; <span class="number">6</span>) | enc4;</span><br><span class="line">output = output + <span class="built_in">String</span>.fromCharCode(chr1);</span><br><span class="line"><span class="keyword">if</span> (enc3 != <span class="number">64</span>) &#123;</span><br><span class="line">output = output + <span class="built_in">String</span>.fromCharCode(chr2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (enc4 != <span class="number">64</span>) &#123;</span><br><span class="line">output = output + <span class="built_in">String</span>.fromCharCode(chr3);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">output = _utf8_decode(output);</span><br><span class="line"><span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// private method for UTF-8 encoding</span></span><br><span class="line">_utf8_encode = <span class="function"><span class="keyword">function</span> (<span class="params">string</span>) </span>&#123;</span><br><span class="line">string = string.replace(<span class="regexp">/\r\n/g</span>,<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">var</span> utftext = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="number">0</span>; n &lt; string.length; n++) &#123;</span><br><span class="line"><span class="keyword">var</span> c = string.charCodeAt(n);</span><br><span class="line"><span class="keyword">if</span> (c &lt; <span class="number">128</span>) &#123;</span><br><span class="line">utftext += <span class="built_in">String</span>.fromCharCode(c);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>((c &gt; <span class="number">127</span>) &amp;&amp; (c &lt; <span class="number">2048</span>)) &#123;</span><br><span class="line">utftext += <span class="built_in">String</span>.fromCharCode((c &gt;&gt; <span class="number">6</span>) | <span class="number">192</span>);</span><br><span class="line">utftext += <span class="built_in">String</span>.fromCharCode((c &amp; <span class="number">63</span>) | <span class="number">128</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">utftext += <span class="built_in">String</span>.fromCharCode((c &gt;&gt; <span class="number">12</span>) | <span class="number">224</span>);</span><br><span class="line">utftext += <span class="built_in">String</span>.fromCharCode(((c &gt;&gt; <span class="number">6</span>) &amp; <span class="number">63</span>) | <span class="number">128</span>);</span><br><span class="line">utftext += <span class="built_in">String</span>.fromCharCode((c &amp; <span class="number">63</span>) | <span class="number">128</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> utftext;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// private method for UTF-8 decoding</span></span><br><span class="line">_utf8_decode = <span class="function"><span class="keyword">function</span> (<span class="params">utftext</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> c = c1 = c2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ( i &lt; utftext.length ) &#123;</span><br><span class="line">c = utftext.charCodeAt(i);</span><br><span class="line"><span class="keyword">if</span> (c &lt; <span class="number">128</span>) &#123;</span><br><span class="line">string += <span class="built_in">String</span>.fromCharCode(c);</span><br><span class="line">i++;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>((c &gt; <span class="number">191</span>) &amp;&amp; (c &lt; <span class="number">224</span>)) &#123;</span><br><span class="line">c2 = utftext.charCodeAt(i+<span class="number">1</span>);</span><br><span class="line">string += <span class="built_in">String</span>.fromCharCode(((c &amp; <span class="number">31</span>) &lt;&lt; <span class="number">6</span>) | (c2 &amp; <span class="number">63</span>));</span><br><span class="line">i += <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c2 = utftext.charCodeAt(i+<span class="number">1</span>);</span><br><span class="line">c3 = utftext.charCodeAt(i+<span class="number">2</span>);</span><br><span class="line">string += <span class="built_in">String</span>.fromCharCode(((c &amp; <span class="number">15</span>) &lt;&lt; <span class="number">12</span>) | ((c2 &amp; <span class="number">63</span>) &lt;&lt; <span class="number">6</span>) | (c3 &amp; <span class="number">63</span>));</span><br><span class="line">i += <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> string;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="md5摘要算法"><a href="#md5摘要算法" class="headerlink" title="md5摘要算法"></a>md5摘要算法</h2><p>Base64我们说的差不多了,下面说说md5.<br>md5全称’MD5消息摘要算法’（英语：MD5 Message-Digest Algorithm）,其最明显的作用就是对一段文本或者二进制文件进行运算之后得出一个128位的值,我们通常会把计算结果转换成32个16进制的数来表示.</p><ul><li>对文本进行运算常用于密码的加密,比如对’password2018’这个字符串进行加密之后得到’f4654d5ac34aca487f0e3cb08d769f8a’,由于md5发生碰撞的概率极低,也就是不同的文本加密后得到同样的结果的可能性微乎其微,所以一般可以认为’f4654d5ac34aca487f0e3cb08d769f8a’这样的结果就唯一标识了’password2018’这个字符串.<br>加密容易解密难,如果你想通过’f4654d5ac34aca487f0e3cb08d769f8a’这个结果去逆向运算得到’password2018’这个原始数据几乎是不可能的,付出的成本也相当于是天价,所以我们的网站登录经常会采取用md5加密用户密码的方式来验证和存储用户账户密码.</li><li>对二进制文件的运算常用于确保文件的完整性,比如在一些正规的网站上下载东西时常常附带会有一个<code>.md5</code>的文件,里面的内容类似于<code>MD5 (tanajiya.tar.gz) = 38b8c2c1093dd0fec383a9d9ac940515</code>这样,这里面记录的一串字符就是你要下载的这个文件的md5的运算结果,因为之前说过了一个东西的md5值是唯一的,一个md5结果也同样标识着唯一的一个东西,类似于每个人都有自己独特的指纹一样,一旦这个文件被人篡改过,那么再次对这个文件计算md5就会得到与之前不一样的md5值,所以我们常常会用这个md5结果来验证确保文件的完整性.</li></ul><h3 id="md5的js实现如下"><a href="#md5的js实现如下" class="headerlink" title="md5的js实现如下:"></a>md5的js实现如下:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message</span></span><br><span class="line"><span class="comment"> * Digest Algorithm, as defined in RFC 1321.</span></span><br><span class="line"><span class="comment"> * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.</span></span><br><span class="line"><span class="comment"> * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet</span></span><br><span class="line"><span class="comment"> * Distributed under the BSD License</span></span><br><span class="line"><span class="comment"> * See http://pajhome.org.uk/crypt/md5 for more info.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Configurable variables. You may need to tweak these to be compatible with</span></span><br><span class="line"><span class="comment"> * the server-side, but the defaults work in most cases.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hexcase = <span class="number">0</span>;  <span class="comment">/* hex output format. 0 - lowercase; 1 - uppercase        */</span></span><br><span class="line"><span class="keyword">var</span> b64pad  = <span class="string">""</span>; <span class="comment">/* base-64 pad character. "=" for strict RFC compliance   */</span></span><br><span class="line"><span class="keyword">var</span> chrsz   = <span class="number">8</span>;  <span class="comment">/* bits per input character. 8 - ASCII; 16 - Unicode      */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * These are the functions you'll usually want to call</span></span><br><span class="line"><span class="comment"> * They take string arguments and return either hex or base-64 encoded strings</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex_md5</span>(<span class="params">s</span>)</span>&#123; <span class="keyword">return</span> binl2hex(core_md5(str2binl(s), s.length * chrsz));&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b64_md5</span>(<span class="params">s</span>)</span>&#123; <span class="keyword">return</span> binl2b64(core_md5(str2binl(s), s.length * chrsz));&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str_md5</span>(<span class="params">s</span>)</span>&#123; <span class="keyword">return</span> binl2str(core_md5(str2binl(s), s.length * chrsz));&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex_hmac_md5</span>(<span class="params">key, data</span>) </span>&#123; <span class="keyword">return</span> binl2hex(core_hmac_md5(key, data)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b64_hmac_md5</span>(<span class="params">key, data</span>) </span>&#123; <span class="keyword">return</span> binl2b64(core_hmac_md5(key, data)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str_hmac_md5</span>(<span class="params">key, data</span>) </span>&#123; <span class="keyword">return</span> binl2str(core_hmac_md5(key, data)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Perform a simple self-test to see if the VM is working</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5_vm_test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> hex_md5(<span class="string">"abc"</span>) == <span class="string">"900150983cd24fb0d6963f7d28e17f72"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Calculate the MD5 of an array of little-endian words, and a bit length</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">core_md5</span>(<span class="params">x, len</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* append padding */</span></span><br><span class="line">  x[len &gt;&gt; <span class="number">5</span>] |= <span class="number">0x80</span> &lt;&lt; ((len) % <span class="number">32</span>);</span><br><span class="line">  x[(((len + <span class="number">64</span>) &gt;&gt;&gt; <span class="number">9</span>) &lt;&lt; <span class="number">4</span>) + <span class="number">14</span>] = len;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> a =  <span class="number">1732584193</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">-271733879</span>;</span><br><span class="line">  <span class="keyword">var</span> c = <span class="number">-1732584194</span>;</span><br><span class="line">  <span class="keyword">var</span> d =  <span class="number">271733878</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; x.length; i += <span class="number">16</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">var</span> olda = a;</span><br><span class="line">    <span class="keyword">var</span> oldb = b;</span><br><span class="line">    <span class="keyword">var</span> oldc = c;</span><br><span class="line">    <span class="keyword">var</span> oldd = d;</span><br><span class="line"></span><br><span class="line">    a = md5_ff(a, b, c, d, x[i+ <span class="number">0</span>], <span class="number">7</span> , <span class="number">-680876936</span>);</span><br><span class="line">    d = md5_ff(d, a, b, c, x[i+ <span class="number">1</span>], <span class="number">12</span>, <span class="number">-389564586</span>);</span><br><span class="line">    c = md5_ff(c, d, a, b, x[i+ <span class="number">2</span>], <span class="number">17</span>,  <span class="number">606105819</span>);</span><br><span class="line">    b = md5_ff(b, c, d, a, x[i+ <span class="number">3</span>], <span class="number">22</span>, <span class="number">-1044525330</span>);</span><br><span class="line">    a = md5_ff(a, b, c, d, x[i+ <span class="number">4</span>], <span class="number">7</span> , <span class="number">-176418897</span>);</span><br><span class="line">    d = md5_ff(d, a, b, c, x[i+ <span class="number">5</span>], <span class="number">12</span>,  <span class="number">1200080426</span>);</span><br><span class="line">    c = md5_ff(c, d, a, b, x[i+ <span class="number">6</span>], <span class="number">17</span>, <span class="number">-1473231341</span>);</span><br><span class="line">    b = md5_ff(b, c, d, a, x[i+ <span class="number">7</span>], <span class="number">22</span>, <span class="number">-45705983</span>);</span><br><span class="line">    a = md5_ff(a, b, c, d, x[i+ <span class="number">8</span>], <span class="number">7</span> ,  <span class="number">1770035416</span>);</span><br><span class="line">    d = md5_ff(d, a, b, c, x[i+ <span class="number">9</span>], <span class="number">12</span>, <span class="number">-1958414417</span>);</span><br><span class="line">    c = md5_ff(c, d, a, b, x[i+<span class="number">10</span>], <span class="number">17</span>, <span class="number">-42063</span>);</span><br><span class="line">    b = md5_ff(b, c, d, a, x[i+<span class="number">11</span>], <span class="number">22</span>, <span class="number">-1990404162</span>);</span><br><span class="line">    a = md5_ff(a, b, c, d, x[i+<span class="number">12</span>], <span class="number">7</span> ,  <span class="number">1804603682</span>);</span><br><span class="line">    d = md5_ff(d, a, b, c, x[i+<span class="number">13</span>], <span class="number">12</span>, <span class="number">-40341101</span>);</span><br><span class="line">    c = md5_ff(c, d, a, b, x[i+<span class="number">14</span>], <span class="number">17</span>, <span class="number">-1502002290</span>);</span><br><span class="line">    b = md5_ff(b, c, d, a, x[i+<span class="number">15</span>], <span class="number">22</span>,  <span class="number">1236535329</span>);</span><br><span class="line"></span><br><span class="line">    a = md5_gg(a, b, c, d, x[i+ <span class="number">1</span>], <span class="number">5</span> , <span class="number">-165796510</span>);</span><br><span class="line">    d = md5_gg(d, a, b, c, x[i+ <span class="number">6</span>], <span class="number">9</span> , <span class="number">-1069501632</span>);</span><br><span class="line">    c = md5_gg(c, d, a, b, x[i+<span class="number">11</span>], <span class="number">14</span>,  <span class="number">643717713</span>);</span><br><span class="line">    b = md5_gg(b, c, d, a, x[i+ <span class="number">0</span>], <span class="number">20</span>, <span class="number">-373897302</span>);</span><br><span class="line">    a = md5_gg(a, b, c, d, x[i+ <span class="number">5</span>], <span class="number">5</span> , <span class="number">-701558691</span>);</span><br><span class="line">    d = md5_gg(d, a, b, c, x[i+<span class="number">10</span>], <span class="number">9</span> ,  <span class="number">38016083</span>);</span><br><span class="line">    c = md5_gg(c, d, a, b, x[i+<span class="number">15</span>], <span class="number">14</span>, <span class="number">-660478335</span>);</span><br><span class="line">    b = md5_gg(b, c, d, a, x[i+ <span class="number">4</span>], <span class="number">20</span>, <span class="number">-405537848</span>);</span><br><span class="line">    a = md5_gg(a, b, c, d, x[i+ <span class="number">9</span>], <span class="number">5</span> ,  <span class="number">568446438</span>);</span><br><span class="line">    d = md5_gg(d, a, b, c, x[i+<span class="number">14</span>], <span class="number">9</span> , <span class="number">-1019803690</span>);</span><br><span class="line">    c = md5_gg(c, d, a, b, x[i+ <span class="number">3</span>], <span class="number">14</span>, <span class="number">-187363961</span>);</span><br><span class="line">    b = md5_gg(b, c, d, a, x[i+ <span class="number">8</span>], <span class="number">20</span>,  <span class="number">1163531501</span>);</span><br><span class="line">    a = md5_gg(a, b, c, d, x[i+<span class="number">13</span>], <span class="number">5</span> , <span class="number">-1444681467</span>);</span><br><span class="line">    d = md5_gg(d, a, b, c, x[i+ <span class="number">2</span>], <span class="number">9</span> , <span class="number">-51403784</span>);</span><br><span class="line">    c = md5_gg(c, d, a, b, x[i+ <span class="number">7</span>], <span class="number">14</span>,  <span class="number">1735328473</span>);</span><br><span class="line">    b = md5_gg(b, c, d, a, x[i+<span class="number">12</span>], <span class="number">20</span>, <span class="number">-1926607734</span>);</span><br><span class="line"></span><br><span class="line">    a = md5_hh(a, b, c, d, x[i+ <span class="number">5</span>], <span class="number">4</span> , <span class="number">-378558</span>);</span><br><span class="line">    d = md5_hh(d, a, b, c, x[i+ <span class="number">8</span>], <span class="number">11</span>, <span class="number">-2022574463</span>);</span><br><span class="line">    c = md5_hh(c, d, a, b, x[i+<span class="number">11</span>], <span class="number">16</span>,  <span class="number">1839030562</span>);</span><br><span class="line">    b = md5_hh(b, c, d, a, x[i+<span class="number">14</span>], <span class="number">23</span>, <span class="number">-35309556</span>);</span><br><span class="line">    a = md5_hh(a, b, c, d, x[i+ <span class="number">1</span>], <span class="number">4</span> , <span class="number">-1530992060</span>);</span><br><span class="line">    d = md5_hh(d, a, b, c, x[i+ <span class="number">4</span>], <span class="number">11</span>,  <span class="number">1272893353</span>);</span><br><span class="line">    c = md5_hh(c, d, a, b, x[i+ <span class="number">7</span>], <span class="number">16</span>, <span class="number">-155497632</span>);</span><br><span class="line">    b = md5_hh(b, c, d, a, x[i+<span class="number">10</span>], <span class="number">23</span>, <span class="number">-1094730640</span>);</span><br><span class="line">    a = md5_hh(a, b, c, d, x[i+<span class="number">13</span>], <span class="number">4</span> ,  <span class="number">681279174</span>);</span><br><span class="line">    d = md5_hh(d, a, b, c, x[i+ <span class="number">0</span>], <span class="number">11</span>, <span class="number">-358537222</span>);</span><br><span class="line">    c = md5_hh(c, d, a, b, x[i+ <span class="number">3</span>], <span class="number">16</span>, <span class="number">-722521979</span>);</span><br><span class="line">    b = md5_hh(b, c, d, a, x[i+ <span class="number">6</span>], <span class="number">23</span>,  <span class="number">76029189</span>);</span><br><span class="line">    a = md5_hh(a, b, c, d, x[i+ <span class="number">9</span>], <span class="number">4</span> , <span class="number">-640364487</span>);</span><br><span class="line">    d = md5_hh(d, a, b, c, x[i+<span class="number">12</span>], <span class="number">11</span>, <span class="number">-421815835</span>);</span><br><span class="line">    c = md5_hh(c, d, a, b, x[i+<span class="number">15</span>], <span class="number">16</span>,  <span class="number">530742520</span>);</span><br><span class="line">    b = md5_hh(b, c, d, a, x[i+ <span class="number">2</span>], <span class="number">23</span>, <span class="number">-995338651</span>);</span><br><span class="line"></span><br><span class="line">    a = md5_ii(a, b, c, d, x[i+ <span class="number">0</span>], <span class="number">6</span> , <span class="number">-198630844</span>);</span><br><span class="line">    d = md5_ii(d, a, b, c, x[i+ <span class="number">7</span>], <span class="number">10</span>,  <span class="number">1126891415</span>);</span><br><span class="line">    c = md5_ii(c, d, a, b, x[i+<span class="number">14</span>], <span class="number">15</span>, <span class="number">-1416354905</span>);</span><br><span class="line">    b = md5_ii(b, c, d, a, x[i+ <span class="number">5</span>], <span class="number">21</span>, <span class="number">-57434055</span>);</span><br><span class="line">    a = md5_ii(a, b, c, d, x[i+<span class="number">12</span>], <span class="number">6</span> ,  <span class="number">1700485571</span>);</span><br><span class="line">    d = md5_ii(d, a, b, c, x[i+ <span class="number">3</span>], <span class="number">10</span>, <span class="number">-1894986606</span>);</span><br><span class="line">    c = md5_ii(c, d, a, b, x[i+<span class="number">10</span>], <span class="number">15</span>, <span class="number">-1051523</span>);</span><br><span class="line">    b = md5_ii(b, c, d, a, x[i+ <span class="number">1</span>], <span class="number">21</span>, <span class="number">-2054922799</span>);</span><br><span class="line">    a = md5_ii(a, b, c, d, x[i+ <span class="number">8</span>], <span class="number">6</span> ,  <span class="number">1873313359</span>);</span><br><span class="line">    d = md5_ii(d, a, b, c, x[i+<span class="number">15</span>], <span class="number">10</span>, <span class="number">-30611744</span>);</span><br><span class="line">    c = md5_ii(c, d, a, b, x[i+ <span class="number">6</span>], <span class="number">15</span>, <span class="number">-1560198380</span>);</span><br><span class="line">    b = md5_ii(b, c, d, a, x[i+<span class="number">13</span>], <span class="number">21</span>,  <span class="number">1309151649</span>);</span><br><span class="line">    a = md5_ii(a, b, c, d, x[i+ <span class="number">4</span>], <span class="number">6</span> , <span class="number">-145523070</span>);</span><br><span class="line">    d = md5_ii(d, a, b, c, x[i+<span class="number">11</span>], <span class="number">10</span>, <span class="number">-1120210379</span>);</span><br><span class="line">    c = md5_ii(c, d, a, b, x[i+ <span class="number">2</span>], <span class="number">15</span>,  <span class="number">718787259</span>);</span><br><span class="line">    b = md5_ii(b, c, d, a, x[i+ <span class="number">9</span>], <span class="number">21</span>, <span class="number">-343485551</span>);</span><br><span class="line"></span><br><span class="line">    a = safe_add(a, olda);</span><br><span class="line">    b = safe_add(b, oldb);</span><br><span class="line">    c = safe_add(c, oldc);</span><br><span class="line">    d = safe_add(d, oldd);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>(a, b, c, d);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * These functions implement the four basic operations the algorithm uses.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5_cmn</span>(<span class="params">q, a, b, x, s, t</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5_ff</span>(<span class="params">a, b, c, d, x, s, t</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> md5_cmn((b &amp; c) | ((~b) &amp; d), a, b, x, s, t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5_gg</span>(<span class="params">a, b, c, d, x, s, t</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> md5_cmn((b &amp; d) | (c &amp; (~d)), a, b, x, s, t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5_hh</span>(<span class="params">a, b, c, d, x, s, t</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> md5_cmn(b ^ c ^ d, a, b, x, s, t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5_ii</span>(<span class="params">a, b, c, d, x, s, t</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> md5_cmn(c ^ (b | (~d)), a, b, x, s, t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Calculate the HMAC-MD5, of a key and some data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">core_hmac_md5</span>(<span class="params">key, data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bkey = str2binl(key);</span><br><span class="line">  <span class="keyword">if</span>(bkey.length &gt; <span class="number">16</span>) bkey = core_md5(bkey, key.length * chrsz);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> ipad = <span class="built_in">Array</span>(<span class="number">16</span>), opad = <span class="built_in">Array</span>(<span class="number">16</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    ipad[i] = bkey[i] ^ <span class="number">0x36363636</span>;</span><br><span class="line">    opad[i] = bkey[i] ^ <span class="number">0x5C5C5C5C</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> hash = core_md5(ipad.concat(str2binl(data)), <span class="number">512</span> + data.length * chrsz);</span><br><span class="line">  <span class="keyword">return</span> core_md5(opad.concat(hash), <span class="number">512</span> + <span class="number">128</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Add integers, wrapping at 2^32. This uses 16-bit operations internally</span></span><br><span class="line"><span class="comment"> * to work around bugs in some JS interpreters.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_add</span>(<span class="params">x, y</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> lsw = (x &amp; <span class="number">0xFFFF</span>) + (y &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">  <span class="keyword">var</span> msw = (x &gt;&gt; <span class="number">16</span>) + (y &gt;&gt; <span class="number">16</span>) + (lsw &gt;&gt; <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">return</span> (msw &lt;&lt; <span class="number">16</span>) | (lsw &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Bitwise rotate a 32-bit number to the left.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bit_rol</span>(<span class="params">num, cnt</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (num &lt;&lt; cnt) | (num &gt;&gt;&gt; (<span class="number">32</span> - cnt));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Convert a string to an array of little-endian words</span></span><br><span class="line"><span class="comment"> * If chrsz is ASCII, characters &gt;255 have their hi-byte silently ignored.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str2binl</span>(<span class="params">str</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bin = <span class="built_in">Array</span>();</span><br><span class="line">  <span class="keyword">var</span> mask = (<span class="number">1</span> &lt;&lt; chrsz) - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length * chrsz; i += chrsz)</span><br><span class="line">    bin[i&gt;&gt;<span class="number">5</span>] |= (str.charCodeAt(i / chrsz) &amp; mask) &lt;&lt; (i%<span class="number">32</span>);</span><br><span class="line">  <span class="keyword">return</span> bin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Convert an array of little-endian words to a string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binl2str</span>(<span class="params">bin</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">var</span> mask = (<span class="number">1</span> &lt;&lt; chrsz) - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; bin.length * <span class="number">32</span>; i += chrsz)</span><br><span class="line">    str += <span class="built_in">String</span>.fromCharCode((bin[i&gt;&gt;<span class="number">5</span>] &gt;&gt;&gt; (i % <span class="number">32</span>)) &amp; mask);</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Convert an array of little-endian words to a hex string.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binl2hex</span>(<span class="params">binarray</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hex_tab = hexcase ? <span class="string">"0123456789ABCDEF"</span> : <span class="string">"0123456789abcdef"</span>;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; binarray.length * <span class="number">4</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    str += hex_tab.charAt((binarray[i&gt;&gt;<span class="number">2</span>] &gt;&gt; ((i%<span class="number">4</span>)*<span class="number">8</span>+<span class="number">4</span>)) &amp; <span class="number">0xF</span>) +</span><br><span class="line">           hex_tab.charAt((binarray[i&gt;&gt;<span class="number">2</span>] &gt;&gt; ((i%<span class="number">4</span>)*<span class="number">8</span>  )) &amp; <span class="number">0xF</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Convert an array of little-endian words to a base-64 string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binl2b64</span>(<span class="params">binarray</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> tab = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>;</span><br><span class="line">  <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; binarray.length * <span class="number">4</span>; i += <span class="number">3</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">var</span> triplet = (((binarray[i   &gt;&gt; <span class="number">2</span>] &gt;&gt; <span class="number">8</span> * ( i   %<span class="number">4</span>)) &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">16</span>)</span><br><span class="line">                | (((binarray[i+<span class="number">1</span> &gt;&gt; <span class="number">2</span>] &gt;&gt; <span class="number">8</span> * ((i+<span class="number">1</span>)%<span class="number">4</span>)) &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span> )</span><br><span class="line">                |  ((binarray[i+<span class="number">2</span> &gt;&gt; <span class="number">2</span>] &gt;&gt; <span class="number">8</span> * ((i+<span class="number">2</span>)%<span class="number">4</span>)) &amp; <span class="number">0xFF</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span>(i * <span class="number">8</span> + j * <span class="number">6</span> &gt; binarray.length * <span class="number">32</span>) str += b64pad;</span><br><span class="line">      <span class="keyword">else</span> str += tab.charAt((triplet &gt;&gt; <span class="number">6</span>*(<span class="number">3</span>-j)) &amp; <span class="number">0x3F</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> encrypt </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IIFE</title>
      <link href="/2018/09/02/IIFE/"/>
      <url>/2018/09/02/IIFE/</url>
      <content type="html"><![CDATA[<h1 id="增-转-译-JavaScript：立即执行函数表达式（IIFE）"><a href="#增-转-译-JavaScript：立即执行函数表达式（IIFE）" class="headerlink" title="[增][转][译]JavaScript：立即执行函数表达式（IIFE）"></a>[增][转][译]JavaScript：立即执行函数表达式（IIFE）</h1><blockquote><p>原文: <a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/#iife" target="_blank" rel="noopener">http://benalman.com/news/2010/11/immediately-invoked-function-expression/#iife</a><br>译文: <a href="https://segmentfault.com/a/1190000003985390" target="_blank" rel="noopener">https://segmentfault.com/a/1190000003985390</a> by Murphywuwu</p></blockquote><hr><a id="more"></a><p>可能你并没有注意到，我是一个对于专业术语有一点坚持细节人。所有，当我听到流行的但是还存在误解的术语“自执行匿名函数”多次时，我最终决定将我的想法写进这篇文章里。</p><p>除了提供关于这种模式事实上是如何工作的一些全面的信息，更进一步的，实际上我建议我们应该知道我们应该叫它什么。而且，如果你想跳过这里，你可以直接跳到立即调用函数表达式进行阅读，但是我建议你读完整篇文章。</p><h2 id="它是什么"><a href="#它是什么" class="headerlink" title="它是什么"></a>它是什么</h2><p>在 JavaScript 里，每个函数，当被调用时，都会创建一个新的执行上下文。因为在函数里定义的变量和函数是唯一在内部被访问的变量，而不是在外部被访问的变量，当调用函数时，函数提供的上下文提供了一个非常简单的方法创建私有变量。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(++i);</span><br><span class="line">    &#125;;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//记住：`counter`和`counter2`都有他们自己的变量 `i`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> counter = makeCounter();</span><br><span class="line">counter();<span class="comment">//1</span></span><br><span class="line">counter();<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> counter2 = makeCounter();</span><br><span class="line">counter2();<span class="comment">//1</span></span><br><span class="line">counter2();<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">i;<span class="comment">//ReferenceError: i is not defined(它只存在于makeCounter里)</span></span><br></pre></td></tr></table></figure></p><p>在许多情况下，你可能并不需要makeWhatever这样的函数返回多次累加值，并且可以只调用一次得到一个单一的值，在其他一些情况里，你甚至不需要明确的知道返回值。</p><h3 id="它的核心"><a href="#它的核心" class="headerlink" title="它的核心"></a>它的核心</h3><p>现在，无论你定义一个函数像这样function foo(){}或者var foo = function(){}，调用时，你都需要在后面加上一对圆括号，像这样foo()。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向下面这样定义的函数可以通过在函数名后加一对括号进行调用，像这样`foo()`，</span></span><br><span class="line"><span class="comment">//因为foo相对于函数表达式`function()&#123;/* code */&#125;`只是一个引用变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">/* code */</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//那这可以说明函数表达式可以通过在其后加上一对括号自己调用自己吗？</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/* code */</span>&#125;(); <span class="comment">//SyntaxError: Unexpected token (</span></span><br></pre></td></tr></table></figure></p><p>正如你所看到的，这里捕获了一个错误。当圆括号为了调用函数出现在函数后面时，无论在全局环境或者局部环境里遇到了这样的function关键字，默认的，它会将它当作是一个函数声明，而不是函数表达式，如果你不明确的告诉圆括号它是一个表达式，它会将其当作没有名字的函数声明并且抛出一个错误，因为函数声明需要一个名字。</p><p>(个人理解: 见扩展’函数声明与函数表达式’)</p><ol><li>问题1：这里我么可以思考一个问题，我们是不是也可以像这样直接调用函数<code>var foo = function(){console.log(1)}()</code>，答案是可以的。</li><li>问题2：同样的，我们还可以思考一个问题，像这样的函数声明在后面加上圆括号被直接调用，又会出现什么情况呢？请看下面的解答。</li></ol><h3 id="函数，圆括号，错误"><a href="#函数，圆括号，错误" class="headerlink" title="函数，圆括号，错误"></a>函数，圆括号，错误</h3><p>有趣的是，如果你为一个函数指定一个名字并在它后面放一对圆括号，同样的也会抛出错误，但这次是因为另外一个原因。</p><p>(个人理解: 见扩展’报错原因分析’)</p><p>当圆括号放在一个函数表达式后面指明了这是一个被调用的函数，而圆括号放在一个声明后面便意味着完全的和前面的函数声明分开了，此时圆括号只是一个简单的代表一个括号(用来控制运算优先的括号)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//然而函数声明语法上是无效的，它仍然是一个声明，紧跟着的圆括号是无效的，因为圆括号里需要包含表达式</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123; <span class="comment">/* code */</span> &#125;();<span class="comment">//SyntaxError: Unexpected token</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//现在，你把一个表达式放在圆括号里，没有抛出错误...,但是函数也并没有执行，因为：</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;<span class="comment">/* code */</span>&#125;(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//它等同于如下，一个函数声明跟着一个完全没有关系的表达式:</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;<span class="comment">/* code */</span>&#125;</span><br><span class="line">(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><h2 id="立即执行函数表达式（IIFE）"><a href="#立即执行函数表达式（IIFE）" class="headerlink" title="立即执行函数表达式（IIFE）"></a>立即执行函数表达式（IIFE）</h2><p>幸运的是，修正语法错误很简单。最流行的也最被接受的方法是将函数声明包裹在圆括号里来告诉语法分析器去表达一个函数表达式，因为在<code>Javascript</code>里，圆括号不能包含声明。因为这点，当圆括号为了包裹函数碰上了<code>function</code>关键词，它便知道将它作为一个函数表达式去解析而不是函数声明。注意理解这里的圆括号和上面的圆括号遇到函数时的表现是不一样的，也就是说。</p><ol><li><p>当圆括号出现在匿名函数的末尾想要调用函数时，它会默认将函数当成是函数声明。</p></li><li><p>当圆括号包裹函数时，它会默认将函数作为表达式去解析，而不是函数声明。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这两种模式都可以被用来立即调用一个函数表达式，利用函数的执行来创造私有变量</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">/* code */</span>&#125;());<span class="comment">//Crockford recommends this one，括号内的表达式代表函数立即调用表达式</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">/* code */</span>&#125;)();<span class="comment">//But this one works just as well，括号内的表达式代表函数表达式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Because the point of the parens or coercing operators is to disambiguate</span></span><br><span class="line"><span class="comment">// between function expressions and function declarations, they can be</span></span><br><span class="line"><span class="comment">// omitted when the parser already expects an expression (but please see the</span></span><br><span class="line"><span class="comment">// "important note" below).</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">10</span>;&#125;();</span><br><span class="line"><span class="literal">true</span> &amp;&amp; <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">/*code*/</span>&#125;();</span><br><span class="line"><span class="number">0</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果你并不关心返回值，或者让你的代码尽可能的易读，你可以通过在你的函数前面带上一个一元操作符来存储字节</span></span><br><span class="line"></span><br><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">/* code */</span>&#125;();</span><br><span class="line">~<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">/* code */</span>&#125;();</span><br><span class="line">-<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">/* code */</span>&#125;();</span><br><span class="line">+<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">/* code */</span>&#125;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Here's another variation, from @kuvos - I'm not sure of the performance</span></span><br><span class="line"><span class="comment">// implications, if any, of using the `new` keyword, but it works.</span></span><br><span class="line"><span class="comment">// http://twitter.com/kuvos/status/18209252090847232</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/* code */</span> &#125;</span><br><span class="line"><span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/* code */</span> &#125;() <span class="comment">// Only need parens if passing arguments</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="关于括号的重要笔记"><a href="#关于括号的重要笔记" class="headerlink" title="关于括号的重要笔记"></a>关于括号的重要笔记</h3><p>在一些情况下，当额外的带着歧义的括号围绕在函数表达式周围是没有必要的(因为这时候的括号已经将其作为一个表达式去表达)，但当括号用于调用函数表达式时，这仍然是一个好主意。</p><p>这样的括号指明函数表达式将会被立即调用，并且变量将会储存函数的结果，而不是函数本身。当这是一个非常长的函数表达式时，这可以节约比人阅读你代码的时间，不用滚到页面底部去看这个函数是否被调用。</p><p>作为规则，当你书写清楚明晰的代码时，有必要阻止 JavaScript 抛出错误的，同样也有必要阻止其他开发者对你抛出错误<code>WTFError</code>!</p><h3 id="保存闭包的状态"><a href="#保存闭包的状态" class="headerlink" title="保存闭包的状态"></a>保存闭包的状态</h3><p>就像当函数通过他们的名字被调用时，参数会被传递，而当函数表达式被立即调用时，参数也会被传递。一个立即调用的函数表达式可以用来锁定值并且有效的保存此时的状态，因为任何定义在一个函数内的函数都可以使用外面函数传递进来的参数和变量(这种关系被叫做闭包)。<br>(个人理解: 见扩展’关于闭包’)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 它的运行原理可能并不像你想的那样，因为`i`的值从来没有被锁定。</span></span><br><span class="line"><span class="comment">// 相反的，每个链接，当被点击时（循环已经被很好的执行完毕），因此会弹出所有元素的总数，</span></span><br><span class="line"><span class="comment">// 因为这是 `i` 此时的真实值。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> elems = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; elems.length; i++ ) &#123;</span><br><span class="line">    elems[i].addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        alert(<span class="string">'I am link #'</span> + i)</span><br><span class="line">        &#125;,<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 而像下面这样改写，便可以了，因为在IIFE里，`i`值被锁定在了`lockedInIndex`里。</span></span><br><span class="line"><span class="comment">// 在循环结束执行时，尽管`i`值的数值是所有元素的总和，但每一次函数表达式被调用时，</span></span><br><span class="line"><span class="comment">// IIFE 里的 `lockedInIndex` 值都是`i`传给它的值,所以当链接被点击时，正确的值被弹出。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> elems = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; elems.length;i++) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">lockedInIndex</span>)</span>&#123;</span><br><span class="line">        elems[i].addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">            alert(<span class="string">'I am link #'</span> + lockedInIndex);</span><br><span class="line">            &#125;,<span class="literal">false</span>)</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//你同样可以像下面这样使用IIFE，仅仅只用括号包括点击处理函数，并不包含整个`addEventListener`。</span></span><br><span class="line"><span class="comment">//无论用哪种方式，这两个例子都可以用IIFE将值锁定，不过我发现前面一个例子更可读</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> elems = <span class="built_in">document</span>.getElementsByTagName( <span class="string">'a'</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elems.length; i++ ) &#123;</span><br><span class="line">    elems[ i ].addEventListener( <span class="string">'click'</span>, (<span class="function"><span class="keyword">function</span>(<span class="params"> lockedInIndex </span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">            e.preventDefault();</span><br><span class="line">            alert( <span class="string">'I am link #'</span> + lockedInIndex );</span><br><span class="line">        &#125;;</span><br><span class="line">        &#125;)( i ),<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>记住，在这最后两个例子里，<code>lockedInIndex</code>可以没有任何问题的访问<code>i</code>,但是作为函数的参数使用一个不同的命名标识符可以使概念更加容易的被解释。</p><p>立即执行函数一个最显著的优势是就算它没有命名或者说是匿名，函数表达式也可以在没有使用标识符的情况下被立即调用，一个闭包也可以在没有当前变量污染的情况下被使用。</p><p>自执行匿名函数(“Self-executing anonymous function”)有什么问题呢？<br>你看到它已经被提到好几次了，但是它仍然不是那么清楚的被解释，我提议将术语改成”Immediately-Invoked Function Expression”，或者，IIFE，如果你喜欢缩写的话。</p><p>什么是Immediately-Invoked Function Expression呢？它使一个被立即调用的函数表达式。就像引导你去调用的函数表达式。</p><p>我想Javascript社区的成员应该可以在他们的文章里或者陈述里接受术语，Immediately-Invoked Function Expression和 IIFE，因为我感觉这样更容易让这个概念被理解，并且术语”self-executing anonymous function”真的也不够精确。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面是个自执行函数，递归的调用自己本身</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;foo();&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是一个自执行匿名函数。因为它没有标识符，它必须是使用`arguments.callee`属性来调用它自己</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">arguments</span>.callee();&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这也许算是一个自执行匿名函数，但是仅仅当`foo`标识符作为它的引用时，如果你将它换成用`foo`来调用同样可行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;foo();&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//有些人像这样叫'self-executing anonymous function'下面的函数,即使它不是自执行的，因为它并没有调用它自己。然后，它只是被立即调用了而已。</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/*code*/</span> &#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">//为函数表达式增加标识符(也就是说创造一个命名函数)对我们的调试会有很大帮助。一旦命名，函数将不再匿名。</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;<span class="comment">/* code */</span>&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">//IIFEs同样也可以自执行，尽管，也许他不是最有用的模式</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">arguments</span>.callee();&#125;())</span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;foo();&#125;())</span><br><span class="line"></span><br><span class="line"><span class="comment">// One last thing to note: this will cause an error in BlackBerry 5, because</span></span><br><span class="line"><span class="comment">// inside a named function expression, that name is undefined. Awesome, huh?</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123; foo(); &#125;());</span><br></pre></td></tr></table></figure></p><p>希望上面的例子可以让你更加清楚的知道术语’self-executing’是有一些误导的，因为他并不是执行自己的函数，尽管函数已经被执行。同样的，匿名函数也没用必要特别指出，因为，Immediately Invoked Function Expression，既可以是命名函数也可以匿名函数。</p><h2 id="最后：模块模式"><a href="#最后：模块模式" class="headerlink" title="最后：模块模式"></a>最后：模块模式</h2><p>当我调用函数表达式时，如果我不至少一次的提醒我自己关于模块模式，我便很可能会忽略它。如果你并不熟悉<code>JavaScript</code>里的模块模式，它和我下面的例子很像，但是返回值用对象代替了函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> counter = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">            i = val;</span><br><span class="line">        &#125;,</span><br><span class="line">        increment: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ++i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;());</span><br><span class="line">    counter.get();<span class="comment">//0</span></span><br><span class="line">    counter.set(<span class="number">3</span>);</span><br><span class="line">    counter.increment();<span class="comment">//4</span></span><br><span class="line">    counter.increment();<span class="comment">//5</span></span><br><span class="line"></span><br><span class="line">    conuter.i;<span class="comment">//undefined (`i` is not a property of the returned object)</span></span><br><span class="line">    i;<span class="comment">//ReferenceError: i is not defined (it only exists inside the closure)</span></span><br></pre></td></tr></table></figure></p><p>模块模式方法不仅相当的厉害而且简单。非常少的代码，你可以有效的利用与方法和属性相关的命名，在一个对象里，组织全部的模块代码即最小化了全局变量的污染也创造了使用变量。</p><h2 id="扩展补充"><a href="#扩展补充" class="headerlink" title="扩展补充"></a>扩展补充</h2><p>以下内容为我个人对原文及译文的扩展分析</p><h3 id="1-函数声明与函数表达式"><a href="#1-函数声明与函数表达式" class="headerlink" title="1. 函数声明与函数表达式"></a>1. 函数声明与函数表达式</h3><p>关于这两者的定义你可以参看MDN的说明文档:<a href="https://developer.mozilla.org/zh-CN/docs/web/JavaScript/Reference/Operators/function" target="_blank" rel="noopener">函数表达式</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function" target="_blank" rel="noopener">函数声明</a><br>共同点: 两者都可以用<code>function</code>关键字来创建一个函数，用法也很类似，例如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数表达式,这样生成的是一个具名函数,叫`bar`</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;</span><br><span class="line"><span class="comment">//或者函数表达式也可以这样写,这样生成的是一个匿名函数,`foo`只是这个匿名函数的引用</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;</span><br></pre></td></tr></table></figure></p><p>可以看出我们使用函数声明和函数表达式都可以用来创建一个实现某些功能的函数<br>不同点: </p><ol><li>从上面的例子我们可以看出函数声明只有一种写法,你必须给出函数的名字才行,如<code>foo</code>;<br>而函数表达式则有两种写法,第一种是生成命名函数叫<code>bar</code>,后一种是生成匿名函数,注意函数表达式中的<code>foo</code>并不是函数名,它只是函数的一个引用而已,代表你可以使用<code>foo</code>来间接的调用真正的函数;</li><li>函数声明存在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function#%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E6%8F%90%E5%8D%87" target="_blank" rel="noopener"><strong>提升</strong></a>,而函数表达式不存在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function#%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E6%8F%90%E5%8D%87" target="_blank" rel="noopener"><strong>提升</strong></a>,这意味着如果你是用函数声明的方法创建一个函数,那么你可以在定义这个函数之前就去使用它;但是如果你是用函数表达式的方法来创建一个函数,那么你就必须要在函数被创建了以后才可以去使用这个函数,例如:  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// ƒ foo()&#123;console.log(1)&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;</span><br><span class="line"></span><br><span class="line">consol.log(foo2); <span class="comment">// Uncaught ReferenceError: consol is not defined</span></span><br><span class="line"><span class="keyword">var</span> foo2 = <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;</span><br></pre></td></tr></table></figure></li></ol><p>你也可以参考<a href="https://github.com/Wscats/Good-text-Share/issues/73" target="_blank" rel="noopener">这里</a>给出的例子</p><ol start="3"><li>额外的一点是我们经常使用函数表达式的方式来创建匿名函数,进而创建IIFE,这一点就跟本文主要内容联系起来了;</li><li>还有一个区别是<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function#%E6%9C%89%E6%9D%A1%E4%BB%B6%E7%9A%84%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">有条件的创建函数</a>,当函数声明出现在非功能模块（比如 if）中时,虽然官方是禁止这样做的,但是实际上浏览器都支持这种做法,但是各个浏览器的处理方式有不同,这一点兼容性问题实在很头疼,所以我们不应该在生成环境代码中使用这种方式，应该使用函数表达式来代替。</li></ol><h3 id="2-报错原因"><a href="#2-报错原因" class="headerlink" title="2. 报错原因"></a>2. 报错原因</h3><p><code>function (){console.log(1)}()</code>报错出现在第一个括号，因为声明一个函数需要名字，这里声明没有给出名字，所以直接报错，走不到第二个括号，但是<code>function foo(){console.log(1)}()</code>报错出现在第二括号，因为这里声明函数是正确的，当处理到第二个括号时，发现第二个括号内没有任何东西，这是不允许的,所以报错,理由参见文章中注释处</p><h3 id="3-关于闭包"><a href="#3-关于闭包" class="headerlink" title="3. 关于闭包"></a>3. 关于闭包</h3><p>在ES6之前只存在两种作用域,一是全局作用域,此作用域当浏览器打开一个页面时就会被创建,你可以通过<code>window</code>对象来访问这个全局作用域中的成员,另外一个就是函数作用域,当js引擎执行一个函数时就会为这个函数创建一个属于该函数的作用域,(在ES6中引入了新的作用域:块级作用域,使用<code>let</code>标识符来生成一个只在块级范围内可访问的变量,关于<code>let</code>的特性你可以参见这里<a href="http://es6.ruanyifeng.com/#docs/let" target="_blank" rel="noopener">ECMAScript 6 入门</a>).<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(++i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> logger = foo();</span><br><span class="line">logger(); <span class="comment">// 2</span></span><br><span class="line">logger(); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p><p>理解闭包必须先理解js的函数作用域,之前说过了每次执行一个函数时就会为这个函数创建一个属于它自己的函数作用域,一旦这个函数运行完毕,那么它的作用域就会被销毁,其中的保存的信息一般也会被销毁,但是,这是一般的情况,那么什么是不一般的情况呢?  </p><p>这时我们就要利用浏览器销毁变量及作用域的特性来搞事了,浏览器的<a href="https://blog.csdn.net/liwenfei123/article/details/77962820" target="_blank" rel="noopener">垃圾回收机制</a>(有两种垃圾回收机制,这里以最常用的标记清除法为例)会定时的检查变量是否被引用,也就是是否有指针指向该数据的存储区域,如果有,那么说明有人可能要使用该数据,则不能销毁该区域,如果没有,说明没人再能够访问这个数据了,那么就可以放心的去销毁该区域来回收内存.  </p><p>而闭包正好利用了这个特性,例如上面的例子中,函数<code>foo</code>每次执行时会返回一个新函数叫做<code>log</code>,<code>log</code>函数内部需要访问它外面的变量<code>i</code>才能正常工作,返回的新函数被赋给了变量<code>logger</code>,那么这里的指向关系是<code>logger</code> -&gt; <code>log</code> -&gt; <code>i</code>,那么在之后的js执行过程中,由于外部的变量<code>logger</code>通过一系列的指向,最终时能够访问的最开始的那个变量<code>i</code>的,那么按照垃圾回收机制,函数<code>foo</code>的作用域将一直不能够被销毁,因为它内部的变量<code>i</code>还有人用着呢!并且我们发现类似<code>i</code>这样的变量能够保存很重要的一些信息,比如函数被调用的次数等等,我们就可以用来计数或者其它你能发挥创造力的用途.  </p><p>关于缺点的话也是很明显的,因为闭包内的变量一直将被保留着,如果我们创建大量这样的变量或者大量的闭包,那么浏览器可用内存就会越来越小造成卡顿,应该考虑情况适当使用.</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ssh-git</title>
      <link href="/2018/08/30/ssh-git/"/>
      <url>/2018/08/30/ssh-git/</url>
      <content type="html"><![CDATA[<h1 id="github的https和ssh连接方式探究"><a href="#github的https和ssh连接方式探究" class="headerlink" title="github的https和ssh连接方式探究"></a>github的https和ssh连接方式探究</h1><p>在本机连接github仓库提交代码时有两种可选方法，一种是使用github账号的用户名和密码的认证方式通过https连接，另一种是使用ssh-key的认证方式通过ssh连接，本文主要研究这两种方式的工作过程以及可能会扩展探究一些相关的知识。<br><a id="more"></a></p><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><p>1995年芬兰赫尔辛基理工大学的塔图·于勒宁编写了<code>secure shell</code>, 简称<code>SSH</code>, 在这之前已经有不安全的<code>shell</code>, 但是<code>SSH</code>的提出保证了在非安全网络中可以加密完整可靠的传输数据, 要注意的是<code>SSH</code>只是一种通信协议, 存在则多种实现, 下面使用的是其中应用最广泛其中之一的开源实现<code>OpenSSH</code>.<br><code>SSH</code>基于公钥和私钥形式的<code>非对称加密</code>实现身份验证, 其默认的通信端口是22, 在登录验证时有两种方式: 1.密码认证;2.公钥认证.</p><ol><li>密码认证<br>1.用户使用<code>SSH</code>向远程主机发起连接请求; 2.远程主机收到请求后把自己的公钥发给用户; 3.用户使用公钥对自己的登录密码进行加密, 然后发送给远程主机; 4.远程主机使用自己的密钥对发来的加密信息进行解密, 然后验证解密出来的用户密码是否正确, 如果密码正确则允许用户连接, 登录成功, 然后用户会把远程主机的公钥加入到自己本地的<code>$HOME/.ssh/known_hosts</code>中.<br>仔细分析这个过程我们会发现一个漏洞, 假如我是个黑客, 我出现在了用户和服务器中间的位置, 当在上面第二步的过程时我把我自己的公钥发送给用户, 然后用户就会用我的公钥加密他的密码然后发送给我, 这样我再用我的私钥来解密消息, 就可以获得用户的明文密码了, 这其实就是著名的<code>中间人攻击Main-in-the-middle attack(MITM)</code>. 如何应对<code>中间人攻击</code>可以参加下面.</li><li>密钥认证<br>密钥认证比密码认证安全一些, 因为不涉及用户密码的传输过程. 过程大致如下: 1.用户生成自己的一对公钥和密钥, 然后将公钥存储在远程主机上; 2.用户登录的时候向远程主机发送用私钥签名的包含用户名和公钥等信息; 2.远程主机收到请求后检查自己的<code>$HOME/.ssh/authorized_keys</code>中是否有用户发送的消息中的公钥信息, 如果有则证明该消息的公钥信息合法, 然后就会使用该公钥解密消息.</li><li>中间人攻击<br>那么<code>SSH</code>如何应对之前提到的<code>中间人攻击</code>呢?<br>在我们第一次连接一个远程主机例如<code>ssh user@host</code>连接时, 我们会收到如下提示信息:<blockquote><p>The authenticity of host ‘host (12.18.429.21)’ can’t be established.<br>　　 RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.<br>　　 Are you sure you want to continue connecting (yes/no)?<br>这就是在提示我们是第一次连接这个主机, 然后消息里面给出了这个主机的公钥的md5摘要信息<code>98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d</code>, 我们可以通过确认这个摘要值是不是我们想要连接的主机的, 如果是就输入<code>yes</code>回车确认连接, 并且会自动把这个主机加入到我们的本地<code>known hosts</code>（已知主机）名单里面, 以后都不再提示.<br>因为<code>中间人攻击</code>核心就是使用假的公钥来替代真正的远程主机的公钥, 那么可以通过如下两种解决方案来应对: </p><ol><li>远程主机把自己的公钥拿到CA处做认证，申请一个数字证书<br>有关数字证书和数字签名的区别可以查看<a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html" target="_blank" rel="noopener">这里</a>, 以后只要确认这个证书是正规可信的, 那就可以对应的信任该公钥</li><li>远程主机把自己公钥的指纹信息公布出来, 让大家自己来查看对比<br>比如放在自己的网站上面供想要连接的人执行对比查阅<br>通过上面两种做法都可以是的用户确认自己当前加密信息所使用的公钥确定是正确的远程主机的公钥, 而不是<code>中间人</code>的公钥<br>关于<code>SSH</code>, 你也可以参考<a href="http://blog.51cto.com/zhaochj/1602279" target="_blank" rel="noopener">这里</a>或者<a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="noopener">阮一峰的博客</a></li></ol></blockquote></li></ol><h2 id="git的两种通信协议"><a href="#git的两种通信协议" class="headerlink" title="git的两种通信协议"></a>git的两种通信协议</h2><p>实际上git可以使用四种通信协议:<code>本地传输</code>，<code>SSH协议</code>，<code>Git协议</code>和<code>HTTP/S协议</code>, 我们这里只讨论其中的<code>SSH协议</code>和<code>HTTP/S协议</code>.<br>使用中最明显的区别是<code>SSH协议</code>只能操作我们有管理权限的项目, 但是<code>HTTP/S协议</code>允许我们clone没有管理权限的项目(不能修改, 只能clone查看).<br>一般我们使用<code>SSH协议</code>比较多, 因为服务器一般是<code>linux</code>系统的, 它内置了<code>SSH</code>, 使用方便, 而且<code>SSH</code>也更安全.</p><ol><li>首先在本机下载安装<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a>，一路点next默认安装即可;</li><li><p>配置个人信息<br>使用git提交更改的时候会为本次提交附上提交人的一些信息，比如提交人的用户名及邮箱信息，我们可以使用git提供的配置功能来提前配置好这些信息，使用如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"John Doe"</span></span><br><span class="line">git config --global user.email <span class="string">"johndoe@example.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说明：</span></span><br><span class="line"><span class="comment"># git config: 表示使用git的配置工具</span></span><br><span class="line"><span class="comment"># --global: 表示配置全局的信息，你也可以在某个项目下面单独配置这个信息，只需要去掉'--global'即可，</span></span><br><span class="line"><span class="comment"># &lt;- 这样不同的项目就会有不同提交人信息</span></span><br><span class="line"><span class="comment"># user.name / user.email: 后面跟上你自己的用户名和邮箱信息即可</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 之后我们可以使用如下命令来查看我们配置的信息</span></span><br><span class="line"><span class="comment">#git config user.name</span></span><br><span class="line"><span class="comment">#git config user.email</span></span><br></pre></td></tr></table></figure></li><li><p>按照下面步骤尝试clone一个github上的项目到本地</p></li></ol><h3 id="使用https协议"><a href="#使用https协议" class="headerlink" title="使用https协议"></a>使用https协议</h3><p>以我的博客所使用<a href="https://github.com/stkevintan/hexo-theme-material-flow" target="_blank" rel="noopener">hexo的materialFlow主题项目</a>为例(这个项目我没有管理权限)，一行命令<code>git clone https://github.com/stkevintan/hexo-theme-material-flow.git</code>即可clone到本地, 因为这个项目我没有权限, 如果我是用<code>SSH协议</code>方式那么就会报错, 见下面.<br>在修改了代码以后想要提交<code>git push</code>的时候会提示我们输入用户名和密码, 这里就涉及到新版<code>智能HTTP/S协议</code>(Git1.6.6之后引入), 你可参考<a href="https://blog.csdn.net/JNingWei/article/details/78905712" target="_blank" rel="noopener">这里</a>, 在弹出的一个窗口输入用户名和密码, 之后你再提交的时候不会要求输入用户名和密码, 如果你使用的时候不是这样(Git版本太低或者服务器不支持<code>智能HTTP/S协议</code>), 那么可以参考<a href="https://www.jianshu.com/p/b5ec092fc1d1" target="_blank" rel="noopener">这里</a>配置<code>https</code>协议下的认证, 这样就不用每次提交的时候都要求输入用户名和密码.</p><h3 id="使用ssh协议"><a href="#使用ssh协议" class="headerlink" title="使用ssh协议"></a>使用ssh协议</h3><p>此时你就无法直接使用<code>git clone git@github.com:stkevintan/hexo-theme-material-flow.git</code>命令来clone上面那个项目到本地，会产生如下错误提示：</p><blockquote><p>fatal: Could not read from remote repository.<br>Please make sure you have the correct access rights and the repository exists.</p></blockquote><p>因为ssh的方式是需要进行认证的，你必须是这个项目的所有者或者管理者，才能有权限去使用ssh方式clone该项目，而上面的https方式则允许任何一个人在不需要验证的情况下去clone项目.</p><p><strong>那么接下来看一下对于一个我们有管理权限的仓库应该如何使用ssh方式去clone到本地</strong></p><p>ssh方式是基于不对称性加密来通信的，你需要使用不对称性算法来生成一对密钥，然后将私钥放置在你本机上，将公钥放置在github服务器上，之后在进行ssh通信时将会使用这对秘钥来完成认证登陆及加密和解密信息，<br>在window上和mac上我们都可以使用<code>ssh-keygen</code>这个命令行工具来生成我们需要的密钥，这是我们想要使用ssh通信的第一步</p><ol><li>生成一对密钥<br>打开你的命令行（window下使用<code>cmd.exe</code>，mac下使用<code>terminal.app</code>），然后按照如下命令来生成密钥<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></span><br><span class="line"><span class="comment"># 参数说明：  </span></span><br><span class="line"><span class="comment"># ssh-keygen: 表示将要使用ssh-keygen这个工具来生成密钥</span></span><br><span class="line"><span class="comment"># -t: 指定要生成的密钥类型，有rsa1(SSH1),dsa(SSH2),ecdsa(SSH2),rsa(SSH2)等类型，较为常用的是rsa类型，此处指定为rsa类型</span></span><br><span class="line"><span class="comment"># -b: 指定要生成的密钥长度 (单位:bit)，对于RSA类型的密钥，最小长度768bits,默认长度为2048bits。DSA密钥必须是1024bits，此处指定为4096bits</span></span><br><span class="line"><span class="comment"># -C: 制定要生成的密钥的注释，这个可以自己随意填写，就相当于给这个密钥留个名，好分辨，比如此处可以用注册github的邮箱号</span></span><br></pre></td></tr></table></figure></li></ol><p>之后会出现如下提示内容：</p><blockquote><p>Generating public/private rsa key pair.<br>Enter file in which to save the key (C:/Users/xxxxx/.ssh/id_rsa):</p></blockquote><p>意思是让你输入这个密钥文件的文件名，一般情况保存默认就可以，直接回车确认。<br>(如果你有多个git的账号需要配置，比如你自己在github上有账号需要提交代码，同时自己在公司也有git的账号，有时候需要提交代码到公司的仓库里，那么这时候你就需要额外的配置来保证提交的时候不会冲突，<a href="#多git账户配置">详见下面</a>)<br>然后会出现下一个提示内容：</p><blockquote><p>Enter passphrase (empty for no passphrase):</p></blockquote><p>意思是要不要对私钥设置口令（passphrase），如果担心私钥的安全，你可以设置一个，这里一般不设置，直接回车确认即可，最后会出现类似如下的提示内容：</p><blockquote><p>+—[RSA 4096]—-+<br>| o+o     ..  .o  |<br>| oo… o … =   |<br>|+ +.+ o.o.o.+ o  |<br>|oB =.o..E.o* o   |<br>|o = o.o Soo+=    |<br>|   . o .+++ .    |<br>|       o.o       |<br>|      ..         |<br>|      ..         |<br>+—-[SHA256]—–+  </p></blockquote><p>那么恭喜你，你已经生成了一对密钥文件，他们存储在<code>C:/Users/xxxxx/.ssh/</code>（windows）或者<code>~/.ssh</code>（mac）目录下，默认的文件是id_rsa（私钥文件名）和id_rsa.pub（公钥文件名），你可以去打开查看一下里面的内容。</p><ol start="2"><li>部署密钥<br>之前说过了你需要将私钥保存在本机，公钥放置在服务器上，这样之后才能用这对密钥建立ssh通信，那么在github上我们按照如下做法来部署密钥<ol><li>用文本编辑器打开刚才生成的公钥文件id_rsa.pub，拷贝里面的全部内容；</li><li>打开浏览器登陆你的github账户，依次打开你头像上的Settings &gt; SSH and GPG keys &gt; New SSH key;</li><li>填写相关信息，<strong>title</strong>可以类似之前生成密钥时填写的注释信息那样填写你的邮箱名，然后<strong>key</strong>里面填上刚才拷贝的公钥内容，点击<strong>Add SSH key</strong>之后输入一次你的github账户密码进行确认，然后你的公钥就被保存部署到github服务器上了；</li></ol></li><li>测试连接，使用如下命令来测试是否能够通过ssh连接到github<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh git@github.com</span><br><span class="line"><span class="comment"># 参数说明：</span></span><br><span class="line"><span class="comment"># ssh: 使用ssh进行连接</span></span><br><span class="line"><span class="comment"># git@github.com: ssh连接时需要指定登陆用户名和远程主机名，这里的git就是github的远程服务器的用户名，github.com就是远程服务器的主机名，用'@'符号连接起来</span></span><br></pre></td></tr></table></figure></li></ol><p>当你是第一次连接的时候会提示你如下信息：</p><blockquote><p>The authenticity of host ‘github.com (52.74.223.119)’ can’t be established.<br>RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.<br>Are you sure you want to continue connecting (yes/no)?  </p></blockquote><p>这是因为你是第一次连接该主机，该主机不在你本机的<code>known hosts</code>（已知主机）名单里面，所以询问你是否要继续连接这个陌生的主机，输入<code>yes</code>然后回车确认即可，之后再次连接的时候就不会有这个提示信息了。这里提示信息中的<code>RSA key fingerprint</code>代表的是公钥的md5摘要值, 因为<code>RSA</code>算法生成的公钥长度很长(一般为1024位或者2018位, 可以自己在生成时指定), 这里就用了对公钥进行摘要后的比较短的值来代表公钥.<br>如果你配置步骤没问题的话应该可以看到下面的连接上之后的欢迎信息(xxxxx代表你的github的账户名)：</p><blockquote><p>Warning: Permanently added ‘github.com,52.74.223.119’ (RSA) to the list of known hosts.<br>PTY allocation request failed on channel 0<br>Hi xxxxx! You’ve successfully authenticated, but GitHub does not provide shell access.<br>Connection to github.com closed. </p></blockquote><ol start="4"><li>使用ssh方式clone项目<br>之前说过了ssh方式只能操作我们有管理权限的项目，所以这里我拿自己做的一个<a href="https://github.com/kricsleo/vehicleKeyboard" target="_blank" rel="noopener">微信小程序的虚拟车牌键盘</a>的项目为例<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:kricsleo/vehicleKeyboard.git</span><br></pre></td></tr></table></figure></li></ol><p>这个时候我们就能顺利clone该项目到本机了，因为在我们上面这条命令请求数据的过程中，我们本机和github的服务器会使用我们之前生成的那对密钥来进行相互认证，从而使我们不需要手动输入github的账户名和密码信息来完成认证登陆，同时我们以后修改了项目代码在进行提交的时候也可直接进行提交等相关操作，无需再考虑登陆及连接的问题，git的使用可以参考我之前的一篇<a href="http://kricsleo.com/2018/08/22/git-workflow/" target="_blank" rel="noopener">小总结</a></p><p>关于git使用https和ssh方式的区别你也可以查看<a href="https://blog.cuiyongjian.com/engineering/git-https-ssh/" target="_blank" rel="noopener">这里</a></p><h2 id="多git账户配置"><a href="#多git账户配置" class="headerlink" title="多git账户配置"></a>多git账户配置</h2><p>如果你需要生成多对密钥，比如你需要和两个不一样的服务器A和B进行ssh通信，那么这个时候你就可以生成两对密钥，一对用来和A通信，另一对用来和B通信，最常见的情况就是我们自己在github上面会有自己的github账户，自己平时会开发一些自己的项目，然后提交到github上面，在公司里面公司一般会有自己的gitlab服务器，然后给员工开通一个gitlab的账号，有关公司内部的项目就会让员工用gitlab的账户进行开发，然后提交代码到公司的gitlab上面，那么这时候我们可以按照如下的方法来配置一下，保证自己随时提交代码的时候都是能够提交到正确的地方，而不会混乱。</p><ol><li>再生成一对密钥<br>在上面的操作中你已经生成了一对密钥，名字叫做<code>id_rsa</code>和<code>id_rsa.pub</code>（如果你没有改名的话），这个密钥我们已经拿来和github进行通信了，此时我们要想和公司的gitlab通信就需要再生成一对密钥，为了避免这次生成的密钥覆盖我们之前的那对密钥，可以执行如下命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"youremail@yourcompany.com” -f ~/.ssh/id_rsa_xx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 参数说明</span></span><br><span class="line"><span class="string"># 这次我们生成密钥的命令只比之前多了一个参数： -f</span></span><br><span class="line"><span class="string"># -f: 表示将这次什么的密钥文件保存为id_rsa_xx，同样放在了之前的那个文件夹，这个文件名你可以自己随意指定，不过最好容易区分一些</span></span><br></pre></td></tr></table></figure></li></ol><p>后面你的操作就和之前生成密钥一样了，生成好密钥之后再看下一步</p><ol start="2"><li>部署新生成的密钥<br>和之前部署github密钥的步骤类似，你登录你公司的gitlab，找到添加<code>ssh-key</code>的地方，然后拷贝新生成的公钥id_rsa_xx.pub文件内容到gitlab里面去并且保存，这样你公司的gitlab服务器上的公钥信息就配置好了</li><li><p>新建配置文件<br>因为现在我们本机上有了两对密钥，提交代码到github时需要使用之前生成的那一对，提交代码到公司的gitlab上需要我们现在刚刚生成的这一对，那么我们就要写一个简单的配置文件来告诉git该如何再提交代码时选择正确的密钥，实际上就是编写SSH的用户配置文件config。<br>在目录<code>~/.ssh</code>(mac环境)或者<code>C:/Users/xxxxx/.ssh/</code>下新建文件<code>config</code>，注意<strong>没有后缀名</strong>的，然后在里面填写上如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#github</span></span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment">#yourcompany</span></span><br><span class="line">Host git.XXXXX.com</span><br><span class="line">    HostName git.XXXXX.com</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_XX</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说明，此段内容不用拷贝，是为了加以说明</span></span><br><span class="line"><span class="comment"># Host: 别名，为了方便记忆和区分，可以任意填写</span></span><br><span class="line"><span class="comment"># HostName： 主机名 服务器的主机名，也可以是服务器的ip地址，需要准确填写</span></span><br><span class="line"><span class="comment"># User： 用户名，ssh登录服务器时的用户名，一般是git</span></span><br><span class="line"><span class="comment"># IdentityFile： 密钥文件的路径，填写上你要用来和这个服务器通信使用的密钥文件的路径</span></span><br><span class="line"><span class="comment"># PreferredAuthentications： 强制使用Public Key验证，我这里没有要求这个，你也可以加上</span></span><br></pre></td></tr></table></figure></li><li><p>测试连接<br>使用如下命令来分别测试能否连接到对应的服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试连接公司</span></span><br><span class="line">ssh git@git.XXXXX.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试连接github</span></span><br><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure></li></ol><p>如果能分别看到对应的欢迎信息，那么恭喜你配置正确了。</p><ol start="5"><li>配置个人信息<br>这次我们因为有不同的项目，提交时需要附加上的个人信息也不一样，你提交github时会用你自己的github账户名和邮箱信息，但是提交公司的gitlab时会使用公司给你的账户名和公司个人邮箱，那么我们就需要到具体的项目下面执行如下的命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config user.name <span class="string">"yourname"</span></span><br><span class="line">git config user.email <span class="string">"youremail@XXXXX.com"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line"><span class="comment"># 与之前我们执行的那条配置个人信息命令相比，只是少了个'--global'参数，因为我们现在不是在全局配置，而是在个别项目中单独配置</span></span><br></pre></td></tr></table></figure></li></ol><p>到这里为止，你的多git账户依旧配置完毕了，后面就可以和平常一样使用git来提交代码了，ssh会为你选择正确的密钥来和服务器认证和通信。</p>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>markdown</title>
      <link href="/2018/08/23/markdown/"/>
      <url>/2018/08/23/markdown/</url>
      <content type="html"><![CDATA[<h1 id="markdown语法整理"><a href="#markdown语法整理" class="headerlink" title="markdown语法整理"></a>markdown语法整理</h1><p>经常使用markdown来做笔记，这里把现在常用的语法先记录一下，万一老年人了记忆不好，也可以查一查<br><a id="more"></a></p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># h1</span></span><br><span class="line">......</span><br><span class="line"><span class="section">###### h6</span></span><br><span class="line"></span><br><span class="line">分隔符</span><br><span class="line">最少三个---或<span class="emphasis">***</span></span><br></pre></td></tr></table></figure><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(部分markdown软件不支持)</span><br><span class="line">[TOC]</span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; quote(每行最后添加两个空格即表示换行)  </span></span><br><span class="line">quote  </span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; quote(或者采取每行前面都添加引用标志)</span></span><br><span class="line"><span class="quote">&gt; quote</span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; quote(多行嵌套引用)</span></span><br><span class="line">&gt;&gt; quote2</span><br><span class="line">&gt;&gt;&gt; quote3</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">行内代码<span class="code">`code`</span>行内代码</span><br><span class="line"></span><br><span class="line">多行代码，[<span class="string">支持高亮语言</span>](<span class="link">https://blog.csdn.net/qq_32126633/article/details/78838494#language_key</span>)</span><br></pre></td></tr></table></figure><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">个人博客</span>](<span class="link">https://kricsleo.github.io/ 'krics的个人博客'</span>)</span><br><span class="line">或者</span><br><span class="line">[<span class="symbol">blog</span>]: <span class="link">https://kricsleo.github.io/ 'krics的个人博客'</span></span><br><span class="line">[<span class="string">个人博客</span>][<span class="symbol">blog</span>]</span><br></pre></td></tr></table></figure><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">个人头像</span>](<span class="link">https://kricsleo.github.io/images/avatar.jpg 'krics的个人头像'</span>)</span><br><span class="line">或者</span><br><span class="line">[<span class="symbol">avatar</span>]: <span class="link">https://kricsleo.github.io/images/avatar.jpg 'krics的个人头像'</span></span><br><span class="line">![<span class="string">个人头像</span>][<span class="symbol">avatar</span>]</span><br><span class="line">图片带链接</span><br><span class="line">[<span class="string">![个人头像</span>](<span class="link">https://kricsleo.github.io/images/avatar.jpg 'krics的个人头像'</span>)](<span class="link">https://kricsleo.github.io/images/avatar.jpg</span>)</span><br></pre></td></tr></table></figure><h2 id="序表"><a href="#序表" class="headerlink" title="序表"></a>序表</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">有序节点</span><br><span class="line"><span class="bullet">1. </span>节点1</span><br><span class="line"><span class="code">    1. 节点1.1</span></span><br><span class="line"><span class="bullet">2. </span>节点2</span><br><span class="line">无序节点</span><br><span class="line"><span class="bullet">- </span>节点$</span><br><span class="line"><span class="code">    - 节点$.^</span></span><br><span class="line"><span class="bullet">- </span>节点#</span><br><span class="line"><span class="code">    - 节点#.&amp;</span></span><br></pre></td></tr></table></figure><h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>[ ] 未完成</span><br><span class="line"><span class="bullet">- </span>[x] 已完成</span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 附上[在线生成表格工具](http://www.tablesgenerator.com/markdown_tables)</span></span><br><span class="line">|    a    |       b       |      c     |</span><br><span class="line">|:-------:|:------------- | ----------:|</span><br><span class="line">|   居中   |      左对齐    |    右对齐   |</span><br></pre></td></tr></table></figure><h2 id="语义性"><a href="#语义性" class="headerlink" title="语义性"></a>语义性</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*斜体*</span> or <span class="xml"><span class="tag">&lt;<span class="name">i</span>&gt;</span></span>斜体<span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="strong">**加粗**</span> or <span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>加粗<span class="xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line"><span class="strong">***斜体加粗**</span>* or <span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span></span>强调<span class="xml"><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span></span><br><span class="line">~~删除线~~</span><br><span class="line">上标<span class="xml"><span class="tag">&lt;<span class="name">sup</span>&gt;</span></span>u<span class="xml"><span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span></span><br><span class="line">下标<span class="xml"><span class="tag">&lt;<span class="name">sub</span>&gt;</span></span>d<span class="xml"><span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span></span><br><span class="line">键盘按键<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="格式化显示"><a href="#格式化显示" class="headerlink" title="格式化显示"></a>格式化显示</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span></span><br><span class="line"><span class="code">    ...</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><ul><li style="list-style: none"><input type="checkbox"> 目前还不常用，之后补齐  <h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Markdown[^1]</span><br><span class="line">在页面底端注解</span><br><span class="line">[<span class="symbol">^1</span>]: <span class="link">Markdown是一种纯文本标记语言</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="定义型列表"><a href="#定义型列表" class="headerlink" title="定义型列表"></a>定义型列表</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Markdown</span><br><span class="line">:   Markdown是一种纯文本标记语言  (冒号后跟一个'Tab'或者四个空格)</span><br></pre></td></tr></table></figure><h2 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">xxx@163.com</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>markdown的代码绘制流程图个人感觉比较复杂，个人使用的在线绘制工具<a href="https://www.processon.com/diagrams" target="_blank" rel="noopener">ProcessOn</a></p>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git-workflow</title>
      <link href="/2018/08/22/git-workflow/"/>
      <url>/2018/08/22/git-workflow/</url>
      <content type="html"><![CDATA[<h3 id="git的日常使用流程记录"><a href="#git的日常使用流程记录" class="headerlink" title="git的日常使用流程记录"></a>git的日常使用流程记录</h3><p>内容参考于阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2015/08/git-use-process.html" target="_blank" rel="noopener">Git使用规范流程</a>，记录一下git的日常使用流程。<br><a id="more"></a><br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015080501.png" alt="常用流程图"></p><h4 id="1-新建分支"><a href="#1-新建分支" class="headerlink" title="1. 新建分支"></a>1. 新建分支</h4><p>开发新功能时都应该新建一个分支，在分支上开发，当功能开发完成时再合并到主分支，并销毁新建的分支。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git checkout——检出，是我们的常用命令。最为常用的两种情形是创建分支和切换分支</span></span><br><span class="line"><span class="comment"># 先切换到主分支，获取最新代码</span></span><br><span class="line">git checkout master</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后新建分支，在这个分支上进行新功能开发</span></span><br><span class="line">git checkout -b myfeature</span><br></pre></td></tr></table></figure></p><h4 id="2-提交分支"><a href="#2-提交分支" class="headerlink" title="2. 提交分支"></a>2. 提交分支</h4><p>新功能开发完成以后提交代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认保存所有改动 --all</span></span><br><span class="line">git add</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看发生改动的地方</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交改动，也可以跟上 --verbose，然后就可以列出diff比较的结果，并且附上本次提交信息</span></span><br><span class="line">git commit</span><br></pre></td></tr></table></figure></p><h4 id="3-同步代码"><a href="#3-同步代码" class="headerlink" title="3. 同步代码"></a>3. 同步代码</h4><p>开发过程中可以经常同步主分支的最新代码，保证一直在最新的基础上进行开发<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git fetch 表示取回最新代码</span></span><br><span class="line">git fetch origin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将有更新的代码与当前分支合并</span></span><br><span class="line"><span class="comment"># 所取回的更新，在本地主机上要用"远程主机名/分支名"的形式读取。比如origin主机的master，就要用origin/master读取。</span></span><br><span class="line">git merge origin/masterdfdf</span><br></pre></td></tr></table></figure></p><h4 id="4-合并多个commit"><a href="#4-合并多个commit" class="headerlink" title="4. 合并多个commit"></a>4. 合并多个commit</h4><p>新功能开发过程中一般会多次commit，但是在功能开发完成以后需要合并到主干时，一般把之前的commit合并成一个或几个关键的commit<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git rebase命令的i参数表示互动（interactive），具体如何合并请参见原文</span></span><br><span class="line">git rebase -i origin/master</span><br></pre></td></tr></table></figure></p><h4 id="5-推送到远程仓库"><a href="#5-推送到远程仓库" class="headerlink" title="5. 推送到远程仓库"></a>5. 推送到远程仓库</h4><p>多个commit经过合理的处理以后就可以把当前分支推送到远程仓库了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git push命令要加上force参数，因为rebase以后，分支历史改变了，跟远程分支不一定兼容，有可能要强行推送</span></span><br><span class="line">git push --force master myfeature</span><br></pre></td></tr></table></figure></p><h4 id="6-发出Pull-Request"><a href="#6-发出Pull-Request" class="headerlink" title="6. 发出Pull Request"></a>6. 发出Pull Request</h4><p>提交到远程仓库以后，就可以发出 Pull Request 到master分支，然后请求别人进行代码review，确认可以合并到master。</p><p>参考文档: <a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/06/git_remote.html</a></p><p>(end)</p>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
