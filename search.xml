<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>git-workflow</title>
      <link href="/2018/08/22/git-workflow/"/>
      <url>/2018/08/22/git-workflow/</url>
      <content type="html"><![CDATA[<h3 id="git的日常使用流程记录"><a href="#git的日常使用流程记录" class="headerlink" title="git的日常使用流程记录"></a>git的日常使用流程记录</h3><p>内容参考于阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2015/08/git-use-process.html" target="_blank" rel="noopener">Git使用规范流程</a>，记录一下git的日常使用流程。<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015080501.png" alt="常用流程图"></p><h4 id="1-新建分支"><a href="#1-新建分支" class="headerlink" title="1. 新建分支"></a>1. 新建分支</h4><p>开发新功能时都应该新建一个分支，在分支上开发，当功能开发完成时再合并到主分支，并销毁新建的分支。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git checkout——检出，是我们的常用命令。最为常用的两种情形是创建分支和切换分支</span></span><br><span class="line"><span class="comment"># 先切换到主分支，获取最新代码</span></span><br><span class="line">git checkout master</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后新建分支，在这个分支上进行新功能开发</span></span><br><span class="line">git checkout -b myfeature</span><br></pre></td></tr></table></figure></p><h4 id="2-提交分支"><a href="#2-提交分支" class="headerlink" title="2. 提交分支"></a>2. 提交分支</h4><p>新功能开发完成以后提交代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认保存所有改动 --all</span></span><br><span class="line">git add</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看发生改动的地方</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交改动，也可以跟上 --verbose，然后就可以列出diff比较的结果，并且附上本次提交信息</span></span><br><span class="line">git commit</span><br></pre></td></tr></table></figure></p><h4 id="3-同步代码"><a href="#3-同步代码" class="headerlink" title="3. 同步代码"></a>3. 同步代码</h4><p>开发过程中可以经常同步主分支的最新代码，保证一直在最新的基础上进行开发<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git fetch 表示取回最新代码</span></span><br><span class="line">git fetch origin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将有更新的代码与当前分支合并</span></span><br><span class="line"><span class="comment"># 所取回的更新，在本地主机上要用"远程主机名/分支名"的形式读取。比如origin主机的master，就要用origin/master读取。</span></span><br><span class="line"><span class="comment"># 或者使用： git merge origin/master</span></span><br><span class="line">git rebase origin/master</span><br></pre></td></tr></table></figure></p><h4 id="4-合并多个commit"><a href="#4-合并多个commit" class="headerlink" title="4. 合并多个commit"></a>4. 合并多个commit</h4><p>新功能开发过程中一般会多次commit，但是在功能开发完成以后需要合并到主干时，一般把之前的commit合并成一个或几个关键的commit<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git rebase命令的i参数表示互动（interactive），具体如何合并请参见原文</span></span><br><span class="line">git rebase -i origin/master</span><br></pre></td></tr></table></figure></p><h4 id="5-推送到远程仓库"><a href="#5-推送到远程仓库" class="headerlink" title="5. 推送到远程仓库"></a>5. 推送到远程仓库</h4><p>多个commit经过合理的处理以后就可以把当前分支推送到远程仓库了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git push命令要加上force参数，因为rebase以后，分支历史改变了，跟远程分支不一定兼容，有可能要强行推送</span></span><br><span class="line">git push --force master myfeature</span><br></pre></td></tr></table></figure></p><h4 id="6-发出Pull-Request"><a href="#6-发出Pull-Request" class="headerlink" title="6. 发出Pull Request"></a>6. 发出Pull Request</h4><p>提交到远程仓库以后，就可以发出 Pull Request 到master分支，然后请求别人进行代码review，确认可以合并到master。</p><p>(end)</p>]]></content>
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/08/22/hello-world/"/>
      <url>/2018/08/22/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
