<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>ssh-git.md</title>
      <link href="/2018/08/30/ssh-git/"/>
      <url>/2018/08/30/ssh-git/</url>
      <content type="html"><![CDATA[<h1 id="github的https和ssh连接方式探究"><a href="#github的https和ssh连接方式探究" class="headerlink" title="github的https和ssh连接方式探究"></a>github的https和ssh连接方式探究</h1><p>在本机连接github仓库提交代码时有两种可选方法，一种是使用github账号的用户名和密码的认证方式通过https连接，另一种是使用ssh-key的认证方式通过ssh连接，本文主要研究这两种方式的工作过程以及可能会扩展探究一些相关的知识。<br><a id="more"></a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>首先在本机下载安装<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a>，一路点next默认安装即可;</li><li>clone一个github上的项目到本地</li></ol><h3 id="选择使用https"><a href="#选择使用https" class="headerlink" title="选择使用https"></a>选择使用https</h3><p>以我的博客所使用<a href="https://github.com/stkevintan/hexo-theme-material-flow" target="_blank" rel="noopener">hexo的materialFlow主题项目</a>为例(这个项目我没有管理权限)，一行命令<code>git clone https://github.com/stkevintan/hexo-theme-material-flow.git</code>即可clone到本地</p><h3 id="选择使用ssh"><a href="#选择使用ssh" class="headerlink" title="选择使用ssh"></a>选择使用ssh</h3><p>此时你就无法直接使用<code>git clone git@github.com:stkevintan/hexo-theme-material-flow.git</code>命令来clone上面那个项目到本地，会产生如下错误提示：</p><blockquote><p>fatal: Could not read from remote repository.<br>Please make sure you have the correct access rights and the repository exists.</p></blockquote><p>因为ssh的方式是需要进行认证的，你必须是这个项目的所有者或者管理者，才能有权限去使用ssh方式clone该项目，而上面的https方式则允许任何一个人在不需要验证的情况下去clone项目.</p><p><strong>那么接下来看一下对于一个我们有管理权限的仓库应该如何使用ssh方式去clone到本地</strong></p><p>ssh方式是基于不对称性加密来通信的，你需要使用不对称性算法来生成一对密钥，然后将私钥放置在你本机上，将公钥放置在github服务器上，之后在进行ssh通信时将会使用这对秘钥来完成认证登陆及加密和解密信息，<br>在window上和mac上我们都可以使用<code>ssh-keygen</code>这个命令行工具来生成我们需要的密钥，这是我们想要使用ssh通信的第一步</p><ol><li>生成一对密钥<br>打开你的命令行（window下使用<code>cmd.exe</code>，mac下使用<code>terminal.app</code>），然后按照如下命令来生成密钥<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></span><br><span class="line"><span class="comment"># 参数说明：  </span></span><br><span class="line"><span class="comment"># ssh-keygen: 表示将要使用ssh-keygen这个工具来生成密钥</span></span><br><span class="line"><span class="comment"># -t: 指定要生成的密钥类型，有rsa1(SSH1),dsa(SSH2),ecdsa(SSH2),rsa(SSH2)等类型，较为常用的是rsa类型，此处指定为rsa类型</span></span><br><span class="line"><span class="comment"># -b: 指定要生成的密钥长度 (单位:bit)，对于RSA类型的密钥，最小长度768bits,默认长度为2048bits。DSA密钥必须是1024bits，此处指定为4096bits</span></span><br><span class="line"><span class="comment"># -C: 制定要生成的密钥的注释，这个可以自己随意填写，就相当于给这个密钥留个名，好分辨，比如此处可以用注册github的邮箱号</span></span><br></pre></td></tr></table></figure></li></ol><p>之后会出现如下提示内容：</p><blockquote><p>Generating public/private rsa key pair.<br>Enter file in which to save the key (C:\Users\shxushengfeng/.ssh/id_rsa):</p></blockquote><p>意思是让你输入这个密钥文件的文件名，一般情况保存默认就可以，直接回车确认。<br>（如果你需要生成多对密钥，比如你需要和两个不一样的服务器A和B进行ssh通信，那么这个时候你就可以生成两对密钥，一对用来和A通信，另一对用来和B通信，因为默认的一对密钥文件名是id_rsa（私钥文件名）和id_rsa.pub（公钥文件名），那么你在第二次生成的时候就需要改一下文件的名字，防止密钥文件因为重名而被覆盖掉，提示信息会询问你是否要覆盖之前同名的文件）<br>然后会出现下一个提示内容：</p><blockquote><p>Enter passphrase (empty for no passphrase):</p></blockquote><p>意思是要不要对私钥设置口令（passphrase），如果担心私钥的安全，你可以设置一个，这里一般不设置，直接回车确认即可，最后会出现类似如下的提示内容：</p><blockquote><p>+—[RSA 4096]—-+<br>| o+o     ..  .o  |<br>| oo… o … =   |<br>|+ +.+ o.o.o.+ o  |<br>|oB =.o..E.o* o   |<br>|o = o.o Soo+=    |<br>|   . o .+++ .    |<br>|       o.o       |<br>|      ..         |<br>|      ..         |<br>+—-[SHA256]—–+  </p></blockquote><p>那么恭喜你，你已经生成了一对密钥文件，他们存储在<code>C:\Users\shxushengfeng/.ssh/</code>（windows）或者<code>~/.ssh</code>（mac）目录下，默认的文件是id_rsa（私钥文件名）和id_rsa.pub（公钥文件名），你可以去打开查看一下里面的内容。</p><ol start="2"><li>部署密钥<br>之前说过了你需要将私钥保存在本机，公钥放置在服务器上，这样之后才能用这对密钥建立ssh通信，那么在github上我们按照如下做法来部署密钥<ol><li>用文本编辑器打开刚才生成的公钥文件id_rsa.pub，拷贝里面的全部内容；</li><li>打开浏览器登陆你的github账户，依次打开你头像上的Settings &gt; SSH and GPG keys &gt; New SSH key;</li><li>填写相关信息，<strong>title</strong>可以类似之前生成密钥时填写的注释信息那样填写你的邮箱名，然后<strong>key</strong>里面填上刚才拷贝的公钥内容，点击<strong>Add SSH key</strong>之后输入一次你的github账户密码进行确认，然后你的公钥就被保存部署到github服务器上了；</li></ol></li><li>测试连接，使用如下命令来测试是否能够通过ssh连接到github<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh git@github.com</span><br><span class="line"><span class="comment"># 参数说明：</span></span><br><span class="line"><span class="comment"># ssh: 使用ssh进行连接</span></span><br><span class="line"><span class="comment"># git@github.com: ssh连接时需要指定登陆用户名和远程主机名，这里的git就是github的远程服务器的用户名，github.com就是远程服务器的主机名，用'@'符号连接起来</span></span><br></pre></td></tr></table></figure></li></ol><p>当你是第一次连接的时候会提示你如下信息：</p><blockquote><p>The authenticity of host ‘github.com (52.74.223.119)’ can’t be established.<br>RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.<br>Are you sure you want to continue connecting (yes/no)?  </p></blockquote><p>这是因为你是第一次连接该主机，该主机不在你本机的<code>known hosts</code>（已知主机）名单里面，所以询问你是否要继续连接这个陌生的主机，输入<code>yes</code>然后回车确认即可，之后再次连接的时候就不会有这个提示信息了。<br>如果你配置步骤没问题的话应该可以看到下面的连接上之后的欢迎信息(xxxxx代表你的github的账户名)：</p><blockquote><p>Warning: Permanently added ‘github.com,52.74.223.119’ (RSA) to the list of known hosts.<br>PTY allocation request failed on channel 0<br>Hi xxxxx! You’ve successfully authenticated, but GitHub does not provide shell access.<br>Connection to github.com closed. </p></blockquote><ol start="4"><li>使用ssh方式clone项目<br>之前说过了ssh方式只能操作我们有管理权限的项目，所以这里我拿自己做的一个<a href="https://github.com/kricsleo/vehicleKeyboard" target="_blank" rel="noopener">微信小程序的虚拟车牌键盘</a>的项目为例<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:kricsleo/vehicleKeyboard.git</span><br></pre></td></tr></table></figure></li></ol><p>这个时候我们就能顺利clone该项目到本机了，因为在我们上面这条命令请求数据的过程中，我们本机和github的服务器会使用我们之前生成的那对密钥来进行相互认证，从而使我们不需要手动输入github的账户名和密码信息来完成认证登陆，同时我们以后修改了项目代码在进行提交的时候也可直接进行提交等相关操作，无需再考虑登陆及连接的问题，git的使用可以参考我之前的一篇<a href="http://kricsleo.com/2018/08/22/git-workflow/" target="_blank" rel="noopener">小总结</a></p><ol start="5"><li>配置个人信息<br>使用git提交更改的时候会为本次提交附上提交人的一些信息，比如提交人的用户名及邮箱信息，我们可以使用git提供的配置功能来提前配置好这些信息，使用如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"John Doe"</span></span><br><span class="line">git config --global user.email johndoe@example.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 之后我们可以使用如下命令来查看我们配置的信息</span></span><br><span class="line"><span class="comment">#git config user.name</span></span><br><span class="line"><span class="comment">#git config user.email</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>markdown</title>
      <link href="/2018/08/23/markdown/"/>
      <url>/2018/08/23/markdown/</url>
      <content type="html"><![CDATA[<h1 id="markdown语法整理"><a href="#markdown语法整理" class="headerlink" title="markdown语法整理"></a>markdown语法整理</h1><p>经常使用markdown来做笔记，这里把现在常用的语法先记录一下，万一老年人了记忆不好，也可以查一查<br><a id="more"></a></p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># h1</span></span><br><span class="line">......</span><br><span class="line"><span class="section">###### h6</span></span><br><span class="line"></span><br><span class="line">分隔符</span><br><span class="line">最少三个---或<span class="emphasis">***</span></span><br></pre></td></tr></table></figure><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(部分markdown软件不支持)</span><br><span class="line">[TOC]</span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; quote(每行最后添加两个空格即表示换行)  </span></span><br><span class="line">quote  </span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; quote(或者采取每行前面都添加引用标志)</span></span><br><span class="line"><span class="quote">&gt; quote</span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; quote(多行嵌套引用)</span></span><br><span class="line">&gt;&gt; quote2</span><br><span class="line">&gt;&gt;&gt; quote3</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">行内代码<span class="code">`code`</span>行内代码</span><br><span class="line"></span><br><span class="line">多行代码，[<span class="string">支持高亮语言</span>](<span class="link">https://blog.csdn.net/qq_32126633/article/details/78838494#language_key</span>)</span><br></pre></td></tr></table></figure><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">个人博客</span>](<span class="link">https://kricsleo.github.io/ 'krics的个人博客'</span>)</span><br><span class="line">或者</span><br><span class="line">[<span class="symbol">blog</span>]: <span class="link">https://kricsleo.github.io/ 'krics的个人博客'</span></span><br><span class="line">[<span class="string">个人博客</span>][<span class="symbol">blog</span>]</span><br></pre></td></tr></table></figure><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">个人头像</span>](<span class="link">https://kricsleo.github.io/images/avatar.jpg 'krics的个人头像'</span>)</span><br><span class="line">或者</span><br><span class="line">[<span class="symbol">avatar</span>]: <span class="link">https://kricsleo.github.io/images/avatar.jpg 'krics的个人头像'</span></span><br><span class="line">![<span class="string">个人头像</span>][<span class="symbol">avatar</span>]</span><br><span class="line">图片带链接</span><br><span class="line">[<span class="string">![个人头像</span>](<span class="link">https://kricsleo.github.io/images/avatar.jpg 'krics的个人头像'</span>)](<span class="link">https://kricsleo.github.io/images/avatar.jpg</span>)</span><br></pre></td></tr></table></figure><h2 id="序表"><a href="#序表" class="headerlink" title="序表"></a>序表</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">有序节点</span><br><span class="line"><span class="bullet">1. </span>节点1</span><br><span class="line"><span class="code">    1. 节点1.1</span></span><br><span class="line"><span class="bullet">2. </span>节点2</span><br><span class="line">无序节点</span><br><span class="line"><span class="bullet">- </span>节点$</span><br><span class="line"><span class="code">    - 节点$.^</span></span><br><span class="line"><span class="bullet">- </span>节点#</span><br><span class="line"><span class="code">    - 节点#.&amp;</span></span><br></pre></td></tr></table></figure><h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>[ ] 未完成</span><br><span class="line"><span class="bullet">- </span>[x] 已完成</span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 附上[在线生成表格工具](http://www.tablesgenerator.com/markdown_tables)</span></span><br><span class="line">|    a    |       b       |      c     |</span><br><span class="line">|:-------:|:------------- | ----------:|</span><br><span class="line">|   居中   |      左对齐    |    右对齐   |</span><br></pre></td></tr></table></figure><h2 id="语义性"><a href="#语义性" class="headerlink" title="语义性"></a>语义性</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*斜体*</span> or &lt;i&gt;斜体&lt;/i&gt;</span><br><span class="line"><span class="strong">**加粗**</span> or &lt;b&gt;加粗&lt;/b&gt;</span><br><span class="line"><span class="strong">***斜体加粗**</span>* or &lt;em&gt;强调&lt;/em&gt;</span><br><span class="line">~~删除线~~</span><br><span class="line">上标&lt;sup&gt;u&lt;/sup&gt;</span><br><span class="line">下标&lt;sub&gt;d&lt;/sub&gt;</span><br><span class="line">键盘按键&lt;kbd&gt;Ctrl&lt;/kbd&gt;</span><br></pre></td></tr></table></figure><h2 id="格式化显示"><a href="#格式化显示" class="headerlink" title="格式化显示"></a>格式化显示</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre&gt;</span><br><span class="line"><span class="code">    ...</span></span><br><span class="line">&lt;pre&gt;</span><br></pre></td></tr></table></figure><h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><ul><li style="list-style: none"><input type="checkbox"> 目前还不常用，之后补齐  <h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Markdown[^1]</span><br><span class="line">在页面底端注解</span><br><span class="line">[<span class="symbol">^1</span>]: <span class="link">Markdown是一种纯文本标记语言</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">公式</span>](<span class="link">#1</span>)</span><br><span class="line">只能跳转到标题形式的锚点</span><br><span class="line"><span class="section">## [公式具体说明] &#123;#1&#125;</span></span><br></pre></td></tr></table></figure><h2 id="定义型列表"><a href="#定义型列表" class="headerlink" title="定义型列表"></a>定义型列表</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Markdown</span><br><span class="line">:   Markdown是一种纯文本标记语言  (冒号后跟一个'Tab'或者四个空格)</span><br></pre></td></tr></table></figure><h2 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;xxx@163.com&gt;</span><br></pre></td></tr></table></figure><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>markdown的代码绘制流程图个人感觉比较复杂，个人使用的在线绘制工具<a href="https://www.processon.com/diagrams" target="_blank" rel="noopener">ProcessOn</a></p>]]></content>
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git-workflow</title>
      <link href="/2018/08/22/git-workflow/"/>
      <url>/2018/08/22/git-workflow/</url>
      <content type="html"><![CDATA[<h3 id="git的日常使用流程记录"><a href="#git的日常使用流程记录" class="headerlink" title="git的日常使用流程记录"></a>git的日常使用流程记录</h3><p>内容参考于阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2015/08/git-use-process.html" target="_blank" rel="noopener">Git使用规范流程</a>，记录一下git的日常使用流程。<br><a id="more"></a><br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015080501.png" alt="常用流程图"></p><h4 id="1-新建分支"><a href="#1-新建分支" class="headerlink" title="1. 新建分支"></a>1. 新建分支</h4><p>开发新功能时都应该新建一个分支，在分支上开发，当功能开发完成时再合并到主分支，并销毁新建的分支。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git checkout——检出，是我们的常用命令。最为常用的两种情形是创建分支和切换分支</span></span><br><span class="line"><span class="comment"># 先切换到主分支，获取最新代码</span></span><br><span class="line">git checkout master</span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后新建分支，在这个分支上进行新功能开发</span></span><br><span class="line">git checkout -b myfeature</span><br></pre></td></tr></table></figure></p><h4 id="2-提交分支"><a href="#2-提交分支" class="headerlink" title="2. 提交分支"></a>2. 提交分支</h4><p>新功能开发完成以后提交代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认保存所有改动 --all</span></span><br><span class="line">git add</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看发生改动的地方</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交改动，也可以跟上 --verbose，然后就可以列出diff比较的结果，并且附上本次提交信息</span></span><br><span class="line">git commit</span><br></pre></td></tr></table></figure></p><h4 id="3-同步代码"><a href="#3-同步代码" class="headerlink" title="3. 同步代码"></a>3. 同步代码</h4><p>开发过程中可以经常同步主分支的最新代码，保证一直在最新的基础上进行开发<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git fetch 表示取回最新代码</span></span><br><span class="line">git fetch origin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将有更新的代码与当前分支合并</span></span><br><span class="line"><span class="comment"># 所取回的更新，在本地主机上要用"远程主机名/分支名"的形式读取。比如origin主机的master，就要用origin/master读取。</span></span><br><span class="line"><span class="comment"># 或者使用： git merge origin/master</span></span><br><span class="line">git rebase origin/master</span><br></pre></td></tr></table></figure></p><h4 id="4-合并多个commit"><a href="#4-合并多个commit" class="headerlink" title="4. 合并多个commit"></a>4. 合并多个commit</h4><p>新功能开发过程中一般会多次commit，但是在功能开发完成以后需要合并到主干时，一般把之前的commit合并成一个或几个关键的commit<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git rebase命令的i参数表示互动（interactive），具体如何合并请参见原文</span></span><br><span class="line">git rebase -i origin/master</span><br></pre></td></tr></table></figure></p><h4 id="5-推送到远程仓库"><a href="#5-推送到远程仓库" class="headerlink" title="5. 推送到远程仓库"></a>5. 推送到远程仓库</h4><p>多个commit经过合理的处理以后就可以把当前分支推送到远程仓库了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git push命令要加上force参数，因为rebase以后，分支历史改变了，跟远程分支不一定兼容，有可能要强行推送</span></span><br><span class="line">git push --force master myfeature</span><br></pre></td></tr></table></figure></p><h4 id="6-发出Pull-Request"><a href="#6-发出Pull-Request" class="headerlink" title="6. 发出Pull Request"></a>6. 发出Pull Request</h4><p>提交到远程仓库以后，就可以发出 Pull Request 到master分支，然后请求别人进行代码review，确认可以合并到master。</p><p>(end)</p>]]></content>
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
