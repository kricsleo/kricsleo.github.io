{"pages":[{"title":"archives","permalink":"https://kricsleo.github.io/archives/index.html","text":""},{"title":"categories","permalink":"https://kricsleo.github.io/categories/index.html","text":""}],"posts":[{"title":"ssh-git","permalink":"https://kricsleo.github.io/2018/08/30/ssh-git/","text":"github的https和ssh连接方式探究在本机连接github仓库提交代码时有两种可选方法，一种是使用github账号的用户名和密码的认证方式通过https连接，另一种是使用ssh-key的认证方式通过ssh连接，本文主要研究这两种方式的工作过程以及可能会扩展探究一些相关的知识。 两种方式 首先在本机下载安装Git，一路点next默认安装即可; clone一个github上的项目到本地 选择使用https以我的博客所使用hexo的materialFlow主题项目为例(这个项目我没有管理权限)，一行命令git clone https://github.com/stkevintan/hexo-theme-material-flow.git即可clone到本地 选择使用ssh此时你就无法直接使用git clone git@github.com:stkevintan/hexo-theme-material-flow.git命令来clone上面那个项目到本地，会产生如下错误提示： fatal: Could not read from remote repository.Please make sure you have the correct access rights and the repository exists. 因为ssh的方式是需要进行认证的，你必须是这个项目的所有者或者管理者，才能有权限去使用ssh方式clone该项目，而上面的https方式则允许任何一个人在不需要验证的情况下去clone项目. 那么接下来看一下对于一个我们有管理权限的仓库应该如何使用ssh方式去clone到本地 ssh方式是基于不对称性加密来通信的，你需要使用不对称性算法来生成一对密钥，然后将私钥放置在你本机上，将公钥放置在github服务器上，之后在进行ssh通信时将会使用这对秘钥来完成认证登陆及加密和解密信息，在window上和mac上我们都可以使用ssh-keygen这个命令行工具来生成我们需要的密钥，这是我们想要使用ssh通信的第一步 生成一对密钥打开你的命令行（window下使用cmd.exe，mac下使用terminal.app），然后按照\b如下命令来生成密钥123456ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"# 参数说明： # ssh-keygen: 表示将要使用ssh-keygen这个工具来生成密钥# -t: 指定要生成的密钥类型，有rsa1(SSH1),dsa(SSH2),ecdsa(SSH2),rsa(SSH2)等类型，较为常用的是rsa类型，此处指定为rsa类型# -b: 指定要生成的密钥长度 (单位:bit)，对于RSA类型的密钥，最小长度768bits,默认长度为2048bits。DSA密钥必须是1024bits，此处指定为4096bits# -C: 制定要生成的密钥的注释，这个可以自己随意填写，就相当于给这个密钥留个名，好分辨，比如此处可以用注册github的邮箱号 之后会出现如下提示内容： Generating public/private rsa key pair.Enter file in which to save the key (C:/Users/xxxxx/.ssh/id_rsa): 意思是让你输入这个密钥文件的文件名，一般情况保存默认就可以，直接回车确认。（如果你有多个git的账号需要配置，比如你自己在github上有账号需要提交代码，同时自己在公司也有git的账号，有时候需要提交代码到公司的仓库里，那么这时候你就需要额外的配置来保证提交的时候不会冲突，详见下面）然后会出现下一个提示内容： Enter passphrase (empty for no passphrase): 意思是要不要对私钥设置口令（passphrase），如果担心私钥的安全，你可以设置一个，这里一般不设置，直接回车确认即可，最后会出现类似如下的提示内容： +—[RSA 4096]—-+| o+o .. .o || oo… o … = ||+ +.+ o.o.o.+ o ||oB =.o..E.o* o ||o = o.o Soo+= || . o .+++ . || o.o || .. || .. |+—-[SHA256]—–+ 那\b么恭喜你，你已经生成了一对密钥文件，\b他们存储在C:/Users/xxxxx/.ssh/（windows）或者~/.ssh（mac）目录下，默认的文件是id_rsa（私钥文件名）和id_rsa.pub（公钥文件名），你可以去打开查看一下里面的内容。 部署密钥之前说过了你需要将私钥保存在本机，公钥放置在服务器上，这样之后才能用这对密钥建立ssh通信，那么在github上我们按照如下做法来部署密钥 用文本编辑器打开刚才生成的公钥文件id_rsa.pub，拷贝里面的全部内容； 打开浏览器登陆你的github账户，依次打开你头像上的Settings &gt; SSH and GPG keys &gt; New SSH key; 填写相关信息，title可以类似之前生成密钥时填写的注释信息那样填写你的邮箱名，然后key里面填上刚才拷贝的公钥内容，点击Add SSH key之后输入一次你的github账户密码进行确认，然后你的公钥就被保存部署到github服务器上了； 测试连接，使用如下命令来测试是否能够通过ssh连接到github1234ssh git@github.com# 参数说明：# ssh: 使用ssh进行连接# git@github.com: ssh连接时需要指定登陆用户名和远程主机名，这里的git就是github的远程服务器的用户名，github.com就是远程服务器的主机名，用'@'符号连接起来 当你是第一次连接的时候会提示你如下信息： The authenticity of host ‘github.com (52.74.223.119)’ can’t be established.RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.Are you sure you want to continue connecting (yes/no)? 这是因为你是第一次连接该主机，该主机不在你本机的known hosts（已知主机）名单里面，所以询问你是否要继续连接这个陌生的主机，输入yes然后回车确认即可，之后再次连接的时候就不会有这个提示信息了。如果你配置步骤没问题的话应该可以看到下面的连接上之后的欢迎信息(xxxxx代表你的github的账户名)： Warning: Permanently added ‘github.com,52.74.223.119’ (RSA) to the list of known hosts.PTY allocation request failed on channel 0Hi xxxxx! You’ve successfully authenticated, but GitHub does not provide shell access.Connection to github.com closed. 使用ssh方式clone项目之前说过了ssh方式只能操作我们有管理权限的项目，所以这里我拿自己做的一个微信小程序的虚拟车牌键盘的项目为例1git clone git@github.com:kricsleo/vehicleKeyboard.git 这个时候我们就能顺利clone该项目到本机了，因为在我们上面这条命令请求数据的过程中，我们本机和github的服务器会使用我们之前生成的那对密钥来进行相互认证，从而使我们不需要手动输入github的账户名和密码信息来完成认证登陆，同时我们以后修改了项目代码在进行提交的时候也可直接进行提交等相关操作，无需再考虑登陆及连接的问题，git的使用可以参考我之前的一篇小总结 配置个人信息使用git提交更改的时候会为本次提交附上提交人的\b一些信息，比如提交人的用户名及邮箱信息，我们可以使用git提供的配置功能来提前配置好这些信息，使用如下：123456789101112git config --global user.name \"John Doe\"git config --global user.email \"johndoe@example.com\"# 参数说明：# git config: 表示使用git的配置工具# --global: 表示配置全局的信息，你也可以在某个项目下面单独配置这个信息，只需要去掉'--global'即可，# &lt;- 这样不同的项目就会有不同提交人信息# user.name / user.email: 后面跟上你自己的用户名和邮箱信息即可# 之后我们可以使用如下命令来查看我们配置的信息#git config user.name#git config user.email 多git账户配置如果你需要生成多对密钥，比如你需要和两个不一样的服务器A和B进行ssh通信，那么这个时候你就可以生成两对密钥，一对用来和A通信，另一对用来和B通信，最常见的情况就是我们自己在github上面会有自己的github账户，自己平时会开发一些自己的项目，然后提交到github上面，在公司里面公司一般会有自己的gitlab服务器，然后给员工开通一个gitlab的账号，有关公司内部的项目就会让员工用gitlab的账户进行开发，然后提交代码到公司的gitlab上面，那么这时候我们可以按照如下的方法来配置一下，保证自己随时提交代码的时候都是能够提交到正确的地方，而不会混乱。 再生成一对密钥在上面的操作中你已经生成了一对密钥，名字叫做id_rsa和id_rsa.pub（如果你没有改名的话），这个密钥我们已经拿来和github进行通信了，此时我们要想和公司的gitlab通信就需要再生成一对密钥，为了避免这次生成的密钥覆盖我们之前的那对密钥，可以执行如下命令：12345ssh-keygen -t rsa -b 4096 -C \"youremail@yourcompany.com” -f ~/.ssh/id_rsa_xx# 参数说明# 这次我们生成密钥的命令只比之前多了一个参数： -f# -f: 表示将这次什么的密钥文件保存为id_rsa_xx，同样放在了之前的那个文件夹，这个文件名你可以自己随意指定，不过最好容易区分一些 后面你的操作就和之前生成密钥一样了，生成好密钥之后再看下一步 部署新生成的密钥和之前部署github密钥的步骤类似，你登录你公司的gitlab，找到添加ssh-key的地方，然后拷贝新生成的公钥id_rsa_xx.pub文件内容到gitlab里面去并且保存，这样你公司的gitlab服务器上的公钥信息就配置好了 新建配置文件因为现在我们本机上有了两对密钥，提交代码到github时需要使用之前生成的那一对，提交代码到公司的gitlab上需要我们现在刚刚生成的这一对，那么我们就要写一个简单的配置文件来告诉git该如何再提交代码时选择正确的密钥，实际上就是编写SSH的用户配置文件config。在目录~/.ssh(mac环境)或者C:/Users/xxxxx/.ssh/下新建文件config，注意没有后缀名的，然后在里面填写上如下内容： 12345678910111213141516171819#githubHost github.com HostName github.com User git IdentityFile ~/.ssh/id_rsa#yourcompanyHost git.XXXXX.com HostName git.XXXXX.com User git IdentityFile ~/.ssh/id_rsa_XX# 参数说明，此段内容不用拷贝，是为了加以说明# Host: 别名，为了方便记忆和区分，可以任意填写# HostName： 主机名 服务器的主机名，也可以是服务器的ip地址，需要准确填写# User： 用户名，ssh登录服务器时的用户名，一般是git# IdentityFile： 密钥文件的路径，填写上你要用来和这个服务器通信使用的密钥文件的路径# PreferredAuthentications： 强制使用Public Key验证，我这里没有要求这个，你也可以加上 测试连接使用如下命令来分别测试能否连接到对应的服务器 12345# 测试连接公司ssh git@git.XXXXX.com# 测试连接githubssh git@github.com 如果能分别看到对应的欢迎信息，那么恭喜你配置正确了。 配置个人信息这次我们因为有不同的项目，提交时需要附加上的个人信息也不一样，你提交github时会用你自己的github账户名和邮箱信息，但是提交公司的gitlab时会使用公司给你的账户名和公司个人邮箱，那么我们就需要到具体的项目下面执行如下的命令：12345git config user.name \"yourname\"git config user.email \"youremail@XXXXX.com\"# 参数说明# 与之前我们执行的那条配置个人信息命令相比，只是少了个'--global'参数，因为我们现在不是在全局配置，而是在个别项目中单独配置 到这里为止，你的多git账户依旧配置完毕了，后面就可以和平常一样使用git来提交代码了，ssh会为你选择正确的密钥来和服务器认证和通信。 备注这篇文章里面给我自己埋了些坑要填 完全使用https协议该如何用git来开发项目 另外关于ssh其实自己看了挺多，但是这篇文章里面基本没怎么写，之后可能填上这个坑 是否可以github和gitlab使用同一对密钥，那样是不是会方便些，另外需要考虑安全问题 如果文章内容出现错误或者有更多想要了解的可以在下方留言，我会改进的 (end)"},{"title":"markdown","permalink":"https://kricsleo.github.io/2018/08/23/markdown/","text":"markdown语法整理经常使用markdown来做笔记，这里把现在常用的语法先记录一下，万一老年人了记忆不好，也可以查一查 标题123456# h1......###### h6分隔符最少三个---或*** 目录12(部分markdown软件不支持)[TOC] 引用123456789&gt; quote(\b每行最后添加两个空格即表示换行) quote &gt; quote(或者采取每行前面都添加引用标志)&gt; quote&gt; quote(多行嵌套引用)&gt;&gt; quote2&gt;&gt;&gt; quote3 代码123行内代码`code`行内代码多行代码，[支持\b高亮语言](https://blog.csdn.net/qq_32126633/article/details/78838494#language_key) 链接1234[个人博客](https://kricsleo.github.io/ 'krics的个人博客')或者[blog]: https://kricsleo.github.io/ 'krics的个人博客'[个人博客][blog] 图片123456![个人头像](https://kricsleo.github.io/images/avatar.jpg 'krics的个人头像')或者[avatar]: https://kricsleo.github.io/images/avatar.jpg 'krics的个人头像'![个人头像][avatar]图片带链接[![个人头像](https://kricsleo.github.io/images/avatar.jpg 'krics的个人头像')](https://kricsleo.github.io/images/avatar.jpg) 序表123456789有序节点1. 节点1 1. 节点1.12. 节点2无序节点- 节点$ - 节点$.^- 节点# - 节点#.&amp; 任务12- [ ] 未完成- [x] 已完成 表格1234# 附上[在线生成表格工具](http://www.tablesgenerator.com/markdown_tables)| a | b | c ||:-------:|:------------- | ----------:|| 居中 | 左对齐 | 右对齐 | 语义性1234567*斜体* or &lt;i&gt;斜体&lt;/i&gt;**加粗** or &lt;b&gt;加粗&lt;/b&gt;***斜体加粗*** or &lt;em&gt;强调&lt;/em&gt;~~删除线~~上标&lt;sup&gt;u&lt;/sup&gt;下标&lt;sub&gt;d&lt;/sub&gt;键盘按键&lt;kbd&gt;Ctrl&lt;/kbd&gt; 格式化显示123&lt;pre&gt; ...&lt;pre&gt; 公式 目前还不常用，之后补齐 脚注123Markdown[^1]在页面底端注解[^1]: Markdown是一种纯文本标记语言 锚点123[公式](#1)只能跳转到标题形式的锚点## [公式具体说明] &#123;#1&#125; 定义型列表12Markdown: Markdown是一种纯文本标记语言 (冒号后跟一个'Tab'或者四个空格) 邮箱1&lt;xxx@163.com&gt; 流程图markdown的代码绘制流程图个人感觉比较复杂，个人使用的在线绘制工具ProcessOn"},{"title":"git-workflow","permalink":"https://kricsleo.github.io/2018/08/22/git-workflow/","text":"git的日常使用流程记录内容参考于阮一峰老师的Git使用规范流程，记录一下git的日常使用流程。 1. 新建分支开发新功能时都应该新建一个分支，在分支上开发，当功能开发完成时再合并到主分支，并销毁新建的分支。1234567# git checkout——检出，是我们的常用命令。最为常用的两种情形是创建分支和切换分支# 先切换到主分支，获取最新代码git checkout mastergit pull# 然后新建分支，在这个分支上进行新功能开发git checkout -b myfeature 2. 提交分支新功能开发完成以后提交代码12345678# 默认保存所有改动 --allgit add# 查看发生改动的地方git status# 提交改动，也可以跟上 --verbose，然后就可以列出diff比较的结果，并且附上本次提交信息git commit 3. 同步代码开发过程中可以经常同步主分支的最新代码，保证一直在最新的基础上进行开发1234567# git fetch 表示取回最新代码git fetch origin# 将有更新的代码与当前分支合并# 所取回的更新，在本地主机上要用\"远程主机名/分支名\"的形式读取。比如origin主机的master，就要用origin/master读取。# 或者使用： git merge origin/mastergit rebase origin/master 4. 合并多个commit新功能开发过程中一般会多次commit，但是在功能开发完成以后需要合并到主干时，一般把之前的commit合并成一个或几个关键的commit12# git rebase命令的i参数表示互动（interactive），具体如何合并请参见原文git rebase -i origin/master 5. 推送到远程仓库多个commit经过合理的处理以后就可以把当前分支推送到远程仓库了12# git push命令要加上force参数，因为rebase以后，分支历史改变了，跟远程分支不一定兼容，有可能要强行推送git push --force master myfeature 6. 发出Pull Request提交到远程仓库以后，就可以发出 Pull Request 到master分支，然后请求别人进行代码review，确认可以合并到master。 (end)"}]}