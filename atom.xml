<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kricsleo</title>
  
  <subtitle>kricsleo&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kricsleo.github.io/"/>
  <updated>2018-11-02T06:28:36.113Z</updated>
  <id>https://kricsleo.github.io/</id>
  
  <author>
    <name>kricsleo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>web-font</title>
    <link href="https://kricsleo.github.io/web-font/"/>
    <id>https://kricsleo.github.io/web-font/</id>
    <published>2018-11-01T02:11:36.000Z</published>
    <updated>2018-11-02T06:28:36.113Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;现在很多网站为了视觉效果都在使用在线字体, 系统自带的字体可以直接使用, 但是自定义的在线字体需要通过&lt;code&gt;@font-face&lt;/code&gt;来加载. 这里主要结合我自己的博客的实践来记录一下网页字体的加载过程及优化.&lt;br&gt;
    
    </summary>
    
      <category term="font-end" scheme="https://kricsleo.github.io/categories/font-end/"/>
    
    
      <category term="css" scheme="https://kricsleo.github.io/tags/css/"/>
    
      <category term="web-font" scheme="https://kricsleo.github.io/tags/web-font/"/>
    
  </entry>
  
  <entry>
    <title>optimize-my-blog</title>
    <link href="https://kricsleo.github.io/optimize-my-blog/"/>
    <id>https://kricsleo.github.io/optimize-my-blog/</id>
    <published>2018-10-21T06:58:11.000Z</published>
    <updated>2018-10-31T15:05:33.842Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;hexo主题-MaterialFlow-主题改造&quot;&gt;&lt;a href=&quot;#hexo主题-MaterialFlow-主题改造&quot; class=&quot;headerlink&quot; title=&quot;hexo主题 MaterialFlow 主题改造&quot;&gt;&lt;/a&gt;hexo主题 MaterialFlow 主题改造&lt;/h1&gt;&lt;p&gt;打算对博客的访问速度和样式做一个改版优化.&lt;br&gt;
    
    </summary>
    
      <category term="front-end" scheme="https://kricsleo.github.io/categories/front-end/"/>
    
    
      <category term="web优化" scheme="https://kricsleo.github.io/tags/web%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Promise-Generator</title>
    <link href="https://kricsleo.github.io/Promise-Generator/"/>
    <id>https://kricsleo.github.io/Promise-Generator/</id>
    <published>2018-10-18T02:33:04.000Z</published>
    <updated>2018-10-18T03:05:33.711Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;异步解决方案&quot;&gt;&lt;a href=&quot;#异步解决方案&quot; class=&quot;headerlink&quot; title=&quot;异步解决方案&quot;&gt;&lt;/a&gt;异步解决方案&lt;/h1&gt;&lt;p&gt;本文是为了解js的异步操作解决方案发展过程. 从原始的回调地狱到ES6的&lt;code&gt;Promise&lt;/code&gt;和&lt;code&gt;Generator&lt;/code&gt;再到ES7提案阶段的&lt;code&gt;async&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="front-end" scheme="https://kricsleo.github.io/categories/front-end/"/>
    
    
      <category term="Generator" scheme="https://kricsleo.github.io/tags/Generator/"/>
    
      <category term="Promise" scheme="https://kricsleo.github.io/tags/Promise/"/>
    
      <category term="async" scheme="https://kricsleo.github.io/tags/async/"/>
    
  </entry>
  
  <entry>
    <title>same-origin-and-CORS</title>
    <link href="https://kricsleo.github.io/same-origin-and-CORS/"/>
    <id>https://kricsleo.github.io/same-origin-and-CORS/</id>
    <published>2018-10-16T03:06:36.000Z</published>
    <updated>2018-10-21T05:40:45.991Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;浏览器同源策略&quot;&gt;&lt;a href=&quot;#浏览器同源策略&quot; class=&quot;headerlink&quot; title=&quot;浏览器同源策略&quot;&gt;&lt;/a&gt;浏览器同源策略&lt;/h1&gt;&lt;p&gt;目前的 web 开发还相当的依赖 cookie , 而cookie的使用限制于浏览器的同源策略(same-origin policy), 同时这个策略也是保证我们网站信息安全的基础, 这篇文章主要了解一下浏览器同源策略具体的含义, 以及在实际开发中如何绕过这一限制来达到跨域请求数据的目的.&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://kricsleo.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="same-origin" scheme="https://kricsleo.github.io/tags/same-origin/"/>
    
      <category term="CORS" scheme="https://kricsleo.github.io/tags/CORS/"/>
    
      <category term="cookie" scheme="https://kricsleo.github.io/tags/cookie/"/>
    
  </entry>
  
  <entry>
    <title>Content-Type</title>
    <link href="https://kricsleo.github.io/Content-Type/"/>
    <id>https://kricsleo.github.io/Content-Type/</id>
    <published>2018-10-12T02:32:51.000Z</published>
    <updated>2018-10-21T16:40:34.964Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Content-Type&quot;&gt;&lt;a href=&quot;#Content-Type&quot; class=&quot;headerlink&quot; title=&quot;Content-Type&quot;&gt;&lt;/a&gt;Content-Type&lt;/h1&gt;&lt;p&gt;&lt;code&gt;HTTP/1.1&lt;/code&gt;协议规定的&lt;code&gt;HTTP&lt;/code&gt;请求方法有&lt;code&gt;OPTIONS&lt;/code&gt;、&lt;code&gt;GET&lt;/code&gt;、&lt;code&gt;HEAD&lt;/code&gt;、&lt;code&gt;POST&lt;/code&gt;、&lt;code&gt;PUT&lt;/code&gt;、&lt;code&gt;DELETE&lt;/code&gt;、&lt;code&gt;TRACE&lt;/code&gt;、&lt;code&gt;CONNECT&lt;/code&gt;这几种, 用的最多的是&lt;code&gt;GET&lt;/code&gt;和&lt;code&gt;POST&lt;/code&gt;, 这里主要说一下提交请求时的请求头中&lt;code&gt;Content-Type&lt;/code&gt;字段&lt;br&gt;
    
    </summary>
    
      <category term="通信" scheme="https://kricsleo.github.io/categories/%E9%80%9A%E4%BF%A1/"/>
    
    
      <category term="Content-Type" scheme="https://kricsleo.github.io/tags/Content-Type/"/>
    
  </entry>
  
  <entry>
    <title>http</title>
    <link href="https://kricsleo.github.io/http/"/>
    <id>https://kricsleo.github.io/http/</id>
    <published>2018-10-12T02:29:30.000Z</published>
    <updated>2018-10-23T05:17:32.026Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;http&quot;&gt;&lt;a href=&quot;#http&quot; class=&quot;headerlink&quot; title=&quot;http&quot;&gt;&lt;/a&gt;http&lt;/h1&gt;&lt;p&gt;http虽然内容简单, 容易理解, 但是内容十分庞大, 涉及到现在通信的方方面面, 我打算花点时间陆陆续续的把我接触到的http的相关部分整理出来, 这里作为一个入口页, 后续持续补充.&lt;br&gt;
    
    </summary>
    
      <category term="通信" scheme="https://kricsleo.github.io/categories/%E9%80%9A%E4%BF%A1/"/>
    
    
      <category term="http" scheme="https://kricsleo.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>object-get-set</title>
    <link href="https://kricsleo.github.io/object-get-set/"/>
    <id>https://kricsleo.github.io/object-get-set/</id>
    <published>2018-10-07T16:06:51.000Z</published>
    <updated>2018-10-08T06:02:23.483Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;属性描述符&quot;&gt;&lt;a href=&quot;#属性描述符&quot; class=&quot;headerlink&quot; title=&quot;属性描述符&quot;&gt;&lt;/a&gt;属性描述符&lt;/h1&gt;&lt;p&gt;在js的对象中通常会有很多个属性, 例如&lt;code&gt;let person = { name: &amp;#39;john&amp;#39;}&lt;/code&gt;中的&lt;code&gt;name&lt;/code&gt;就是&lt;code&gt;person&lt;/code&gt;这个对象的一个属性, 我们可以定义这个属性的一些特性, 也就是来描述这个属性, 比如这个属性是否是可读写的, 是否是可以被枚举的等等, 由此产生出了&lt;strong&gt;属性描述符&lt;/strong&gt;这个概念.&lt;br&gt;
    
    </summary>
    
      <category term="front-end" scheme="https://kricsleo.github.io/categories/front-end/"/>
    
    
      <category term="object" scheme="https://kricsleo.github.io/tags/object/"/>
    
  </entry>
  
  <entry>
    <title>MVC-MVP-MVVM</title>
    <link href="https://kricsleo.github.io/MVC-MVP-MVVM/"/>
    <id>https://kricsleo.github.io/MVC-MVP-MVVM/</id>
    <published>2018-09-28T11:51:24.000Z</published>
    <updated>2018-09-29T01:02:49.797Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于-MV&quot;&gt;&lt;a href=&quot;#关于-MV&quot; class=&quot;headerlink&quot; title=&quot;关于 MV*&quot;&gt;&lt;/a&gt;关于 MV*&lt;/h1&gt;&lt;p&gt;为了管理有图形界面的应用程序, 先后提出了 MVC, MVP 和 MVVM 等应用架构模式, 我们也许常常听到这几个词, 尤其对我这个前后端都做过的人来说更是时常接触, 但是对于他们之间的区别却不甚了解, 这几天看了不少文章讲这一块, 在看到 Github 上 livoras 写的文章以后才终在心里有所区分, 这里转载一下 livoras 的原文.&lt;/p&gt;
&lt;p&gt;作者: livoras&lt;br&gt;原文: &lt;a href=&quot;https://github.com/livoras/blog/issues/11&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/livoras/blog/issues/11&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;另外可以看一下掘金上的这篇文章, 与前端开发结合起来更好理解: &lt;a href=&quot;https://juejin.im/post/593021272f301e0058273468&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅析前端开发中的 MVC/MVP/MVVM 模式&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://kricsleo.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="MVC" scheme="https://kricsleo.github.io/tags/MVC/"/>
    
      <category term="MVP" scheme="https://kricsleo.github.io/tags/MVP/"/>
    
      <category term="MVVM" scheme="https://kricsleo.github.io/tags/MVVM/"/>
    
  </entry>
  
  <entry>
    <title>CommonJS-AMD-CMD-ES6</title>
    <link href="https://kricsleo.github.io/CommonJS-AMD-CMD/"/>
    <id>https://kricsleo.github.io/CommonJS-AMD-CMD/</id>
    <published>2018-09-25T08:49:17.000Z</published>
    <updated>2018-09-29T01:02:49.797Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript-模块化&quot;&gt;&lt;a href=&quot;#JavaScript-模块化&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 模块化&quot;&gt;&lt;/a&gt;JavaScript 模块化&lt;/h1&gt;&lt;p&gt;远古时期, 我们写的 js 都是都是通过 script 标签进行管理, 这使得项目一旦复杂, 页面内便会写上成堆的 script 标签来引入各种外部 js 文件, 而且我们还需要保证 js 的顺序, 因为一个 js 文件内的方法往往依赖另外的 js 来实现, 我们通过确保书写顺序来确保 js 的加载顺序, 这当然是极不方便的, 后来前端工程师们就开始了尝试 js 模块化的探索之旅.&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://kricsleo.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端模块化" scheme="https://kricsleo.github.io/tags/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>AST</title>
    <link href="https://kricsleo.github.io/AST/"/>
    <id>https://kricsleo.github.io/AST/</id>
    <published>2018-09-24T08:33:49.000Z</published>
    <updated>2018-09-29T00:59:43.006Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;AST&quot;&gt;&lt;a href=&quot;#AST&quot; class=&quot;headerlink&quot; title=&quot;AST&quot;&gt;&lt;/a&gt;AST&lt;/h1&gt;&lt;h2 id=&quot;AST-简介&quot;&gt;&lt;a href=&quot;#AST-简介&quot; class=&quot;headerlink&quot; title=&quot;AST 简介&quot;&gt;&lt;/a&gt;AST 简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在计算机科学中, 抽象语法树(Abstract Syntax Tree, AST)或者简称语法树(Syntax Tree)是源代码语法解构的一种抽象表现, 它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构. – &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E8%AA%9E%E6%B3%95%E6%A8%B9&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;维基百科&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而在 JavaScript 中我们通过 JavaScript Parser 把代码转化为一颗抽象语法树（AST），这颗树定义了代码的结构，通过操纵这颗树，我们可以精准的定位到声明语句、赋值语句、运算语句等等，实现对代码的分析、优化、变更等操作. 然后浏览器会把 js 源码通过解析器转为抽象语法树，再进一步转化为字节码或直接生成机器码. – &lt;a href=&quot;https://www.jianshu.com/p/b9f14f384954&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于 Vue 的语法树解析可以查看&lt;a href=&quot;https://github.com/answershuto/learnVue/blob/master/docs/%E8%81%8A%E8%81%8AVue%E7%9A%84template%E7%BC%96%E8%AF%91.MarkDown&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://kricsleo.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="AST" scheme="https://kricsleo.github.io/tags/AST/"/>
    
  </entry>
  
  <entry>
    <title>js-object</title>
    <link href="https://kricsleo.github.io/js-object/"/>
    <id>https://kricsleo.github.io/js-object/</id>
    <published>2018-09-22T15:44:52.000Z</published>
    <updated>2018-09-23T03:48:03.664Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript的内存机制及按值传递&quot;&gt;&lt;a href=&quot;#JavaScript的内存机制及按值传递&quot; class=&quot;headerlink&quot; title=&quot;JavaScript的内存机制及按值传递&quot;&gt;&lt;/a&gt;JavaScript的内存机制及按值传递&lt;/h1&gt;&lt;p&gt;JavaScript是一门轻级的编程语言, 我之前也用过C++和Java, 相比起来JavaScript是一门年轻简约的编程语言, 但是我很看好这门语言, 我记得之前看过一个大牛说现在的前端开发是黎明前的黑暗, 在数年之内必定会清晰明朗起来. 自己深表赞同, JavaScript现在的确是有很多的缺陷, 相比较起来它的依赖库也不如java那般丰富, 但是它一个最大的优点(个人认为)就是它的轻量级, 你仅仅需要一个浏览器(或者Node环境, 但是Node其实也是基于Chrome的V8引擎), 他就能完成自己所有的工作, 我坚信随着各种标准的制定以及已经走在探索路上的前端开发师们能够很快为JavaScript带来它起飞的春天.&lt;/p&gt;
&lt;p&gt;上面是我的个人希冀, 说到这篇文章, 主要是记录一下JavaScript的内存机制以及按值传递规则, 因为我在JavaScript的开发过程中会不由自主的把它和我也使用过的C++和Java进行比较, 我认为编程语言是互通的, 但是它们在某些细节上的处理有所不同, 则正是我们需要去注意的.&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://kricsleo.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://kricsleo.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>bash</title>
    <link href="https://kricsleo.github.io/bash/"/>
    <id>https://kricsleo.github.io/bash/</id>
    <published>2018-09-13T04:41:22.000Z</published>
    <updated>2018-09-29T05:55:18.395Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;常用的bash命令&quot;&gt;&lt;a href=&quot;#常用的bash命令&quot; class=&quot;headerlink&quot; title=&quot;常用的bash命令&quot;&gt;&lt;/a&gt;常用的bash命令&lt;/h1&gt;
    
    </summary>
    
      <category term="工具" scheme="https://kricsleo.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="bash" scheme="https://kricsleo.github.io/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>flex</title>
    <link href="https://kricsleo.github.io/flex/"/>
    <id>https://kricsleo.github.io/flex/</id>
    <published>2018-09-13T04:36:29.000Z</published>
    <updated>2018-09-13T04:45:32.000Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;flex布局&quot;&gt;&lt;a href=&quot;#flex布局&quot; class=&quot;headerlink&quot; title=&quot;flex布局&quot;&gt;&lt;/a&gt;flex布局&lt;/h1&gt;&lt;p&gt;关于flex布局的笔记&lt;br&gt;&lt;img src=&quot;https://lc-gold-cdn.xitu.io/0dd26d8e99257ff36443.png?imageslim&quot; alt=&quot;flex&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://kricsleo.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="https://kricsleo.github.io/tags/css/"/>
    
      <category term="flex" scheme="https://kricsleo.github.io/tags/flex/"/>
    
  </entry>
  
  <entry>
    <title>vue</title>
    <link href="https://kricsleo.github.io/vue/"/>
    <id>https://kricsleo.github.io/vue/</id>
    <published>2018-09-13T01:42:12.000Z</published>
    <updated>2018-09-24T09:05:33.991Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Vue-学习笔记&quot;&gt;&lt;a href=&quot;#Vue-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Vue 学习笔记&quot;&gt;&lt;/a&gt;Vue 学习笔记&lt;/h1&gt;&lt;p&gt;最近开始学习 Vue 了, 在这里记录一下学习笔记.&lt;/p&gt;
&lt;p&gt;最近像没头的苍蝇一样盯着 Vue, 感觉好些地方不甚了解, 博客也搁置了快五天没动过笔了…&lt;/p&gt;
    
    </summary>
    
      <category term="框架" scheme="https://kricsleo.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vue" scheme="https://kricsleo.github.io/tags/vue/"/>
    
      <category term="ast" scheme="https://kricsleo.github.io/tags/ast/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="https://kricsleo.github.io/docker/"/>
    <id>https://kricsleo.github.io/docker/</id>
    <published>2018-09-10T05:19:34.000Z</published>
    <updated>2018-09-29T01:02:49.799Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;docker学习笔记&quot;&gt;&lt;a href=&quot;#docker学习笔记&quot; class=&quot;headerlink&quot; title=&quot;docker学习笔记&quot;&gt;&lt;/a&gt;docker学习笔记&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https//www.docker.org.cn/book/docker/what-is-docker-16.html&quot;&gt;参考文档&lt;/a&gt;&lt;br&gt;Docker是一个开源的引擎，可以轻松的为任何应用创建一个轻量级的、可移植的、自给自足的容器。开发者在笔记本上编译测试通过的容器可以批量地在生产环境中部署，包括VMs（虚拟机）、bare metal、OpenStack 集群和其他的基础应用平台.&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="https://kricsleo.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="docker" scheme="https://kricsleo.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Practical-Function-In-Javascript</title>
    <link href="https://kricsleo.github.io/practical-function-in-javascript/"/>
    <id>https://kricsleo.github.io/practical-function-in-javascript/</id>
    <published>2018-09-07T01:07:17.000Z</published>
    <updated>2018-10-08T06:09:13.837Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript中的常用函数&quot;&gt;&lt;a href=&quot;#JavaScript中的常用函数&quot; class=&quot;headerlink&quot; title=&quot;JavaScript中的常用函数&quot;&gt;&lt;/a&gt;JavaScript中的常用函数&lt;/h1&gt;&lt;p&gt;本文主要整理了平时JavaScript中常用的函数, 持续更新.&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://kricsleo.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="function" scheme="https://kricsleo.github.io/tags/function/"/>
    
  </entry>
  
  <entry>
    <title>Mini-Program</title>
    <link href="https://kricsleo.github.io/Mini-Program/"/>
    <id>https://kricsleo.github.io/Mini-Program/</id>
    <published>2018-09-06T07:10:23.000Z</published>
    <updated>2018-10-08T06:11:56.880Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;微信小程序跳坑记录&quot;&gt;&lt;a href=&quot;#微信小程序跳坑记录&quot; class=&quot;headerlink&quot; title=&quot;微信小程序跳坑记录&quot;&gt;&lt;/a&gt;微信小程序跳坑记录&lt;/h1&gt;&lt;p&gt;开发微信小程序还是踩了不少坑的, 官方的文档并不详细, 更新也不及时, 碰到问题还是多 google 吧.&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://kricsleo.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Mini-Program" scheme="https://kricsleo.github.io/tags/Mini-Program/"/>
    
  </entry>
  
  <entry>
    <title>ASCII-Unicode-UTF8</title>
    <link href="https://kricsleo.github.io/unicode-utf8/"/>
    <id>https://kricsleo.github.io/unicode-utf8/</id>
    <published>2018-09-05T09:33:51.000Z</published>
    <updated>2018-09-29T01:02:49.799Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ASCII-Unicode和UTF8之间的关系&quot;&gt;&lt;a href=&quot;#ASCII-Unicode和UTF8之间的关系&quot; class=&quot;headerlink&quot; title=&quot;ASCII, Unicode和UTF8之间的关系&quot;&gt;&lt;/a&gt;ASCII, Unicode和UTF8之间的关系&lt;/h1&gt;&lt;p&gt;本文主要了解一下ASCII码、Unicode码和UTF-8码的来源和相互之间的关系, 顺便也理了一下中文编码GB2312, GBK, GB18030的关系。&lt;br&gt;
    
    </summary>
    
    
      <category term="encrypt" scheme="https://kricsleo.github.io/tags/encrypt/"/>
    
  </entry>
  
  <entry>
    <title>Airbnb-JavaScript-Style-Guide</title>
    <link href="https://kricsleo.github.io/Airbnb-JavaScript-Style-Guide/"/>
    <id>https://kricsleo.github.io/Airbnb-JavaScript-Style-Guide/</id>
    <published>2018-09-05T01:55:28.000Z</published>
    <updated>2018-10-22T10:51:53.739Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Airbnb-JavaScript-Style-Guide-阅读笔记&quot;&gt;&lt;a href=&quot;#Airbnb-JavaScript-Style-Guide-阅读笔记&quot; class=&quot;headerlink&quot; title=&quot;Airbnb JavaScript Style Guide 阅读笔记&quot;&gt;&lt;/a&gt;Airbnb JavaScript Style Guide 阅读笔记&lt;/h1&gt;&lt;p&gt;Airbnb的JavaScript代码风格是世界上最流行的JavaScript代码风格之一, 在阅读的时候结合我自己的使用经验记录如下重点, 日后多次阅读应该会持续更新.&lt;br&gt;在线阅读地址: &lt;a href=&quot;https://github.com/airbnb/javascript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/airbnb/javascript&lt;/a&gt;&lt;br&gt;(中文翻译版: &lt;a href=&quot;https://github.com/yuche/javascript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/yuche/javascript&lt;/a&gt;)&lt;br&gt;
    
    </summary>
    
    
      <category term="codeStyle" scheme="https://kricsleo.github.io/tags/codeStyle/"/>
    
  </entry>
  
  <entry>
    <title>Base64-md5</title>
    <link href="https://kricsleo.github.io/base64-md5/"/>
    <id>https://kricsleo.github.io/base64-md5/</id>
    <published>2018-09-04T01:11:03.000Z</published>
    <updated>2018-09-29T01:02:49.799Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Base64编码与md5摘要算法探究及日常应用&quot;&gt;&lt;a href=&quot;#Base64编码与md5摘要算法探究及日常应用&quot; class=&quot;headerlink&quot; title=&quot;Base64编码与md5摘要算法探究及日常应用&quot;&gt;&lt;/a&gt;Base64编码与md5摘要算法探究及日常应用&lt;/h1&gt;&lt;p&gt;Base64编码和md5摘要算法我们经常听到,本文主要对着两者算法做一个简单的了解探究&lt;br&gt;
    
    </summary>
    
    
      <category term="encrypt" scheme="https://kricsleo.github.io/tags/encrypt/"/>
    
  </entry>
  
</feed>
