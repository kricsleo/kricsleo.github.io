<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Graphql on World of Forks</title>
    <link>https://kricsleo.github.io/docs/tags/graphql/</link>
    <description>Recent content in Graphql on World of Forks</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 15 Aug 2017 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://kricsleo.github.io/docs/tags/graphql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GraphQL Learn (1) - Queries and Mutations</title>
      <link>https://kricsleo.github.io/docs/posts/graphql-learn-1---queries-and-mutations/</link>
      <pubDate>Tue, 15 Aug 2017 00:00:00 +0800</pubDate>
      
      <guid>https://kricsleo.github.io/docs/posts/graphql-learn-1---queries-and-mutations/</guid>
      <description>&lt;p&gt;在此页面上，你将详细了解如何查询GrahQL服务器。&lt;/p&gt;

&lt;h2 id=&#34;字段-fields&#34;&gt;字段（Fields）&lt;/h2&gt;

&lt;p&gt;最简单的，GraphQL是关于要求对象上的特定字段。我们先来看一个非常简单的查询，当我们运行它时得到结果：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-graphql&#34;&gt;{
  hero {
    name
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;hero&amp;quot;: {
      &amp;quot;name&amp;quot;: &amp;quot;R2-D2&amp;quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到，查询与结果的形状完全相同。这对于GraphQL是至关重要的，因为您总是收到您期望的内容，并且服务器确切知道客户端要求哪些字段。&lt;br /&gt;
&lt;br /&gt;
字段名返回一个String类型，在这种情况下是星球大战主角“R2-D2”的名称。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GraphQL Learn (2) - Schemas and Types</title>
      <link>https://kricsleo.github.io/docs/posts/graphql-learn-2---schemas-and-types/</link>
      <pubDate>Tue, 15 Aug 2017 00:00:00 +0800</pubDate>
      
      <guid>https://kricsleo.github.io/docs/posts/graphql-learn-2---schemas-and-types/</guid>
      <description>&lt;p&gt;在此页面上，您将了解有关GraphQL类型系统的所有知识，以及如何描述可查询哪些数据。 由于GraphQL可以与任何后端框架或编程语言一起使用，因此我们将远离实现特定的详细信息，仅讨论概念。&lt;/p&gt;

&lt;h3 id=&#34;类型系统-type-system&#34;&gt;类型系统（Type System）&lt;/h3&gt;

&lt;p&gt;如果您以前看过GraphQL查询，那么你应该知道GraphQL查询语言基本上是在对象上选择字段。 所以在以下查询中：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-graphql&#34;&gt;{
  hero {
    name
    appearsIn
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GraphQL Learn (3) - Validation</title>
      <link>https://kricsleo.github.io/docs/posts/graphql-learn-3---validation/</link>
      <pubDate>Tue, 15 Aug 2017 00:00:00 +0800</pubDate>
      
      <guid>https://kricsleo.github.io/docs/posts/graphql-learn-3---validation/</guid>
      <description>&lt;p&gt;通过使用类型系统，可以预先确定GraphQL查询是否有效。 这样可以让服务器和客户端有效地通知开发人员在创建无效查询时，无需在运行时检查。&lt;/p&gt;

&lt;p&gt;对于我们的星球大战示例，文件&lt;a href=&#34;https://github.com/graphql/graphql-js/blob/master/src/__tests__/starWarsValidation-test.js&#34;&gt;starWarsValidation-test.js&lt;/a&gt;包含许多无效的查询，可以用来测试当前实现的验证器。&lt;/p&gt;

&lt;p&gt;首先，我们来看一个复杂的有效查询。 这是一个嵌套查询，类似于上一节的一个示例，但将重复的字段分解成一个片段：&lt;br /&gt;
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GraphQL Learn (4) - Execution</title>
      <link>https://kricsleo.github.io/docs/posts/graphql-learn-4---execution/</link>
      <pubDate>Tue, 15 Aug 2017 00:00:00 +0800</pubDate>
      
      <guid>https://kricsleo.github.io/docs/posts/graphql-learn-4---execution/</guid>
      <description>&lt;p&gt;经过验证，GraphQL查询由GraphQL服务器执行，然后返回一个与查询形状相同的结果，通常为JSON。&lt;/p&gt;

&lt;p&gt;GraphQL无法执行没有类型系统的查询，让我们使用类型系统例子来说明执行查询，这个例子是我们教程中使用的类型系统中的一部分：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-graphql&#34;&gt;type Query {
  human(id: ID!): Human
}
type Human {
  name: String
  appearsIn: [Episode]
  starships: [Starship]
}
enum Episode {
  NEWHOPE
  EMPIRE
  JEDI
}
type Starship {
  name: String
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>GraphQL Learn (5) - Introspection</title>
      <link>https://kricsleo.github.io/docs/posts/graphql-learn-5---introspection/</link>
      <pubDate>Tue, 15 Aug 2017 00:00:00 +0800</pubDate>
      
      <guid>https://kricsleo.github.io/docs/posts/graphql-learn-5---introspection/</guid>
      <description>&lt;p&gt;查询GraphQL架构有关它支持的查询的信息通常很有用。 GraphQL允许我们使用内省系统来做到这一点！对于我们的星球大战例子来说，文件&lt;a href=&#34;https://github.com/graphql/graphql-js/blob/master/src/__tests__/starWarsIntrospection-test.js&#34;&gt;starWarsIntrospection-test.js&lt;/a&gt;包含许多查询内省系统的查询，并且是一个完整的按照规范实现的测试文件。&lt;/p&gt;

&lt;p&gt;我们设计了类型系统，所以我们应该知道系统中可用的类型。但是如果不知道，我们还可以通过查询__schema字段来询问GraphQL。这个字段始终存在于根类型中。&lt;br /&gt;
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>